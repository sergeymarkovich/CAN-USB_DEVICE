
CAN-USB_device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090cc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080091d8  080091d8  000191d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092c8  080092c8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080092c8  080092c8  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080092c8  080092c8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092c8  080092c8  000192c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092cc  080092cc  000192cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080092d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001314  200001e0  080094b0  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014f4  080094b0  000214f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000161dc  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003504  00000000  00000000  000363e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df8  00000000  00000000  000398f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb0  00000000  00000000  0003a6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a57d  00000000  00000000  0003b398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000112bc  00000000  00000000  00055915  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a003  00000000  00000000  00066bd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f0bd4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c48  00000000  00000000  000f0c28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	080091c0 	.word	0x080091c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	080091c0 	.word	0x080091c0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_CAN_RxFifo0MsgPendingCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af02      	add	r7, sp, #8
 8000162:	6078      	str	r0, [r7, #4]
    if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000164:	4b22      	ldr	r3, [pc, #136]	; (80001f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8000166:	4a23      	ldr	r2, [pc, #140]	; (80001f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8000168:	2100      	movs	r1, #0
 800016a:	6878      	ldr	r0, [r7, #4]
 800016c:	f000 ff4e 	bl	800100c <HAL_CAN_GetRxMessage>
 8000170:	4603      	mov	r3, r0
 8000172:	2b00      	cmp	r3, #0
 8000174:	d137      	bne.n	80001e6 <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
    {
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000176:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800017a:	481f      	ldr	r0, [pc, #124]	; (80001f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 800017c:	f001 fd4c 	bl	8001c18 <HAL_GPIO_TogglePin>

        if(RxHeader.StdId == 0x0378)
 8000180:	4b1c      	ldr	r3, [pc, #112]	; (80001f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	f5b3 7f5e 	cmp.w	r3, #888	; 0x378
 8000188:	d114      	bne.n	80001b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
        {
        	snprintf(trans_str, 128, "ID %04lX %d\n", RxHeader.StdId, RxData[0]);
 800018a:	4b1a      	ldr	r3, [pc, #104]	; (80001f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	4a18      	ldr	r2, [pc, #96]	; (80001f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8000190:	7812      	ldrb	r2, [r2, #0]
 8000192:	9200      	str	r2, [sp, #0]
 8000194:	4a19      	ldr	r2, [pc, #100]	; (80001fc <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8000196:	2180      	movs	r1, #128	; 0x80
 8000198:	4819      	ldr	r0, [pc, #100]	; (8000200 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 800019a:	f008 fba3 	bl	80088e4 <sniprintf>
        	HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 100);
 800019e:	4818      	ldr	r0, [pc, #96]	; (8000200 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80001a0:	f7ff ffd4 	bl	800014c <strlen>
 80001a4:	4603      	mov	r3, r0
 80001a6:	b29a      	uxth	r2, r3
 80001a8:	2364      	movs	r3, #100	; 0x64
 80001aa:	4915      	ldr	r1, [pc, #84]	; (8000200 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80001ac:	4815      	ldr	r0, [pc, #84]	; (8000204 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 80001ae:	f003 ff2e 	bl	800400e <HAL_UART_Transmit>
        {
        	snprintf(trans_str, 128, "ID %04lX %d\n", RxHeader.StdId, RxData[0]);
        	HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 100);
        }
    }
}
 80001b2:	e018      	b.n	80001e6 <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
        else if(RxHeader.StdId == 0x0126)
 80001b4:	4b0f      	ldr	r3, [pc, #60]	; (80001f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 80001bc:	d113      	bne.n	80001e6 <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
        	snprintf(trans_str, 128, "ID %04lX %d\n", RxHeader.StdId, RxData[0]);
 80001be:	4b0d      	ldr	r3, [pc, #52]	; (80001f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	4a0b      	ldr	r2, [pc, #44]	; (80001f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 80001c4:	7812      	ldrb	r2, [r2, #0]
 80001c6:	9200      	str	r2, [sp, #0]
 80001c8:	4a0c      	ldr	r2, [pc, #48]	; (80001fc <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 80001ca:	2180      	movs	r1, #128	; 0x80
 80001cc:	480c      	ldr	r0, [pc, #48]	; (8000200 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80001ce:	f008 fb89 	bl	80088e4 <sniprintf>
        	HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 100);
 80001d2:	480b      	ldr	r0, [pc, #44]	; (8000200 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80001d4:	f7ff ffba 	bl	800014c <strlen>
 80001d8:	4603      	mov	r3, r0
 80001da:	b29a      	uxth	r2, r3
 80001dc:	2364      	movs	r3, #100	; 0x64
 80001de:	4908      	ldr	r1, [pc, #32]	; (8000200 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80001e0:	4808      	ldr	r0, [pc, #32]	; (8000204 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 80001e2:	f003 ff14 	bl	800400e <HAL_UART_Transmit>
}
 80001e6:	bf00      	nop
 80001e8:	3708      	adds	r7, #8
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	20000284 	.word	0x20000284
 80001f4:	20000544 	.word	0x20000544
 80001f8:	40011000 	.word	0x40011000
 80001fc:	080091d8 	.word	0x080091d8
 8000200:	200001fc 	.word	0x200001fc
 8000204:	200004e8 	.word	0x200004e8

08000208 <HAL_CAN_ErrorCallback>:


void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b084      	sub	sp, #16
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
    uint32_t er = HAL_CAN_GetError(hcan);
 8000210:	6878      	ldr	r0, [r7, #4]
 8000212:	f001 fa4b 	bl	80016ac <HAL_CAN_GetError>
 8000216:	60f8      	str	r0, [r7, #12]
    sprintf(trans_str,"ER CAN %lu %08lX", er, er);
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	68fa      	ldr	r2, [r7, #12]
 800021c:	4908      	ldr	r1, [pc, #32]	; (8000240 <HAL_CAN_ErrorCallback+0x38>)
 800021e:	4809      	ldr	r0, [pc, #36]	; (8000244 <HAL_CAN_ErrorCallback+0x3c>)
 8000220:	f008 fb94 	bl	800894c <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 100);
 8000224:	4807      	ldr	r0, [pc, #28]	; (8000244 <HAL_CAN_ErrorCallback+0x3c>)
 8000226:	f7ff ff91 	bl	800014c <strlen>
 800022a:	4603      	mov	r3, r0
 800022c:	b29a      	uxth	r2, r3
 800022e:	2364      	movs	r3, #100	; 0x64
 8000230:	4904      	ldr	r1, [pc, #16]	; (8000244 <HAL_CAN_ErrorCallback+0x3c>)
 8000232:	4805      	ldr	r0, [pc, #20]	; (8000248 <HAL_CAN_ErrorCallback+0x40>)
 8000234:	f003 feeb 	bl	800400e <HAL_UART_Transmit>
}
 8000238:	bf00      	nop
 800023a:	3710      	adds	r7, #16
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}
 8000240:	080091e8 	.word	0x080091e8
 8000244:	200001fc 	.word	0x200001fc
 8000248:	200004e8 	.word	0x200004e8

0800024c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000252:	f000 fb3f 	bl	80008d4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000256:	f000 f889 	bl	800036c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800025a:	f000 f961 	bl	8000520 <MX_GPIO_Init>
  MX_CAN_Init();
 800025e:	f000 f8df 	bl	8000420 <MX_CAN_Init>
  MX_USB_DEVICE_Init();
 8000262:	f007 fe3b 	bl	8007edc <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 8000266:	f000 f931 	bl	80004cc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart1, (uint8_t*)"CAN\n", 4, 100);
 800026a:	2364      	movs	r3, #100	; 0x64
 800026c:	2204      	movs	r2, #4
 800026e:	4938      	ldr	r1, [pc, #224]	; (8000350 <main+0x104>)
 8000270:	4838      	ldr	r0, [pc, #224]	; (8000354 <main+0x108>)
 8000272:	f003 fecc 	bl	800400e <HAL_UART_Transmit>

  TxHeader.StdId = 0x0378;
 8000276:	4b38      	ldr	r3, [pc, #224]	; (8000358 <main+0x10c>)
 8000278:	f44f 725e 	mov.w	r2, #888	; 0x378
 800027c:	601a      	str	r2, [r3, #0]
  TxHeader.ExtId = 0;
 800027e:	4b36      	ldr	r3, [pc, #216]	; (8000358 <main+0x10c>)
 8000280:	2200      	movs	r2, #0
 8000282:	605a      	str	r2, [r3, #4]
  TxHeader.RTR = CAN_RTR_DATA; //CAN_RTR_REMOTE
 8000284:	4b34      	ldr	r3, [pc, #208]	; (8000358 <main+0x10c>)
 8000286:	2200      	movs	r2, #0
 8000288:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;   // CAN_ID_EXT
 800028a:	4b33      	ldr	r3, [pc, #204]	; (8000358 <main+0x10c>)
 800028c:	2200      	movs	r2, #0
 800028e:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 8;
 8000290:	4b31      	ldr	r3, [pc, #196]	; (8000358 <main+0x10c>)
 8000292:	2208      	movs	r2, #8
 8000294:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = 0;
 8000296:	4b30      	ldr	r3, [pc, #192]	; (8000358 <main+0x10c>)
 8000298:	2200      	movs	r2, #0
 800029a:	751a      	strb	r2, [r3, #20]

  for(uint8_t i = 0; i < 8; i++)
 800029c:	2300      	movs	r3, #0
 800029e:	71fb      	strb	r3, [r7, #7]
 80002a0:	e008      	b.n	80002b4 <main+0x68>
  {
      TxData[i] = (i + 10);
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	79fa      	ldrb	r2, [r7, #7]
 80002a6:	320a      	adds	r2, #10
 80002a8:	b2d1      	uxtb	r1, r2
 80002aa:	4a2c      	ldr	r2, [pc, #176]	; (800035c <main+0x110>)
 80002ac:	54d1      	strb	r1, [r2, r3]
  for(uint8_t i = 0; i < 8; i++)
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	3301      	adds	r3, #1
 80002b2:	71fb      	strb	r3, [r7, #7]
 80002b4:	79fb      	ldrb	r3, [r7, #7]
 80002b6:	2b07      	cmp	r3, #7
 80002b8:	d9f3      	bls.n	80002a2 <main+0x56>
  }

  HAL_CAN_Start(&hcan);
 80002ba:	4829      	ldr	r0, [pc, #164]	; (8000360 <main+0x114>)
 80002bc:	f000 fd54 	bl	8000d68 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_ERROR | CAN_IT_BUSOFF | CAN_IT_LAST_ERROR_CODE);
 80002c0:	f648 4102 	movw	r1, #35842	; 0x8c02
 80002c4:	4826      	ldr	r0, [pc, #152]	; (8000360 <main+0x114>)
 80002c6:	f000 ffb2 	bl	800122e <HAL_CAN_ActivateNotification>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  TxHeader.StdId = 0x0378;
 80002ca:	4b23      	ldr	r3, [pc, #140]	; (8000358 <main+0x10c>)
 80002cc:	f44f 725e 	mov.w	r2, #888	; 0x378
 80002d0:	601a      	str	r2, [r3, #0]
	          TxData[0] = 90;
 80002d2:	4b22      	ldr	r3, [pc, #136]	; (800035c <main+0x110>)
 80002d4:	225a      	movs	r2, #90	; 0x5a
 80002d6:	701a      	strb	r2, [r3, #0]

	          while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0);
 80002d8:	bf00      	nop
 80002da:	4821      	ldr	r0, [pc, #132]	; (8000360 <main+0x114>)
 80002dc:	f000 fe62 	bl	8000fa4 <HAL_CAN_GetTxMailboxesFreeLevel>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d0f9      	beq.n	80002da <main+0x8e>

	          if(HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80002e6:	4b1f      	ldr	r3, [pc, #124]	; (8000364 <main+0x118>)
 80002e8:	4a1c      	ldr	r2, [pc, #112]	; (800035c <main+0x110>)
 80002ea:	491b      	ldr	r1, [pc, #108]	; (8000358 <main+0x10c>)
 80002ec:	481c      	ldr	r0, [pc, #112]	; (8000360 <main+0x114>)
 80002ee:	f000 fd7f 	bl	8000df0 <HAL_CAN_AddTxMessage>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d005      	beq.n	8000304 <main+0xb8>
	          {
	                  HAL_UART_Transmit(&huart1, (uint8_t*)"ER SEND\n", 8, 100);
 80002f8:	2364      	movs	r3, #100	; 0x64
 80002fa:	2208      	movs	r2, #8
 80002fc:	491a      	ldr	r1, [pc, #104]	; (8000368 <main+0x11c>)
 80002fe:	4815      	ldr	r0, [pc, #84]	; (8000354 <main+0x108>)
 8000300:	f003 fe85 	bl	800400e <HAL_UART_Transmit>
	          }

	          HAL_Delay(500);
 8000304:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000308:	f000 fb46 	bl	8000998 <HAL_Delay>


	          TxHeader.StdId = 0x0126;
 800030c:	4b12      	ldr	r3, [pc, #72]	; (8000358 <main+0x10c>)
 800030e:	f44f 7293 	mov.w	r2, #294	; 0x126
 8000312:	601a      	str	r2, [r3, #0]
	          TxData[0] = 100;
 8000314:	4b11      	ldr	r3, [pc, #68]	; (800035c <main+0x110>)
 8000316:	2264      	movs	r2, #100	; 0x64
 8000318:	701a      	strb	r2, [r3, #0]

	          while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0);
 800031a:	bf00      	nop
 800031c:	4810      	ldr	r0, [pc, #64]	; (8000360 <main+0x114>)
 800031e:	f000 fe41 	bl	8000fa4 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d0f9      	beq.n	800031c <main+0xd0>

	          if(HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000328:	4b0e      	ldr	r3, [pc, #56]	; (8000364 <main+0x118>)
 800032a:	4a0c      	ldr	r2, [pc, #48]	; (800035c <main+0x110>)
 800032c:	490a      	ldr	r1, [pc, #40]	; (8000358 <main+0x10c>)
 800032e:	480c      	ldr	r0, [pc, #48]	; (8000360 <main+0x114>)
 8000330:	f000 fd5e 	bl	8000df0 <HAL_CAN_AddTxMessage>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d005      	beq.n	8000346 <main+0xfa>
	          {
	                  HAL_UART_Transmit(&huart1, (uint8_t*)"ER SEND\n", 8, 100);
 800033a:	2364      	movs	r3, #100	; 0x64
 800033c:	2208      	movs	r2, #8
 800033e:	490a      	ldr	r1, [pc, #40]	; (8000368 <main+0x11c>)
 8000340:	4804      	ldr	r0, [pc, #16]	; (8000354 <main+0x108>)
 8000342:	f003 fe64 	bl	800400e <HAL_UART_Transmit>
	          }

	          HAL_Delay(500);
 8000346:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800034a:	f000 fb25 	bl	8000998 <HAL_Delay>
	  TxHeader.StdId = 0x0378;
 800034e:	e7bc      	b.n	80002ca <main+0x7e>
 8000350:	080091fc 	.word	0x080091fc
 8000354:	200004e8 	.word	0x200004e8
 8000358:	2000052c 	.word	0x2000052c
 800035c:	2000027c 	.word	0x2000027c
 8000360:	200004c0 	.word	0x200004c0
 8000364:	2000028c 	.word	0x2000028c
 8000368:	08009204 	.word	0x08009204

0800036c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b094      	sub	sp, #80	; 0x50
 8000370:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000372:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000376:	2228      	movs	r2, #40	; 0x28
 8000378:	2100      	movs	r1, #0
 800037a:	4618      	mov	r0, r3
 800037c:	f008 faaa 	bl	80088d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000380:	f107 0314 	add.w	r3, r7, #20
 8000384:	2200      	movs	r2, #0
 8000386:	601a      	str	r2, [r3, #0]
 8000388:	605a      	str	r2, [r3, #4]
 800038a:	609a      	str	r2, [r3, #8]
 800038c:	60da      	str	r2, [r3, #12]
 800038e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000390:	1d3b      	adds	r3, r7, #4
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800039c:	2301      	movs	r3, #1
 800039e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003a6:	2300      	movs	r3, #0
 80003a8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003aa:	2301      	movs	r3, #1
 80003ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ae:	2302      	movs	r3, #2
 80003b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003b8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003c2:	4618      	mov	r0, r3
 80003c4:	f003 f906 	bl	80035d4 <HAL_RCC_OscConfig>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80003ce:	f000 f8fd 	bl	80005cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d2:	230f      	movs	r3, #15
 80003d4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003d6:	2302      	movs	r3, #2
 80003d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003da:	2300      	movs	r3, #0
 80003dc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003e2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003e4:	2300      	movs	r3, #0
 80003e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003e8:	f107 0314 	add.w	r3, r7, #20
 80003ec:	2102      	movs	r1, #2
 80003ee:	4618      	mov	r0, r3
 80003f0:	f003 fb70 	bl	8003ad4 <HAL_RCC_ClockConfig>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <SystemClock_Config+0x92>
  {
    Error_Handler();
 80003fa:	f000 f8e7 	bl	80005cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80003fe:	2310      	movs	r3, #16
 8000400:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000402:	2300      	movs	r3, #0
 8000404:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	4618      	mov	r0, r3
 800040a:	f003 fcfd 	bl	8003e08 <HAL_RCCEx_PeriphCLKConfig>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000414:	f000 f8da 	bl	80005cc <Error_Handler>
  }
}
 8000418:	bf00      	nop
 800041a:	3750      	adds	r7, #80	; 0x50
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}

08000420 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b08a      	sub	sp, #40	; 0x28
 8000424:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000426:	4b27      	ldr	r3, [pc, #156]	; (80004c4 <MX_CAN_Init+0xa4>)
 8000428:	4a27      	ldr	r2, [pc, #156]	; (80004c8 <MX_CAN_Init+0xa8>)
 800042a:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 6;
 800042c:	4b25      	ldr	r3, [pc, #148]	; (80004c4 <MX_CAN_Init+0xa4>)
 800042e:	2206      	movs	r2, #6
 8000430:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000432:	4b24      	ldr	r3, [pc, #144]	; (80004c4 <MX_CAN_Init+0xa4>)
 8000434:	2200      	movs	r2, #0
 8000436:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000438:	4b22      	ldr	r3, [pc, #136]	; (80004c4 <MX_CAN_Init+0xa4>)
 800043a:	2200      	movs	r2, #0
 800043c:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 800043e:	4b21      	ldr	r3, [pc, #132]	; (80004c4 <MX_CAN_Init+0xa4>)
 8000440:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8000444:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000446:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <MX_CAN_Init+0xa4>)
 8000448:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800044c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800044e:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <MX_CAN_Init+0xa4>)
 8000450:	2200      	movs	r2, #0
 8000452:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000454:	4b1b      	ldr	r3, [pc, #108]	; (80004c4 <MX_CAN_Init+0xa4>)
 8000456:	2200      	movs	r2, #0
 8000458:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800045a:	4b1a      	ldr	r3, [pc, #104]	; (80004c4 <MX_CAN_Init+0xa4>)
 800045c:	2200      	movs	r2, #0
 800045e:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000460:	4b18      	ldr	r3, [pc, #96]	; (80004c4 <MX_CAN_Init+0xa4>)
 8000462:	2200      	movs	r2, #0
 8000464:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000466:	4b17      	ldr	r3, [pc, #92]	; (80004c4 <MX_CAN_Init+0xa4>)
 8000468:	2200      	movs	r2, #0
 800046a:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800046c:	4b15      	ldr	r3, [pc, #84]	; (80004c4 <MX_CAN_Init+0xa4>)
 800046e:	2200      	movs	r2, #0
 8000470:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000472:	4814      	ldr	r0, [pc, #80]	; (80004c4 <MX_CAN_Init+0xa4>)
 8000474:	f000 fab4 	bl	80009e0 <HAL_CAN_Init>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 800047e:	f000 f8a5 	bl	80005cc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  sFilterConfig.FilterBank = 0;
 8000482:	2300      	movs	r3, #0
 8000484:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000486:	2300      	movs	r3, #0
 8000488:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800048a:	2301      	movs	r3, #1
 800048c:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 800048e:	2300      	movs	r3, #0
 8000490:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000492:	2300      	movs	r3, #0
 8000494:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000496:	2300      	movs	r3, #0
 8000498:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 800049a:	2300      	movs	r3, #0
 800049c:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800049e:	2300      	movs	r3, #0
 80004a0:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80004a2:	2301      	movs	r3, #1
 80004a4:	623b      	str	r3, [r7, #32]
  //sFilterConfig.SlaveStartFilterBank = 14;

  if(HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80004a6:	463b      	mov	r3, r7
 80004a8:	4619      	mov	r1, r3
 80004aa:	4806      	ldr	r0, [pc, #24]	; (80004c4 <MX_CAN_Init+0xa4>)
 80004ac:	f000 fb93 	bl	8000bd6 <HAL_CAN_ConfigFilter>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <MX_CAN_Init+0x9a>
  {
  Error_Handler();
 80004b6:	f000 f889 	bl	80005cc <Error_Handler>
  }
  /* USER CODE END CAN_Init 2 */

}
 80004ba:	bf00      	nop
 80004bc:	3728      	adds	r7, #40	; 0x28
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	200004c0 	.word	0x200004c0
 80004c8:	40006400 	.word	0x40006400

080004cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004d0:	4b11      	ldr	r3, [pc, #68]	; (8000518 <MX_USART1_UART_Init+0x4c>)
 80004d2:	4a12      	ldr	r2, [pc, #72]	; (800051c <MX_USART1_UART_Init+0x50>)
 80004d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004d6:	4b10      	ldr	r3, [pc, #64]	; (8000518 <MX_USART1_UART_Init+0x4c>)
 80004d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004de:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <MX_USART1_UART_Init+0x4c>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004e4:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <MX_USART1_UART_Init+0x4c>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004ea:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <MX_USART1_UART_Init+0x4c>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004f0:	4b09      	ldr	r3, [pc, #36]	; (8000518 <MX_USART1_UART_Init+0x4c>)
 80004f2:	220c      	movs	r2, #12
 80004f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004f6:	4b08      	ldr	r3, [pc, #32]	; (8000518 <MX_USART1_UART_Init+0x4c>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004fc:	4b06      	ldr	r3, [pc, #24]	; (8000518 <MX_USART1_UART_Init+0x4c>)
 80004fe:	2200      	movs	r2, #0
 8000500:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000502:	4805      	ldr	r0, [pc, #20]	; (8000518 <MX_USART1_UART_Init+0x4c>)
 8000504:	f003 fd36 	bl	8003f74 <HAL_UART_Init>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800050e:	f000 f85d 	bl	80005cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	200004e8 	.word	0x200004e8
 800051c:	40013800 	.word	0x40013800

08000520 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b088      	sub	sp, #32
 8000524:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000526:	f107 0310 	add.w	r3, r7, #16
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]
 8000530:	609a      	str	r2, [r3, #8]
 8000532:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000534:	4b23      	ldr	r3, [pc, #140]	; (80005c4 <MX_GPIO_Init+0xa4>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	4a22      	ldr	r2, [pc, #136]	; (80005c4 <MX_GPIO_Init+0xa4>)
 800053a:	f043 0320 	orr.w	r3, r3, #32
 800053e:	6193      	str	r3, [r2, #24]
 8000540:	4b20      	ldr	r3, [pc, #128]	; (80005c4 <MX_GPIO_Init+0xa4>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	f003 0320 	and.w	r3, r3, #32
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800054c:	4b1d      	ldr	r3, [pc, #116]	; (80005c4 <MX_GPIO_Init+0xa4>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	4a1c      	ldr	r2, [pc, #112]	; (80005c4 <MX_GPIO_Init+0xa4>)
 8000552:	f043 0310 	orr.w	r3, r3, #16
 8000556:	6193      	str	r3, [r2, #24]
 8000558:	4b1a      	ldr	r3, [pc, #104]	; (80005c4 <MX_GPIO_Init+0xa4>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	f003 0310 	and.w	r3, r3, #16
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000564:	4b17      	ldr	r3, [pc, #92]	; (80005c4 <MX_GPIO_Init+0xa4>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	4a16      	ldr	r2, [pc, #88]	; (80005c4 <MX_GPIO_Init+0xa4>)
 800056a:	f043 0304 	orr.w	r3, r3, #4
 800056e:	6193      	str	r3, [r2, #24]
 8000570:	4b14      	ldr	r3, [pc, #80]	; (80005c4 <MX_GPIO_Init+0xa4>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	f003 0304 	and.w	r3, r3, #4
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800057c:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <MX_GPIO_Init+0xa4>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	4a10      	ldr	r2, [pc, #64]	; (80005c4 <MX_GPIO_Init+0xa4>)
 8000582:	f043 0308 	orr.w	r3, r3, #8
 8000586:	6193      	str	r3, [r2, #24]
 8000588:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <MX_GPIO_Init+0xa4>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	f003 0308 	and.w	r3, r3, #8
 8000590:	603b      	str	r3, [r7, #0]
 8000592:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000594:	2200      	movs	r2, #0
 8000596:	2140      	movs	r1, #64	; 0x40
 8000598:	480b      	ldr	r0, [pc, #44]	; (80005c8 <MX_GPIO_Init+0xa8>)
 800059a:	f001 fb25 	bl	8001be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800059e:	2340      	movs	r3, #64	; 0x40
 80005a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a2:	2301      	movs	r3, #1
 80005a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a6:	2300      	movs	r3, #0
 80005a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005aa:	2302      	movs	r3, #2
 80005ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005ae:	f107 0310 	add.w	r3, r7, #16
 80005b2:	4619      	mov	r1, r3
 80005b4:	4804      	ldr	r0, [pc, #16]	; (80005c8 <MX_GPIO_Init+0xa8>)
 80005b6:	f001 f993 	bl	80018e0 <HAL_GPIO_Init>

}
 80005ba:	bf00      	nop
 80005bc:	3720      	adds	r7, #32
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40021000 	.word	0x40021000
 80005c8:	40011000 	.word	0x40011000

080005cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d0:	b672      	cpsid	i
}
 80005d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005d4:	e7fe      	b.n	80005d4 <Error_Handler+0x8>
	...

080005d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005de:	4b15      	ldr	r3, [pc, #84]	; (8000634 <HAL_MspInit+0x5c>)
 80005e0:	699b      	ldr	r3, [r3, #24]
 80005e2:	4a14      	ldr	r2, [pc, #80]	; (8000634 <HAL_MspInit+0x5c>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6193      	str	r3, [r2, #24]
 80005ea:	4b12      	ldr	r3, [pc, #72]	; (8000634 <HAL_MspInit+0x5c>)
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f6:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <HAL_MspInit+0x5c>)
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	4a0e      	ldr	r2, [pc, #56]	; (8000634 <HAL_MspInit+0x5c>)
 80005fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000600:	61d3      	str	r3, [r2, #28]
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <HAL_MspInit+0x5c>)
 8000604:	69db      	ldr	r3, [r3, #28]
 8000606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800060e:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <HAL_MspInit+0x60>)
 8000610:	685b      	ldr	r3, [r3, #4]
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	4a04      	ldr	r2, [pc, #16]	; (8000638 <HAL_MspInit+0x60>)
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800062a:	bf00      	nop
 800062c:	3714      	adds	r7, #20
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr
 8000634:	40021000 	.word	0x40021000
 8000638:	40010000 	.word	0x40010000

0800063c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08a      	sub	sp, #40	; 0x28
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a29      	ldr	r2, [pc, #164]	; (80006fc <HAL_CAN_MspInit+0xc0>)
 8000658:	4293      	cmp	r3, r2
 800065a:	d14b      	bne.n	80006f4 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800065c:	4b28      	ldr	r3, [pc, #160]	; (8000700 <HAL_CAN_MspInit+0xc4>)
 800065e:	69db      	ldr	r3, [r3, #28]
 8000660:	4a27      	ldr	r2, [pc, #156]	; (8000700 <HAL_CAN_MspInit+0xc4>)
 8000662:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000666:	61d3      	str	r3, [r2, #28]
 8000668:	4b25      	ldr	r3, [pc, #148]	; (8000700 <HAL_CAN_MspInit+0xc4>)
 800066a:	69db      	ldr	r3, [r3, #28]
 800066c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000670:	613b      	str	r3, [r7, #16]
 8000672:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000674:	4b22      	ldr	r3, [pc, #136]	; (8000700 <HAL_CAN_MspInit+0xc4>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	4a21      	ldr	r2, [pc, #132]	; (8000700 <HAL_CAN_MspInit+0xc4>)
 800067a:	f043 0308 	orr.w	r3, r3, #8
 800067e:	6193      	str	r3, [r2, #24]
 8000680:	4b1f      	ldr	r3, [pc, #124]	; (8000700 <HAL_CAN_MspInit+0xc4>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f003 0308 	and.w	r3, r3, #8
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800068c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000692:	2300      	movs	r3, #0
 8000694:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	4619      	mov	r1, r3
 80006a0:	4818      	ldr	r0, [pc, #96]	; (8000704 <HAL_CAN_MspInit+0xc8>)
 80006a2:	f001 f91d 	bl	80018e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ac:	2302      	movs	r3, #2
 80006ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006b0:	2303      	movs	r3, #3
 80006b2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b4:	f107 0314 	add.w	r3, r7, #20
 80006b8:	4619      	mov	r1, r3
 80006ba:	4812      	ldr	r0, [pc, #72]	; (8000704 <HAL_CAN_MspInit+0xc8>)
 80006bc:	f001 f910 	bl	80018e0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <HAL_CAN_MspInit+0xcc>)
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	627b      	str	r3, [r7, #36]	; 0x24
 80006c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c8:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80006cc:	627b      	str	r3, [r7, #36]	; 0x24
 80006ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80006d4:	627b      	str	r3, [r7, #36]	; 0x24
 80006d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
 80006de:	4a0a      	ldr	r2, [pc, #40]	; (8000708 <HAL_CAN_MspInit+0xcc>)
 80006e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e2:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2100      	movs	r1, #0
 80006e8:	2014      	movs	r0, #20
 80006ea:	f001 f8c2 	bl	8001872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80006ee:	2014      	movs	r0, #20
 80006f0:	f001 f8db 	bl	80018aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80006f4:	bf00      	nop
 80006f6:	3728      	adds	r7, #40	; 0x28
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40006400 	.word	0x40006400
 8000700:	40021000 	.word	0x40021000
 8000704:	40010c00 	.word	0x40010c00
 8000708:	40010000 	.word	0x40010000

0800070c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000714:	f107 0310 	add.w	r3, r7, #16
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <HAL_UART_MspInit+0x8c>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d131      	bne.n	8000790 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800072c:	4b1b      	ldr	r3, [pc, #108]	; (800079c <HAL_UART_MspInit+0x90>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	4a1a      	ldr	r2, [pc, #104]	; (800079c <HAL_UART_MspInit+0x90>)
 8000732:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000736:	6193      	str	r3, [r2, #24]
 8000738:	4b18      	ldr	r3, [pc, #96]	; (800079c <HAL_UART_MspInit+0x90>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000744:	4b15      	ldr	r3, [pc, #84]	; (800079c <HAL_UART_MspInit+0x90>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	4a14      	ldr	r2, [pc, #80]	; (800079c <HAL_UART_MspInit+0x90>)
 800074a:	f043 0304 	orr.w	r3, r3, #4
 800074e:	6193      	str	r3, [r2, #24]
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <HAL_UART_MspInit+0x90>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f003 0304 	and.w	r3, r3, #4
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800075c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000760:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000762:	2302      	movs	r3, #2
 8000764:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000766:	2303      	movs	r3, #3
 8000768:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076a:	f107 0310 	add.w	r3, r7, #16
 800076e:	4619      	mov	r1, r3
 8000770:	480b      	ldr	r0, [pc, #44]	; (80007a0 <HAL_UART_MspInit+0x94>)
 8000772:	f001 f8b5 	bl	80018e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800077a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000784:	f107 0310 	add.w	r3, r7, #16
 8000788:	4619      	mov	r1, r3
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <HAL_UART_MspInit+0x94>)
 800078c:	f001 f8a8 	bl	80018e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000790:	bf00      	nop
 8000792:	3720      	adds	r7, #32
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40013800 	.word	0x40013800
 800079c:	40021000 	.word	0x40021000
 80007a0:	40010800 	.word	0x40010800

080007a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <NMI_Handler+0x4>

080007aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ae:	e7fe      	b.n	80007ae <HardFault_Handler+0x4>

080007b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <MemManage_Handler+0x4>

080007b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ba:	e7fe      	b.n	80007ba <BusFault_Handler+0x4>

080007bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <UsageFault_Handler+0x4>

080007c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr

080007ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr

080007da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr

080007e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ea:	f000 f8b9 	bl	8000960 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80007f8:	4803      	ldr	r0, [pc, #12]	; (8000808 <USB_LP_CAN1_RX0_IRQHandler+0x14>)
 80007fa:	f000 fd3d 	bl	8001278 <HAL_CAN_IRQHandler>
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80007fe:	4803      	ldr	r0, [pc, #12]	; (800080c <USB_LP_CAN1_RX0_IRQHandler+0x18>)
 8000800:	f001 fb54 	bl	8001eac <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	200004c0 	.word	0x200004c0
 800080c:	200011f8 	.word	0x200011f8

08000810 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000818:	4a14      	ldr	r2, [pc, #80]	; (800086c <_sbrk+0x5c>)
 800081a:	4b15      	ldr	r3, [pc, #84]	; (8000870 <_sbrk+0x60>)
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000824:	4b13      	ldr	r3, [pc, #76]	; (8000874 <_sbrk+0x64>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d102      	bne.n	8000832 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800082c:	4b11      	ldr	r3, [pc, #68]	; (8000874 <_sbrk+0x64>)
 800082e:	4a12      	ldr	r2, [pc, #72]	; (8000878 <_sbrk+0x68>)
 8000830:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000832:	4b10      	ldr	r3, [pc, #64]	; (8000874 <_sbrk+0x64>)
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4413      	add	r3, r2
 800083a:	693a      	ldr	r2, [r7, #16]
 800083c:	429a      	cmp	r2, r3
 800083e:	d207      	bcs.n	8000850 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000840:	f008 f81e 	bl	8008880 <__errno>
 8000844:	4603      	mov	r3, r0
 8000846:	220c      	movs	r2, #12
 8000848:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800084a:	f04f 33ff 	mov.w	r3, #4294967295
 800084e:	e009      	b.n	8000864 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000850:	4b08      	ldr	r3, [pc, #32]	; (8000874 <_sbrk+0x64>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000856:	4b07      	ldr	r3, [pc, #28]	; (8000874 <_sbrk+0x64>)
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4413      	add	r3, r2
 800085e:	4a05      	ldr	r2, [pc, #20]	; (8000874 <_sbrk+0x64>)
 8000860:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000862:	68fb      	ldr	r3, [r7, #12]
}
 8000864:	4618      	mov	r0, r3
 8000866:	3718      	adds	r7, #24
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20005000 	.word	0x20005000
 8000870:	00000400 	.word	0x00000400
 8000874:	20000290 	.word	0x20000290
 8000878:	200014f8 	.word	0x200014f8

0800087c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr

08000888 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000888:	480c      	ldr	r0, [pc, #48]	; (80008bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800088a:	490d      	ldr	r1, [pc, #52]	; (80008c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800088c:	4a0d      	ldr	r2, [pc, #52]	; (80008c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800088e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000890:	e002      	b.n	8000898 <LoopCopyDataInit>

08000892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000896:	3304      	adds	r3, #4

08000898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800089a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800089c:	d3f9      	bcc.n	8000892 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800089e:	4a0a      	ldr	r2, [pc, #40]	; (80008c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008a0:	4c0a      	ldr	r4, [pc, #40]	; (80008cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80008a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a4:	e001      	b.n	80008aa <LoopFillZerobss>

080008a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a8:	3204      	adds	r2, #4

080008aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008ac:	d3fb      	bcc.n	80008a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008ae:	f7ff ffe5 	bl	800087c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008b2:	f007 ffeb 	bl	800888c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008b6:	f7ff fcc9 	bl	800024c <main>
  bx lr
 80008ba:	4770      	bx	lr
  ldr r0, =_sdata
 80008bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80008c4:	080092d0 	.word	0x080092d0
  ldr r2, =_sbss
 80008c8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80008cc:	200014f4 	.word	0x200014f4

080008d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008d0:	e7fe      	b.n	80008d0 <ADC1_2_IRQHandler>
	...

080008d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <HAL_Init+0x28>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a07      	ldr	r2, [pc, #28]	; (80008fc <HAL_Init+0x28>)
 80008de:	f043 0310 	orr.w	r3, r3, #16
 80008e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008e4:	2003      	movs	r0, #3
 80008e6:	f000 ffb9 	bl	800185c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ea:	2000      	movs	r0, #0
 80008ec:	f000 f808 	bl	8000900 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008f0:	f7ff fe72 	bl	80005d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008f4:	2300      	movs	r3, #0
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40022000 	.word	0x40022000

08000900 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <HAL_InitTick+0x54>)
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	4b12      	ldr	r3, [pc, #72]	; (8000958 <HAL_InitTick+0x58>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	4619      	mov	r1, r3
 8000912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000916:	fbb3 f3f1 	udiv	r3, r3, r1
 800091a:	fbb2 f3f3 	udiv	r3, r2, r3
 800091e:	4618      	mov	r0, r3
 8000920:	f000 ffd1 	bl	80018c6 <HAL_SYSTICK_Config>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800092a:	2301      	movs	r3, #1
 800092c:	e00e      	b.n	800094c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2b0f      	cmp	r3, #15
 8000932:	d80a      	bhi.n	800094a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000934:	2200      	movs	r2, #0
 8000936:	6879      	ldr	r1, [r7, #4]
 8000938:	f04f 30ff 	mov.w	r0, #4294967295
 800093c:	f000 ff99 	bl	8001872 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000940:	4a06      	ldr	r2, [pc, #24]	; (800095c <HAL_InitTick+0x5c>)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000946:	2300      	movs	r3, #0
 8000948:	e000      	b.n	800094c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800094a:	2301      	movs	r3, #1
}
 800094c:	4618      	mov	r0, r3
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000000 	.word	0x20000000
 8000958:	20000008 	.word	0x20000008
 800095c:	20000004 	.word	0x20000004

08000960 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <HAL_IncTick+0x1c>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	461a      	mov	r2, r3
 800096a:	4b05      	ldr	r3, [pc, #20]	; (8000980 <HAL_IncTick+0x20>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4413      	add	r3, r2
 8000970:	4a03      	ldr	r2, [pc, #12]	; (8000980 <HAL_IncTick+0x20>)
 8000972:	6013      	str	r3, [r2, #0]
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr
 800097c:	20000008 	.word	0x20000008
 8000980:	20000560 	.word	0x20000560

08000984 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  return uwTick;
 8000988:	4b02      	ldr	r3, [pc, #8]	; (8000994 <HAL_GetTick+0x10>)
 800098a:	681b      	ldr	r3, [r3, #0]
}
 800098c:	4618      	mov	r0, r3
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr
 8000994:	20000560 	.word	0x20000560

08000998 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009a0:	f7ff fff0 	bl	8000984 <HAL_GetTick>
 80009a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009b0:	d005      	beq.n	80009be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009b2:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <HAL_Delay+0x44>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	461a      	mov	r2, r3
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	4413      	add	r3, r2
 80009bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009be:	bf00      	nop
 80009c0:	f7ff ffe0 	bl	8000984 <HAL_GetTick>
 80009c4:	4602      	mov	r2, r0
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	1ad3      	subs	r3, r2, r3
 80009ca:	68fa      	ldr	r2, [r7, #12]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d8f7      	bhi.n	80009c0 <HAL_Delay+0x28>
  {
  }
}
 80009d0:	bf00      	nop
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000008 	.word	0x20000008

080009e0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d101      	bne.n	80009f2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
 80009f0:	e0ed      	b.n	8000bce <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d102      	bne.n	8000a04 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f7ff fe1c 	bl	800063c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f042 0201 	orr.w	r2, r2, #1
 8000a12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a14:	f7ff ffb6 	bl	8000984 <HAL_GetTick>
 8000a18:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a1a:	e012      	b.n	8000a42 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a1c:	f7ff ffb2 	bl	8000984 <HAL_GetTick>
 8000a20:	4602      	mov	r2, r0
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	1ad3      	subs	r3, r2, r3
 8000a26:	2b0a      	cmp	r3, #10
 8000a28:	d90b      	bls.n	8000a42 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a2e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2205      	movs	r2, #5
 8000a3a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e0c5      	b.n	8000bce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f003 0301 	and.w	r3, r3, #1
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d0e5      	beq.n	8000a1c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f022 0202 	bic.w	r2, r2, #2
 8000a5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a60:	f7ff ff90 	bl	8000984 <HAL_GetTick>
 8000a64:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a66:	e012      	b.n	8000a8e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a68:	f7ff ff8c 	bl	8000984 <HAL_GetTick>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	2b0a      	cmp	r3, #10
 8000a74:	d90b      	bls.n	8000a8e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a7a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2205      	movs	r2, #5
 8000a86:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e09f      	b.n	8000bce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f003 0302 	and.w	r3, r3, #2
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d1e5      	bne.n	8000a68 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	7e1b      	ldrb	r3, [r3, #24]
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d108      	bne.n	8000ab6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	e007      	b.n	8000ac6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ac4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	7e5b      	ldrb	r3, [r3, #25]
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d108      	bne.n	8000ae0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	e007      	b.n	8000af0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000aee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	7e9b      	ldrb	r3, [r3, #26]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d108      	bne.n	8000b0a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f042 0220 	orr.w	r2, r2, #32
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	e007      	b.n	8000b1a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f022 0220 	bic.w	r2, r2, #32
 8000b18:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	7edb      	ldrb	r3, [r3, #27]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d108      	bne.n	8000b34 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f022 0210 	bic.w	r2, r2, #16
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	e007      	b.n	8000b44 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f042 0210 	orr.w	r2, r2, #16
 8000b42:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	7f1b      	ldrb	r3, [r3, #28]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d108      	bne.n	8000b5e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f042 0208 	orr.w	r2, r2, #8
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	e007      	b.n	8000b6e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f022 0208 	bic.w	r2, r2, #8
 8000b6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	7f5b      	ldrb	r3, [r3, #29]
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d108      	bne.n	8000b88 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f042 0204 	orr.w	r2, r2, #4
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	e007      	b.n	8000b98 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f022 0204 	bic.w	r2, r2, #4
 8000b96:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	689a      	ldr	r2, [r3, #8]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	431a      	orrs	r2, r3
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	691b      	ldr	r3, [r3, #16]
 8000ba6:	431a      	orrs	r2, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	695b      	ldr	r3, [r3, #20]
 8000bac:	ea42 0103 	orr.w	r1, r2, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	1e5a      	subs	r2, r3, #1
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b087      	sub	sp, #28
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
 8000bde:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bec:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000bee:	7cfb      	ldrb	r3, [r7, #19]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d003      	beq.n	8000bfc <HAL_CAN_ConfigFilter+0x26>
 8000bf4:	7cfb      	ldrb	r3, [r7, #19]
 8000bf6:	2b02      	cmp	r3, #2
 8000bf8:	f040 80aa 	bne.w	8000d50 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000c02:	f043 0201 	orr.w	r2, r3, #1
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	695b      	ldr	r3, [r3, #20]
 8000c10:	f003 031f 	and.w	r3, r3, #31
 8000c14:	2201      	movs	r2, #1
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	43db      	mvns	r3, r3
 8000c26:	401a      	ands	r2, r3
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	69db      	ldr	r3, [r3, #28]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d123      	bne.n	8000c7e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	43db      	mvns	r3, r3
 8000c40:	401a      	ands	r2, r3
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c54:	683a      	ldr	r2, [r7, #0]
 8000c56:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c58:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	3248      	adds	r2, #72	; 0x48
 8000c5e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c72:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c74:	6979      	ldr	r1, [r7, #20]
 8000c76:	3348      	adds	r3, #72	; 0x48
 8000c78:	00db      	lsls	r3, r3, #3
 8000c7a:	440b      	add	r3, r1
 8000c7c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	69db      	ldr	r3, [r3, #28]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d122      	bne.n	8000ccc <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	431a      	orrs	r2, r3
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ca2:	683a      	ldr	r2, [r7, #0]
 8000ca4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000ca6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	3248      	adds	r2, #72	; 0x48
 8000cac:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	68db      	ldr	r3, [r3, #12]
 8000cba:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cc0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cc2:	6979      	ldr	r1, [r7, #20]
 8000cc4:	3348      	adds	r3, #72	; 0x48
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	440b      	add	r3, r1
 8000cca:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d109      	bne.n	8000ce8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	401a      	ands	r2, r3
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000ce6:	e007      	b.n	8000cf8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	431a      	orrs	r2, r3
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	691b      	ldr	r3, [r3, #16]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d109      	bne.n	8000d14 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	401a      	ands	r2, r3
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000d12:	e007      	b.n	8000d24 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	431a      	orrs	r2, r3
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	6a1b      	ldr	r3, [r3, #32]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d107      	bne.n	8000d3c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	431a      	orrs	r2, r3
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d42:	f023 0201 	bic.w	r2, r3, #1
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	e006      	b.n	8000d5e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d54:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
  }
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	371c      	adds	r7, #28
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr

08000d68 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d12e      	bne.n	8000dda <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2202      	movs	r2, #2
 8000d80:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f022 0201 	bic.w	r2, r2, #1
 8000d92:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000d94:	f7ff fdf6 	bl	8000984 <HAL_GetTick>
 8000d98:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d9a:	e012      	b.n	8000dc2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d9c:	f7ff fdf2 	bl	8000984 <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	2b0a      	cmp	r3, #10
 8000da8:	d90b      	bls.n	8000dc2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2205      	movs	r2, #5
 8000dba:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e012      	b.n	8000de8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f003 0301 	and.w	r3, r3, #1
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d1e5      	bne.n	8000d9c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e006      	b.n	8000de8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dde:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
  }
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b089      	sub	sp, #36	; 0x24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
 8000dfc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e04:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e0e:	7ffb      	ldrb	r3, [r7, #31]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d003      	beq.n	8000e1c <HAL_CAN_AddTxMessage+0x2c>
 8000e14:	7ffb      	ldrb	r3, [r7, #31]
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	f040 80b8 	bne.w	8000f8c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d10a      	bne.n	8000e3c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d105      	bne.n	8000e3c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f000 80a0 	beq.w	8000f7c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	0e1b      	lsrs	r3, r3, #24
 8000e40:	f003 0303 	and.w	r3, r3, #3
 8000e44:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d907      	bls.n	8000e5c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e50:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e09e      	b.n	8000f9a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	409a      	lsls	r2, r3
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d10d      	bne.n	8000e8a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e78:	68f9      	ldr	r1, [r7, #12]
 8000e7a:	6809      	ldr	r1, [r1, #0]
 8000e7c:	431a      	orrs	r2, r3
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	3318      	adds	r3, #24
 8000e82:	011b      	lsls	r3, r3, #4
 8000e84:	440b      	add	r3, r1
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	e00f      	b.n	8000eaa <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e94:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e9a:	68f9      	ldr	r1, [r7, #12]
 8000e9c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000e9e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	3318      	adds	r3, #24
 8000ea4:	011b      	lsls	r3, r3, #4
 8000ea6:	440b      	add	r3, r1
 8000ea8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	6819      	ldr	r1, [r3, #0]
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	691a      	ldr	r2, [r3, #16]
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	3318      	adds	r3, #24
 8000eb6:	011b      	lsls	r3, r3, #4
 8000eb8:	440b      	add	r3, r1
 8000eba:	3304      	adds	r3, #4
 8000ebc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	7d1b      	ldrb	r3, [r3, #20]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d111      	bne.n	8000eea <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	3318      	adds	r3, #24
 8000ece:	011b      	lsls	r3, r3, #4
 8000ed0:	4413      	add	r3, r2
 8000ed2:	3304      	adds	r3, #4
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	68fa      	ldr	r2, [r7, #12]
 8000ed8:	6811      	ldr	r1, [r2, #0]
 8000eda:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	3318      	adds	r3, #24
 8000ee2:	011b      	lsls	r3, r3, #4
 8000ee4:	440b      	add	r3, r1
 8000ee6:	3304      	adds	r3, #4
 8000ee8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	3307      	adds	r3, #7
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	061a      	lsls	r2, r3, #24
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3306      	adds	r3, #6
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	041b      	lsls	r3, r3, #16
 8000efa:	431a      	orrs	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3305      	adds	r3, #5
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	021b      	lsls	r3, r3, #8
 8000f04:	4313      	orrs	r3, r2
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	3204      	adds	r2, #4
 8000f0a:	7812      	ldrb	r2, [r2, #0]
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	6811      	ldr	r1, [r2, #0]
 8000f12:	ea43 0200 	orr.w	r2, r3, r0
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	011b      	lsls	r3, r3, #4
 8000f1a:	440b      	add	r3, r1
 8000f1c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000f20:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	3303      	adds	r3, #3
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	061a      	lsls	r2, r3, #24
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	3302      	adds	r3, #2
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	041b      	lsls	r3, r3, #16
 8000f32:	431a      	orrs	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3301      	adds	r3, #1
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	021b      	lsls	r3, r3, #8
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	7812      	ldrb	r2, [r2, #0]
 8000f42:	4610      	mov	r0, r2
 8000f44:	68fa      	ldr	r2, [r7, #12]
 8000f46:	6811      	ldr	r1, [r2, #0]
 8000f48:	ea43 0200 	orr.w	r2, r3, r0
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	011b      	lsls	r3, r3, #4
 8000f50:	440b      	add	r3, r1
 8000f52:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000f56:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	3318      	adds	r3, #24
 8000f60:	011b      	lsls	r3, r3, #4
 8000f62:	4413      	add	r3, r2
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	68fa      	ldr	r2, [r7, #12]
 8000f68:	6811      	ldr	r1, [r2, #0]
 8000f6a:	f043 0201 	orr.w	r2, r3, #1
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	3318      	adds	r3, #24
 8000f72:	011b      	lsls	r3, r3, #4
 8000f74:	440b      	add	r3, r1
 8000f76:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	e00e      	b.n	8000f9a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f80:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e006      	b.n	8000f9a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f90:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
  }
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3724      	adds	r7, #36	; 0x24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr

08000fa4 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fb6:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8000fb8:	7afb      	ldrb	r3, [r7, #11]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d002      	beq.n	8000fc4 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8000fbe:	7afb      	ldrb	r3, [r7, #11]
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d11d      	bne.n	8001000 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d002      	beq.n	8000fd8 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d002      	beq.n	8000fec <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d002      	beq.n	8001000 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001000:	68fb      	ldr	r3, [r7, #12]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr

0800100c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800100c:	b480      	push	{r7}
 800100e:	b087      	sub	sp, #28
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
 8001018:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001020:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001022:	7dfb      	ldrb	r3, [r7, #23]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d003      	beq.n	8001030 <HAL_CAN_GetRxMessage+0x24>
 8001028:	7dfb      	ldrb	r3, [r7, #23]
 800102a:	2b02      	cmp	r3, #2
 800102c:	f040 80f3 	bne.w	8001216 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d10e      	bne.n	8001054 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	f003 0303 	and.w	r3, r3, #3
 8001040:	2b00      	cmp	r3, #0
 8001042:	d116      	bne.n	8001072 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001048:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e0e7      	b.n	8001224 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	691b      	ldr	r3, [r3, #16]
 800105a:	f003 0303 	and.w	r3, r3, #3
 800105e:	2b00      	cmp	r3, #0
 8001060:	d107      	bne.n	8001072 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001066:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e0d8      	b.n	8001224 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	331b      	adds	r3, #27
 800107a:	011b      	lsls	r3, r3, #4
 800107c:	4413      	add	r3, r2
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 0204 	and.w	r2, r3, #4
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d10c      	bne.n	80010aa <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	331b      	adds	r3, #27
 8001098:	011b      	lsls	r3, r3, #4
 800109a:	4413      	add	r3, r2
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	0d5b      	lsrs	r3, r3, #21
 80010a0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	e00b      	b.n	80010c2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	331b      	adds	r3, #27
 80010b2:	011b      	lsls	r3, r3, #4
 80010b4:	4413      	add	r3, r2
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	08db      	lsrs	r3, r3, #3
 80010ba:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	331b      	adds	r3, #27
 80010ca:	011b      	lsls	r3, r3, #4
 80010cc:	4413      	add	r3, r2
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0202 	and.w	r2, r3, #2
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	331b      	adds	r3, #27
 80010e0:	011b      	lsls	r3, r3, #4
 80010e2:	4413      	add	r3, r2
 80010e4:	3304      	adds	r3, #4
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 020f 	and.w	r2, r3, #15
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	331b      	adds	r3, #27
 80010f8:	011b      	lsls	r3, r3, #4
 80010fa:	4413      	add	r3, r2
 80010fc:	3304      	adds	r3, #4
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	0a1b      	lsrs	r3, r3, #8
 8001102:	b2da      	uxtb	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	331b      	adds	r3, #27
 8001110:	011b      	lsls	r3, r3, #4
 8001112:	4413      	add	r3, r2
 8001114:	3304      	adds	r3, #4
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	0c1b      	lsrs	r3, r3, #16
 800111a:	b29a      	uxth	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	011b      	lsls	r3, r3, #4
 8001128:	4413      	add	r3, r2
 800112a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	b2da      	uxtb	r2, r3
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	011b      	lsls	r3, r3, #4
 800113e:	4413      	add	r3, r2
 8001140:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	0a1a      	lsrs	r2, r3, #8
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	3301      	adds	r3, #1
 800114c:	b2d2      	uxtb	r2, r2
 800114e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	011b      	lsls	r3, r3, #4
 8001158:	4413      	add	r3, r2
 800115a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	0c1a      	lsrs	r2, r3, #16
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	3302      	adds	r3, #2
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	011b      	lsls	r3, r3, #4
 8001172:	4413      	add	r3, r2
 8001174:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	0e1a      	lsrs	r2, r3, #24
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	3303      	adds	r3, #3
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	011b      	lsls	r3, r3, #4
 800118c:	4413      	add	r3, r2
 800118e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	3304      	adds	r3, #4
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	011b      	lsls	r3, r3, #4
 80011a4:	4413      	add	r3, r2
 80011a6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	0a1a      	lsrs	r2, r3, #8
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	3305      	adds	r3, #5
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	011b      	lsls	r3, r3, #4
 80011be:	4413      	add	r3, r2
 80011c0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	0c1a      	lsrs	r2, r3, #16
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	3306      	adds	r3, #6
 80011cc:	b2d2      	uxtb	r2, r2
 80011ce:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	011b      	lsls	r3, r3, #4
 80011d8:	4413      	add	r3, r2
 80011da:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	0e1a      	lsrs	r2, r3, #24
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	3307      	adds	r3, #7
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d108      	bne.n	8001202 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	68da      	ldr	r2, [r3, #12]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f042 0220 	orr.w	r2, r2, #32
 80011fe:	60da      	str	r2, [r3, #12]
 8001200:	e007      	b.n	8001212 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	691a      	ldr	r2, [r3, #16]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f042 0220 	orr.w	r2, r2, #32
 8001210:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001212:	2300      	movs	r3, #0
 8001214:	e006      	b.n	8001224 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
  }
}
 8001224:	4618      	mov	r0, r3
 8001226:	371c      	adds	r7, #28
 8001228:	46bd      	mov	sp, r7
 800122a:	bc80      	pop	{r7}
 800122c:	4770      	bx	lr

0800122e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800122e:	b480      	push	{r7}
 8001230:	b085      	sub	sp, #20
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
 8001236:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800123e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001240:	7bfb      	ldrb	r3, [r7, #15]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d002      	beq.n	800124c <HAL_CAN_ActivateNotification+0x1e>
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	2b02      	cmp	r3, #2
 800124a:	d109      	bne.n	8001260 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6959      	ldr	r1, [r3, #20]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	683a      	ldr	r2, [r7, #0]
 8001258:	430a      	orrs	r2, r1
 800125a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800125c:	2300      	movs	r3, #0
 800125e:	e006      	b.n	800126e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001264:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
  }
}
 800126e:	4618      	mov	r0, r3
 8001270:	3714      	adds	r7, #20
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr

08001278 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08a      	sub	sp, #40	; 0x28
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001280:	2300      	movs	r3, #0
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80012b4:	6a3b      	ldr	r3, [r7, #32]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d07c      	beq.n	80013b8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d023      	beq.n	8001310 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2201      	movs	r2, #1
 80012ce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f000 f983 	bl	80015e6 <HAL_CAN_TxMailbox0CompleteCallback>
 80012e0:	e016      	b.n	8001310 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	f003 0304 	and.w	r3, r3, #4
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d004      	beq.n	80012f6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80012ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
 80012f4:	e00c      	b.n	8001310 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	f003 0308 	and.w	r3, r3, #8
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d004      	beq.n	800130a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001302:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
 8001308:	e002      	b.n	8001310 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f000 f986 	bl	800161c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001316:	2b00      	cmp	r3, #0
 8001318:	d024      	beq.n	8001364 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001322:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f000 f962 	bl	80015f8 <HAL_CAN_TxMailbox1CompleteCallback>
 8001334:	e016      	b.n	8001364 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800133c:	2b00      	cmp	r3, #0
 800133e:	d004      	beq.n	800134a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001342:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001346:	627b      	str	r3, [r7, #36]	; 0x24
 8001348:	e00c      	b.n	8001364 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001350:	2b00      	cmp	r3, #0
 8001352:	d004      	beq.n	800135e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001356:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
 800135c:	e002      	b.n	8001364 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f000 f965 	bl	800162e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d024      	beq.n	80013b8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001376:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 f941 	bl	800160a <HAL_CAN_TxMailbox2CompleteCallback>
 8001388:	e016      	b.n	80013b8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d004      	beq.n	800139e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
 800139c:	e00c      	b.n	80013b8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d004      	beq.n	80013b2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80013a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
 80013b0:	e002      	b.n	80013b8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f000 f944 	bl	8001640 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80013b8:	6a3b      	ldr	r3, [r7, #32]
 80013ba:	f003 0308 	and.w	r3, r3, #8
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d00c      	beq.n	80013dc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	f003 0310 	and.w	r3, r3, #16
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d007      	beq.n	80013dc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80013cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2210      	movs	r2, #16
 80013da:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80013dc:	6a3b      	ldr	r3, [r7, #32]
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00b      	beq.n	80013fe <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	f003 0308 	and.w	r3, r3, #8
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d006      	beq.n	80013fe <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2208      	movs	r2, #8
 80013f6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f000 f92a 	bl	8001652 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80013fe:	6a3b      	ldr	r3, [r7, #32]
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d009      	beq.n	800141c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	f003 0303 	and.w	r3, r3, #3
 8001412:	2b00      	cmp	r3, #0
 8001414:	d002      	beq.n	800141c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7fe fea0 	bl	800015c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800141c:	6a3b      	ldr	r3, [r7, #32]
 800141e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00c      	beq.n	8001440 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	f003 0310 	and.w	r3, r3, #16
 800142c:	2b00      	cmp	r3, #0
 800142e:	d007      	beq.n	8001440 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001432:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001436:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2210      	movs	r2, #16
 800143e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001440:	6a3b      	ldr	r3, [r7, #32]
 8001442:	f003 0320 	and.w	r3, r3, #32
 8001446:	2b00      	cmp	r3, #0
 8001448:	d00b      	beq.n	8001462 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	f003 0308 	and.w	r3, r3, #8
 8001450:	2b00      	cmp	r3, #0
 8001452:	d006      	beq.n	8001462 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2208      	movs	r2, #8
 800145a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 f90a 	bl	8001676 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001462:	6a3b      	ldr	r3, [r7, #32]
 8001464:	f003 0310 	and.w	r3, r3, #16
 8001468:	2b00      	cmp	r3, #0
 800146a:	d009      	beq.n	8001480 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	691b      	ldr	r3, [r3, #16]
 8001472:	f003 0303 	and.w	r3, r3, #3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d002      	beq.n	8001480 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f000 f8f2 	bl	8001664 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001480:	6a3b      	ldr	r3, [r7, #32]
 8001482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d00b      	beq.n	80014a2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	f003 0310 	and.w	r3, r3, #16
 8001490:	2b00      	cmp	r3, #0
 8001492:	d006      	beq.n	80014a2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2210      	movs	r2, #16
 800149a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f000 f8f3 	bl	8001688 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80014a2:	6a3b      	ldr	r3, [r7, #32]
 80014a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d00b      	beq.n	80014c4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	f003 0308 	and.w	r3, r3, #8
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d006      	beq.n	80014c4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2208      	movs	r2, #8
 80014bc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f000 f8eb 	bl	800169a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80014c4:	6a3b      	ldr	r3, [r7, #32]
 80014c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d07b      	beq.n	80015c6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	f003 0304 	and.w	r3, r3, #4
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d072      	beq.n	80015be <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80014d8:	6a3b      	ldr	r3, [r7, #32]
 80014da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d008      	beq.n	80014f4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d003      	beq.n	80014f4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80014ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80014f4:	6a3b      	ldr	r3, [r7, #32]
 80014f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d008      	beq.n	8001510 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001504:	2b00      	cmp	r3, #0
 8001506:	d003      	beq.n	8001510 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150a:	f043 0302 	orr.w	r3, r3, #2
 800150e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001510:	6a3b      	ldr	r3, [r7, #32]
 8001512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001516:	2b00      	cmp	r3, #0
 8001518:	d008      	beq.n	800152c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001520:	2b00      	cmp	r3, #0
 8001522:	d003      	beq.n	800152c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001526:	f043 0304 	orr.w	r3, r3, #4
 800152a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800152c:	6a3b      	ldr	r3, [r7, #32]
 800152e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001532:	2b00      	cmp	r3, #0
 8001534:	d043      	beq.n	80015be <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800153c:	2b00      	cmp	r3, #0
 800153e:	d03e      	beq.n	80015be <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001546:	2b60      	cmp	r3, #96	; 0x60
 8001548:	d02b      	beq.n	80015a2 <HAL_CAN_IRQHandler+0x32a>
 800154a:	2b60      	cmp	r3, #96	; 0x60
 800154c:	d82e      	bhi.n	80015ac <HAL_CAN_IRQHandler+0x334>
 800154e:	2b50      	cmp	r3, #80	; 0x50
 8001550:	d022      	beq.n	8001598 <HAL_CAN_IRQHandler+0x320>
 8001552:	2b50      	cmp	r3, #80	; 0x50
 8001554:	d82a      	bhi.n	80015ac <HAL_CAN_IRQHandler+0x334>
 8001556:	2b40      	cmp	r3, #64	; 0x40
 8001558:	d019      	beq.n	800158e <HAL_CAN_IRQHandler+0x316>
 800155a:	2b40      	cmp	r3, #64	; 0x40
 800155c:	d826      	bhi.n	80015ac <HAL_CAN_IRQHandler+0x334>
 800155e:	2b30      	cmp	r3, #48	; 0x30
 8001560:	d010      	beq.n	8001584 <HAL_CAN_IRQHandler+0x30c>
 8001562:	2b30      	cmp	r3, #48	; 0x30
 8001564:	d822      	bhi.n	80015ac <HAL_CAN_IRQHandler+0x334>
 8001566:	2b10      	cmp	r3, #16
 8001568:	d002      	beq.n	8001570 <HAL_CAN_IRQHandler+0x2f8>
 800156a:	2b20      	cmp	r3, #32
 800156c:	d005      	beq.n	800157a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800156e:	e01d      	b.n	80015ac <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001572:	f043 0308 	orr.w	r3, r3, #8
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001578:	e019      	b.n	80015ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157c:	f043 0310 	orr.w	r3, r3, #16
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001582:	e014      	b.n	80015ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001586:	f043 0320 	orr.w	r3, r3, #32
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800158c:	e00f      	b.n	80015ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001596:	e00a      	b.n	80015ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015a0:	e005      	b.n	80015ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80015a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015aa:	e000      	b.n	80015ae <HAL_CAN_IRQHandler+0x336>
            break;
 80015ac:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	699a      	ldr	r2, [r3, #24]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80015bc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2204      	movs	r2, #4
 80015c4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d008      	beq.n	80015de <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d2:	431a      	orrs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7fe fe15 	bl	8000208 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80015de:	bf00      	nop
 80015e0:	3728      	adds	r7, #40	; 0x28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr

080015f8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr

0800160a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr

0800161c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr

0800162e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800162e:	b480      	push	{r7}
 8001630:	b083      	sub	sp, #12
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr

08001640 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	bc80      	pop	{r7}
 8001650:	4770      	bx	lr

08001652 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001652:	b480      	push	{r7}
 8001654:	b083      	sub	sp, #12
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr

08001664 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr

08001676 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr

08001688 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr

0800169a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80016a2:	bf00      	nop
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr

080016ac <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(CAN_HandleTypeDef *hcan)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr
	...

080016c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <__NVIC_SetPriorityGrouping+0x44>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016e0:	4013      	ands	r3, r2
 80016e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016f6:	4a04      	ldr	r2, [pc, #16]	; (8001708 <__NVIC_SetPriorityGrouping+0x44>)
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	60d3      	str	r3, [r2, #12]
}
 80016fc:	bf00      	nop
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001710:	4b04      	ldr	r3, [pc, #16]	; (8001724 <__NVIC_GetPriorityGrouping+0x18>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	0a1b      	lsrs	r3, r3, #8
 8001716:	f003 0307 	and.w	r3, r3, #7
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	2b00      	cmp	r3, #0
 8001738:	db0b      	blt.n	8001752 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	f003 021f 	and.w	r2, r3, #31
 8001740:	4906      	ldr	r1, [pc, #24]	; (800175c <__NVIC_EnableIRQ+0x34>)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	095b      	lsrs	r3, r3, #5
 8001748:	2001      	movs	r0, #1
 800174a:	fa00 f202 	lsl.w	r2, r0, r2
 800174e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr
 800175c:	e000e100 	.word	0xe000e100

08001760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	6039      	str	r1, [r7, #0]
 800176a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800176c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001770:	2b00      	cmp	r3, #0
 8001772:	db0a      	blt.n	800178a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	b2da      	uxtb	r2, r3
 8001778:	490c      	ldr	r1, [pc, #48]	; (80017ac <__NVIC_SetPriority+0x4c>)
 800177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177e:	0112      	lsls	r2, r2, #4
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	440b      	add	r3, r1
 8001784:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001788:	e00a      	b.n	80017a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	b2da      	uxtb	r2, r3
 800178e:	4908      	ldr	r1, [pc, #32]	; (80017b0 <__NVIC_SetPriority+0x50>)
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	3b04      	subs	r3, #4
 8001798:	0112      	lsls	r2, r2, #4
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	440b      	add	r3, r1
 800179e:	761a      	strb	r2, [r3, #24]
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	e000e100 	.word	0xe000e100
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b089      	sub	sp, #36	; 0x24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	f1c3 0307 	rsb	r3, r3, #7
 80017ce:	2b04      	cmp	r3, #4
 80017d0:	bf28      	it	cs
 80017d2:	2304      	movcs	r3, #4
 80017d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	3304      	adds	r3, #4
 80017da:	2b06      	cmp	r3, #6
 80017dc:	d902      	bls.n	80017e4 <NVIC_EncodePriority+0x30>
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3b03      	subs	r3, #3
 80017e2:	e000      	b.n	80017e6 <NVIC_EncodePriority+0x32>
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e8:	f04f 32ff 	mov.w	r2, #4294967295
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43da      	mvns	r2, r3
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	401a      	ands	r2, r3
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	fa01 f303 	lsl.w	r3, r1, r3
 8001806:	43d9      	mvns	r1, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800180c:	4313      	orrs	r3, r2
         );
}
 800180e:	4618      	mov	r0, r3
 8001810:	3724      	adds	r7, #36	; 0x24
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr

08001818 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3b01      	subs	r3, #1
 8001824:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001828:	d301      	bcc.n	800182e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800182a:	2301      	movs	r3, #1
 800182c:	e00f      	b.n	800184e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800182e:	4a0a      	ldr	r2, [pc, #40]	; (8001858 <SysTick_Config+0x40>)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3b01      	subs	r3, #1
 8001834:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001836:	210f      	movs	r1, #15
 8001838:	f04f 30ff 	mov.w	r0, #4294967295
 800183c:	f7ff ff90 	bl	8001760 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001840:	4b05      	ldr	r3, [pc, #20]	; (8001858 <SysTick_Config+0x40>)
 8001842:	2200      	movs	r2, #0
 8001844:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001846:	4b04      	ldr	r3, [pc, #16]	; (8001858 <SysTick_Config+0x40>)
 8001848:	2207      	movs	r2, #7
 800184a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	e000e010 	.word	0xe000e010

0800185c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff ff2d 	bl	80016c4 <__NVIC_SetPriorityGrouping>
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001872:	b580      	push	{r7, lr}
 8001874:	b086      	sub	sp, #24
 8001876:	af00      	add	r7, sp, #0
 8001878:	4603      	mov	r3, r0
 800187a:	60b9      	str	r1, [r7, #8]
 800187c:	607a      	str	r2, [r7, #4]
 800187e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001884:	f7ff ff42 	bl	800170c <__NVIC_GetPriorityGrouping>
 8001888:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	68b9      	ldr	r1, [r7, #8]
 800188e:	6978      	ldr	r0, [r7, #20]
 8001890:	f7ff ff90 	bl	80017b4 <NVIC_EncodePriority>
 8001894:	4602      	mov	r2, r0
 8001896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800189a:	4611      	mov	r1, r2
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff ff5f 	bl	8001760 <__NVIC_SetPriority>
}
 80018a2:	bf00      	nop
 80018a4:	3718      	adds	r7, #24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b082      	sub	sp, #8
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	4603      	mov	r3, r0
 80018b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff ff35 	bl	8001728 <__NVIC_EnableIRQ>
}
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff ffa2 	bl	8001818 <SysTick_Config>
 80018d4:	4603      	mov	r3, r0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
	...

080018e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b08b      	sub	sp, #44	; 0x2c
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ea:	2300      	movs	r3, #0
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018ee:	2300      	movs	r3, #0
 80018f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018f2:	e169      	b.n	8001bc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018f4:	2201      	movs	r2, #1
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	69fa      	ldr	r2, [r7, #28]
 8001904:	4013      	ands	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	429a      	cmp	r2, r3
 800190e:	f040 8158 	bne.w	8001bc2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	4a9a      	ldr	r2, [pc, #616]	; (8001b80 <HAL_GPIO_Init+0x2a0>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d05e      	beq.n	80019da <HAL_GPIO_Init+0xfa>
 800191c:	4a98      	ldr	r2, [pc, #608]	; (8001b80 <HAL_GPIO_Init+0x2a0>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d875      	bhi.n	8001a0e <HAL_GPIO_Init+0x12e>
 8001922:	4a98      	ldr	r2, [pc, #608]	; (8001b84 <HAL_GPIO_Init+0x2a4>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d058      	beq.n	80019da <HAL_GPIO_Init+0xfa>
 8001928:	4a96      	ldr	r2, [pc, #600]	; (8001b84 <HAL_GPIO_Init+0x2a4>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d86f      	bhi.n	8001a0e <HAL_GPIO_Init+0x12e>
 800192e:	4a96      	ldr	r2, [pc, #600]	; (8001b88 <HAL_GPIO_Init+0x2a8>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d052      	beq.n	80019da <HAL_GPIO_Init+0xfa>
 8001934:	4a94      	ldr	r2, [pc, #592]	; (8001b88 <HAL_GPIO_Init+0x2a8>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d869      	bhi.n	8001a0e <HAL_GPIO_Init+0x12e>
 800193a:	4a94      	ldr	r2, [pc, #592]	; (8001b8c <HAL_GPIO_Init+0x2ac>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d04c      	beq.n	80019da <HAL_GPIO_Init+0xfa>
 8001940:	4a92      	ldr	r2, [pc, #584]	; (8001b8c <HAL_GPIO_Init+0x2ac>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d863      	bhi.n	8001a0e <HAL_GPIO_Init+0x12e>
 8001946:	4a92      	ldr	r2, [pc, #584]	; (8001b90 <HAL_GPIO_Init+0x2b0>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d046      	beq.n	80019da <HAL_GPIO_Init+0xfa>
 800194c:	4a90      	ldr	r2, [pc, #576]	; (8001b90 <HAL_GPIO_Init+0x2b0>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d85d      	bhi.n	8001a0e <HAL_GPIO_Init+0x12e>
 8001952:	2b12      	cmp	r3, #18
 8001954:	d82a      	bhi.n	80019ac <HAL_GPIO_Init+0xcc>
 8001956:	2b12      	cmp	r3, #18
 8001958:	d859      	bhi.n	8001a0e <HAL_GPIO_Init+0x12e>
 800195a:	a201      	add	r2, pc, #4	; (adr r2, 8001960 <HAL_GPIO_Init+0x80>)
 800195c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001960:	080019db 	.word	0x080019db
 8001964:	080019b5 	.word	0x080019b5
 8001968:	080019c7 	.word	0x080019c7
 800196c:	08001a09 	.word	0x08001a09
 8001970:	08001a0f 	.word	0x08001a0f
 8001974:	08001a0f 	.word	0x08001a0f
 8001978:	08001a0f 	.word	0x08001a0f
 800197c:	08001a0f 	.word	0x08001a0f
 8001980:	08001a0f 	.word	0x08001a0f
 8001984:	08001a0f 	.word	0x08001a0f
 8001988:	08001a0f 	.word	0x08001a0f
 800198c:	08001a0f 	.word	0x08001a0f
 8001990:	08001a0f 	.word	0x08001a0f
 8001994:	08001a0f 	.word	0x08001a0f
 8001998:	08001a0f 	.word	0x08001a0f
 800199c:	08001a0f 	.word	0x08001a0f
 80019a0:	08001a0f 	.word	0x08001a0f
 80019a4:	080019bd 	.word	0x080019bd
 80019a8:	080019d1 	.word	0x080019d1
 80019ac:	4a79      	ldr	r2, [pc, #484]	; (8001b94 <HAL_GPIO_Init+0x2b4>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d013      	beq.n	80019da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019b2:	e02c      	b.n	8001a0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	623b      	str	r3, [r7, #32]
          break;
 80019ba:	e029      	b.n	8001a10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	3304      	adds	r3, #4
 80019c2:	623b      	str	r3, [r7, #32]
          break;
 80019c4:	e024      	b.n	8001a10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	3308      	adds	r3, #8
 80019cc:	623b      	str	r3, [r7, #32]
          break;
 80019ce:	e01f      	b.n	8001a10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	330c      	adds	r3, #12
 80019d6:	623b      	str	r3, [r7, #32]
          break;
 80019d8:	e01a      	b.n	8001a10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d102      	bne.n	80019e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019e2:	2304      	movs	r3, #4
 80019e4:	623b      	str	r3, [r7, #32]
          break;
 80019e6:	e013      	b.n	8001a10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d105      	bne.n	80019fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019f0:	2308      	movs	r3, #8
 80019f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	69fa      	ldr	r2, [r7, #28]
 80019f8:	611a      	str	r2, [r3, #16]
          break;
 80019fa:	e009      	b.n	8001a10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019fc:	2308      	movs	r3, #8
 80019fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	69fa      	ldr	r2, [r7, #28]
 8001a04:	615a      	str	r2, [r3, #20]
          break;
 8001a06:	e003      	b.n	8001a10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	623b      	str	r3, [r7, #32]
          break;
 8001a0c:	e000      	b.n	8001a10 <HAL_GPIO_Init+0x130>
          break;
 8001a0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	2bff      	cmp	r3, #255	; 0xff
 8001a14:	d801      	bhi.n	8001a1a <HAL_GPIO_Init+0x13a>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	e001      	b.n	8001a1e <HAL_GPIO_Init+0x13e>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	2bff      	cmp	r3, #255	; 0xff
 8001a24:	d802      	bhi.n	8001a2c <HAL_GPIO_Init+0x14c>
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	e002      	b.n	8001a32 <HAL_GPIO_Init+0x152>
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	3b08      	subs	r3, #8
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	210f      	movs	r1, #15
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	401a      	ands	r2, r3
 8001a44:	6a39      	ldr	r1, [r7, #32]
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f000 80b1 	beq.w	8001bc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a60:	4b4d      	ldr	r3, [pc, #308]	; (8001b98 <HAL_GPIO_Init+0x2b8>)
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	4a4c      	ldr	r2, [pc, #304]	; (8001b98 <HAL_GPIO_Init+0x2b8>)
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	6193      	str	r3, [r2, #24]
 8001a6c:	4b4a      	ldr	r3, [pc, #296]	; (8001b98 <HAL_GPIO_Init+0x2b8>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	f003 0301 	and.w	r3, r3, #1
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a78:	4a48      	ldr	r2, [pc, #288]	; (8001b9c <HAL_GPIO_Init+0x2bc>)
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	089b      	lsrs	r3, r3, #2
 8001a7e:	3302      	adds	r3, #2
 8001a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a88:	f003 0303 	and.w	r3, r3, #3
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	220f      	movs	r2, #15
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a40      	ldr	r2, [pc, #256]	; (8001ba0 <HAL_GPIO_Init+0x2c0>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d013      	beq.n	8001acc <HAL_GPIO_Init+0x1ec>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4a3f      	ldr	r2, [pc, #252]	; (8001ba4 <HAL_GPIO_Init+0x2c4>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d00d      	beq.n	8001ac8 <HAL_GPIO_Init+0x1e8>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a3e      	ldr	r2, [pc, #248]	; (8001ba8 <HAL_GPIO_Init+0x2c8>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d007      	beq.n	8001ac4 <HAL_GPIO_Init+0x1e4>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a3d      	ldr	r2, [pc, #244]	; (8001bac <HAL_GPIO_Init+0x2cc>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d101      	bne.n	8001ac0 <HAL_GPIO_Init+0x1e0>
 8001abc:	2303      	movs	r3, #3
 8001abe:	e006      	b.n	8001ace <HAL_GPIO_Init+0x1ee>
 8001ac0:	2304      	movs	r3, #4
 8001ac2:	e004      	b.n	8001ace <HAL_GPIO_Init+0x1ee>
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	e002      	b.n	8001ace <HAL_GPIO_Init+0x1ee>
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e000      	b.n	8001ace <HAL_GPIO_Init+0x1ee>
 8001acc:	2300      	movs	r3, #0
 8001ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ad0:	f002 0203 	and.w	r2, r2, #3
 8001ad4:	0092      	lsls	r2, r2, #2
 8001ad6:	4093      	lsls	r3, r2
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ade:	492f      	ldr	r1, [pc, #188]	; (8001b9c <HAL_GPIO_Init+0x2bc>)
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae2:	089b      	lsrs	r3, r3, #2
 8001ae4:	3302      	adds	r3, #2
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d006      	beq.n	8001b06 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001af8:	4b2d      	ldr	r3, [pc, #180]	; (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	492c      	ldr	r1, [pc, #176]	; (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	600b      	str	r3, [r1, #0]
 8001b04:	e006      	b.n	8001b14 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b06:	4b2a      	ldr	r3, [pc, #168]	; (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	4928      	ldr	r1, [pc, #160]	; (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b10:	4013      	ands	r3, r2
 8001b12:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d006      	beq.n	8001b2e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b20:	4b23      	ldr	r3, [pc, #140]	; (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	4922      	ldr	r1, [pc, #136]	; (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	604b      	str	r3, [r1, #4]
 8001b2c:	e006      	b.n	8001b3c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b2e:	4b20      	ldr	r3, [pc, #128]	; (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	43db      	mvns	r3, r3
 8001b36:	491e      	ldr	r1, [pc, #120]	; (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b38:	4013      	ands	r3, r2
 8001b3a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d006      	beq.n	8001b56 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b48:	4b19      	ldr	r3, [pc, #100]	; (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	4918      	ldr	r1, [pc, #96]	; (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	608b      	str	r3, [r1, #8]
 8001b54:	e006      	b.n	8001b64 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b56:	4b16      	ldr	r3, [pc, #88]	; (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b58:	689a      	ldr	r2, [r3, #8]
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	4914      	ldr	r1, [pc, #80]	; (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b60:	4013      	ands	r3, r2
 8001b62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d021      	beq.n	8001bb4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b70:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b72:	68da      	ldr	r2, [r3, #12]
 8001b74:	490e      	ldr	r1, [pc, #56]	; (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	60cb      	str	r3, [r1, #12]
 8001b7c:	e021      	b.n	8001bc2 <HAL_GPIO_Init+0x2e2>
 8001b7e:	bf00      	nop
 8001b80:	10320000 	.word	0x10320000
 8001b84:	10310000 	.word	0x10310000
 8001b88:	10220000 	.word	0x10220000
 8001b8c:	10210000 	.word	0x10210000
 8001b90:	10120000 	.word	0x10120000
 8001b94:	10110000 	.word	0x10110000
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40010000 	.word	0x40010000
 8001ba0:	40010800 	.word	0x40010800
 8001ba4:	40010c00 	.word	0x40010c00
 8001ba8:	40011000 	.word	0x40011000
 8001bac:	40011400 	.word	0x40011400
 8001bb0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bb4:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <HAL_GPIO_Init+0x304>)
 8001bb6:	68da      	ldr	r2, [r3, #12]
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	4909      	ldr	r1, [pc, #36]	; (8001be4 <HAL_GPIO_Init+0x304>)
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f47f ae8e 	bne.w	80018f4 <HAL_GPIO_Init+0x14>
  }
}
 8001bd8:	bf00      	nop
 8001bda:	bf00      	nop
 8001bdc:	372c      	adds	r7, #44	; 0x2c
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr
 8001be4:	40010400 	.word	0x40010400

08001be8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	807b      	strh	r3, [r7, #2]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bf8:	787b      	ldrb	r3, [r7, #1]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bfe:	887a      	ldrh	r2, [r7, #2]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c04:	e003      	b.n	8001c0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c06:	887b      	ldrh	r3, [r7, #2]
 8001c08:	041a      	lsls	r2, r3, #16
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	611a      	str	r2, [r3, #16]
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr

08001c18 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	460b      	mov	r3, r1
 8001c22:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c2a:	887a      	ldrh	r2, [r7, #2]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	041a      	lsls	r2, r3, #16
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	43d9      	mvns	r1, r3
 8001c36:	887b      	ldrh	r3, [r7, #2]
 8001c38:	400b      	ands	r3, r1
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	611a      	str	r2, [r3, #16]
}
 8001c40:	bf00      	nop
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc80      	pop	{r7}
 8001c48:	4770      	bx	lr

08001c4a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c4c:	b08b      	sub	sp, #44	; 0x2c
 8001c4e:	af06      	add	r7, sp, #24
 8001c50:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e0fd      	b.n	8001e58 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d106      	bne.n	8001c76 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f006 fb5b 	bl	800832c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2203      	movs	r2, #3
 8001c7a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f002 fb54 	bl	8004330 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	603b      	str	r3, [r7, #0]
 8001c8e:	687e      	ldr	r6, [r7, #4]
 8001c90:	466d      	mov	r5, sp
 8001c92:	f106 0410 	add.w	r4, r6, #16
 8001c96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c9a:	6823      	ldr	r3, [r4, #0]
 8001c9c:	602b      	str	r3, [r5, #0]
 8001c9e:	1d33      	adds	r3, r6, #4
 8001ca0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ca2:	6838      	ldr	r0, [r7, #0]
 8001ca4:	f002 fb1e 	bl	80042e4 <USB_CoreInit>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d005      	beq.n	8001cba <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2202      	movs	r2, #2
 8001cb2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e0ce      	b.n	8001e58 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f002 fb4f 	bl	8004364 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	73fb      	strb	r3, [r7, #15]
 8001cca:	e04c      	b.n	8001d66 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ccc:	7bfb      	ldrb	r3, [r7, #15]
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	1c5a      	adds	r2, r3, #1
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	440b      	add	r3, r1
 8001cdc:	3301      	adds	r3, #1
 8001cde:	2201      	movs	r2, #1
 8001ce0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ce2:	7bfb      	ldrb	r3, [r7, #15]
 8001ce4:	6879      	ldr	r1, [r7, #4]
 8001ce6:	1c5a      	adds	r2, r3, #1
 8001ce8:	4613      	mov	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	440b      	add	r3, r1
 8001cf2:	7bfa      	ldrb	r2, [r7, #15]
 8001cf4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001cf6:	7bfa      	ldrb	r2, [r7, #15]
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
 8001cfa:	b298      	uxth	r0, r3
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	440b      	add	r3, r1
 8001d08:	3336      	adds	r3, #54	; 0x36
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d0e:	7bfb      	ldrb	r3, [r7, #15]
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	1c5a      	adds	r2, r3, #1
 8001d14:	4613      	mov	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	440b      	add	r3, r1
 8001d1e:	3303      	adds	r3, #3
 8001d20:	2200      	movs	r2, #0
 8001d22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d24:	7bfa      	ldrb	r2, [r7, #15]
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	440b      	add	r3, r1
 8001d32:	3338      	adds	r3, #56	; 0x38
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d38:	7bfa      	ldrb	r2, [r7, #15]
 8001d3a:	6879      	ldr	r1, [r7, #4]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	440b      	add	r3, r1
 8001d46:	333c      	adds	r3, #60	; 0x3c
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d4c:	7bfa      	ldrb	r2, [r7, #15]
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	4613      	mov	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	440b      	add	r3, r1
 8001d5a:	3340      	adds	r3, #64	; 0x40
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
 8001d62:	3301      	adds	r3, #1
 8001d64:	73fb      	strb	r3, [r7, #15]
 8001d66:	7bfa      	ldrb	r2, [r7, #15]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d3ad      	bcc.n	8001ccc <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d70:	2300      	movs	r3, #0
 8001d72:	73fb      	strb	r3, [r7, #15]
 8001d74:	e044      	b.n	8001e00 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d76:	7bfa      	ldrb	r2, [r7, #15]
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	440b      	add	r3, r1
 8001d84:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001d88:	2200      	movs	r2, #0
 8001d8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d8c:	7bfa      	ldrb	r2, [r7, #15]
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	4613      	mov	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	440b      	add	r3, r1
 8001d9a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d9e:	7bfa      	ldrb	r2, [r7, #15]
 8001da0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001da2:	7bfa      	ldrb	r2, [r7, #15]
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	4613      	mov	r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4413      	add	r3, r2
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	440b      	add	r3, r1
 8001db0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001db4:	2200      	movs	r2, #0
 8001db6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001db8:	7bfa      	ldrb	r2, [r7, #15]
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	440b      	add	r3, r1
 8001dc6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001dce:	7bfa      	ldrb	r2, [r7, #15]
 8001dd0:	6879      	ldr	r1, [r7, #4]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	440b      	add	r3, r1
 8001ddc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001de4:	7bfa      	ldrb	r2, [r7, #15]
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	440b      	add	r3, r1
 8001df2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dfa:	7bfb      	ldrb	r3, [r7, #15]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	73fb      	strb	r3, [r7, #15]
 8001e00:	7bfa      	ldrb	r2, [r7, #15]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d3b5      	bcc.n	8001d76 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	603b      	str	r3, [r7, #0]
 8001e10:	687e      	ldr	r6, [r7, #4]
 8001e12:	466d      	mov	r5, sp
 8001e14:	f106 0410 	add.w	r4, r6, #16
 8001e18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e1c:	6823      	ldr	r3, [r4, #0]
 8001e1e:	602b      	str	r3, [r5, #0]
 8001e20:	1d33      	adds	r3, r6, #4
 8001e22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e24:	6838      	ldr	r0, [r7, #0]
 8001e26:	f002 faa9 	bl	800437c <USB_DevInit>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d005      	beq.n	8001e3c <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2202      	movs	r2, #2
 8001e34:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e00d      	b.n	8001e58 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f004 fc1a 	bl	800668a <USB_DevDisconnect>

  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e60 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d101      	bne.n	8001e76 <HAL_PCD_Start+0x16>
 8001e72:	2302      	movs	r3, #2
 8001e74:	e016      	b.n	8001ea4 <HAL_PCD_Start+0x44>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f002 fa3e 	bl	8004304 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001e88:	2101      	movs	r1, #1
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f006 fcc1 	bl	8008812 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f004 fbee 	bl	8006676 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f004 fbf0 	bl	800669e <USB_ReadInterrupts>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ec4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ec8:	d102      	bne.n	8001ed0 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 fb61 	bl	8002592 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f004 fbe2 	bl	800669e <USB_ReadInterrupts>
 8001eda:	4603      	mov	r3, r0
 8001edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ee4:	d112      	bne.n	8001f0c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ef8:	b292      	uxth	r2, r2
 8001efa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f006 fa8f 	bl	8008422 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001f04:	2100      	movs	r1, #0
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f925 	bl	8002156 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f004 fbc4 	bl	800669e <USB_ReadInterrupts>
 8001f16:	4603      	mov	r3, r0
 8001f18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f20:	d10b      	bne.n	8001f3a <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f34:	b292      	uxth	r2, r2
 8001f36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f004 fbad 	bl	800669e <USB_ReadInterrupts>
 8001f44:	4603      	mov	r3, r0
 8001f46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f4e:	d10b      	bne.n	8001f68 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f62:	b292      	uxth	r2, r2
 8001f64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f004 fb96 	bl	800669e <USB_ReadInterrupts>
 8001f72:	4603      	mov	r3, r0
 8001f74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f7c:	d126      	bne.n	8001fcc <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 0204 	bic.w	r2, r2, #4
 8001f90:	b292      	uxth	r2, r2
 8001f92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f022 0208 	bic.w	r2, r2, #8
 8001fa8:	b292      	uxth	r2, r2
 8001faa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f006 fa70 	bl	8008494 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001fc6:	b292      	uxth	r2, r2
 8001fc8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f004 fb64 	bl	800669e <USB_ReadInterrupts>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fe0:	f040 8084 	bne.w	80020ec <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	77fb      	strb	r3, [r7, #31]
 8001fe8:	e011      	b.n	800200e <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	7ffb      	ldrb	r3, [r7, #31]
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	441a      	add	r2, r3
 8001ff6:	7ffb      	ldrb	r3, [r7, #31]
 8001ff8:	8812      	ldrh	r2, [r2, #0]
 8001ffa:	b292      	uxth	r2, r2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	f107 0120 	add.w	r1, r7, #32
 8002002:	440b      	add	r3, r1
 8002004:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002008:	7ffb      	ldrb	r3, [r7, #31]
 800200a:	3301      	adds	r3, #1
 800200c:	77fb      	strb	r3, [r7, #31]
 800200e:	7ffb      	ldrb	r3, [r7, #31]
 8002010:	2b07      	cmp	r3, #7
 8002012:	d9ea      	bls.n	8001fea <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800201c:	b29a      	uxth	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f042 0201 	orr.w	r2, r2, #1
 8002026:	b292      	uxth	r2, r2
 8002028:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002034:	b29a      	uxth	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0201 	bic.w	r2, r2, #1
 800203e:	b292      	uxth	r2, r2
 8002040:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002044:	bf00      	nop
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800204e:	b29b      	uxth	r3, r3
 8002050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0f6      	beq.n	8002046 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002060:	b29a      	uxth	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800206a:	b292      	uxth	r2, r2
 800206c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002070:	2300      	movs	r3, #0
 8002072:	77fb      	strb	r3, [r7, #31]
 8002074:	e010      	b.n	8002098 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002076:	7ffb      	ldrb	r3, [r7, #31]
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6812      	ldr	r2, [r2, #0]
 800207c:	4611      	mov	r1, r2
 800207e:	7ffa      	ldrb	r2, [r7, #31]
 8002080:	0092      	lsls	r2, r2, #2
 8002082:	440a      	add	r2, r1
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	f107 0120 	add.w	r1, r7, #32
 800208a:	440b      	add	r3, r1
 800208c:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002090:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002092:	7ffb      	ldrb	r3, [r7, #31]
 8002094:	3301      	adds	r3, #1
 8002096:	77fb      	strb	r3, [r7, #31]
 8002098:	7ffb      	ldrb	r3, [r7, #31]
 800209a:	2b07      	cmp	r3, #7
 800209c:	d9eb      	bls.n	8002076 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f042 0208 	orr.w	r2, r2, #8
 80020b0:	b292      	uxth	r2, r2
 80020b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020be:	b29a      	uxth	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020c8:	b292      	uxth	r2, r2
 80020ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f042 0204 	orr.w	r2, r2, #4
 80020e0:	b292      	uxth	r2, r2
 80020e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f006 f9ba 	bl	8008460 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f004 fad4 	bl	800669e <USB_ReadInterrupts>
 80020f6:	4603      	mov	r3, r0
 80020f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002100:	d10e      	bne.n	8002120 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800210a:	b29a      	uxth	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002114:	b292      	uxth	r2, r2
 8002116:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f006 f973 	bl	8008406 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f004 faba 	bl	800669e <USB_ReadInterrupts>
 800212a:	4603      	mov	r3, r0
 800212c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002130:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002134:	d10b      	bne.n	800214e <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800213e:	b29a      	uxth	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002148:	b292      	uxth	r2, r2
 800214a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800214e:	bf00      	nop
 8002150:	3720      	adds	r7, #32
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b082      	sub	sp, #8
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
 800215e:	460b      	mov	r3, r1
 8002160:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002168:	2b01      	cmp	r3, #1
 800216a:	d101      	bne.n	8002170 <HAL_PCD_SetAddress+0x1a>
 800216c:	2302      	movs	r3, #2
 800216e:	e013      	b.n	8002198 <HAL_PCD_SetAddress+0x42>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	78fa      	ldrb	r2, [r7, #3]
 800217c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	78fa      	ldrb	r2, [r7, #3]
 8002186:	4611      	mov	r1, r2
 8002188:	4618      	mov	r0, r3
 800218a:	f004 fa61 	bl	8006650 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	4608      	mov	r0, r1
 80021aa:	4611      	mov	r1, r2
 80021ac:	461a      	mov	r2, r3
 80021ae:	4603      	mov	r3, r0
 80021b0:	70fb      	strb	r3, [r7, #3]
 80021b2:	460b      	mov	r3, r1
 80021b4:	803b      	strh	r3, [r7, #0]
 80021b6:	4613      	mov	r3, r2
 80021b8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80021ba:	2300      	movs	r3, #0
 80021bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	da0e      	bge.n	80021e4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021c6:	78fb      	ldrb	r3, [r7, #3]
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	1c5a      	adds	r2, r3, #1
 80021ce:	4613      	mov	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	4413      	add	r3, r2
 80021da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2201      	movs	r2, #1
 80021e0:	705a      	strb	r2, [r3, #1]
 80021e2:	e00e      	b.n	8002202 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021e4:	78fb      	ldrb	r3, [r7, #3]
 80021e6:	f003 0207 	and.w	r2, r3, #7
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	4413      	add	r3, r2
 80021fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002202:	78fb      	ldrb	r3, [r7, #3]
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	b2da      	uxtb	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800220e:	883a      	ldrh	r2, [r7, #0]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	78ba      	ldrb	r2, [r7, #2]
 8002218:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	785b      	ldrb	r3, [r3, #1]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d004      	beq.n	800222c <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	b29a      	uxth	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800222c:	78bb      	ldrb	r3, [r7, #2]
 800222e:	2b02      	cmp	r3, #2
 8002230:	d102      	bne.n	8002238 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800223e:	2b01      	cmp	r3, #1
 8002240:	d101      	bne.n	8002246 <HAL_PCD_EP_Open+0xa6>
 8002242:	2302      	movs	r3, #2
 8002244:	e00e      	b.n	8002264 <HAL_PCD_EP_Open+0xc4>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68f9      	ldr	r1, [r7, #12]
 8002254:	4618      	mov	r0, r3
 8002256:	f002 f8b1 	bl	80043bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002262:	7afb      	ldrb	r3, [r7, #11]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	460b      	mov	r3, r1
 8002276:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002278:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800227c:	2b00      	cmp	r3, #0
 800227e:	da0e      	bge.n	800229e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002280:	78fb      	ldrb	r3, [r7, #3]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	1c5a      	adds	r2, r3, #1
 8002288:	4613      	mov	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	4413      	add	r3, r2
 8002294:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2201      	movs	r2, #1
 800229a:	705a      	strb	r2, [r3, #1]
 800229c:	e00e      	b.n	80022bc <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800229e:	78fb      	ldrb	r3, [r7, #3]
 80022a0:	f003 0207 	and.w	r2, r3, #7
 80022a4:	4613      	mov	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4413      	add	r3, r2
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	4413      	add	r3, r2
 80022b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80022bc:	78fb      	ldrb	r3, [r7, #3]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d101      	bne.n	80022d6 <HAL_PCD_EP_Close+0x6a>
 80022d2:	2302      	movs	r3, #2
 80022d4:	e00e      	b.n	80022f4 <HAL_PCD_EP_Close+0x88>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68f9      	ldr	r1, [r7, #12]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f002 fbd3 	bl	8004a90 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	607a      	str	r2, [r7, #4]
 8002306:	603b      	str	r3, [r7, #0]
 8002308:	460b      	mov	r3, r1
 800230a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800230c:	7afb      	ldrb	r3, [r7, #11]
 800230e:	f003 0207 	and.w	r2, r3, #7
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	4413      	add	r3, r2
 8002322:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	2200      	movs	r2, #0
 8002334:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	2200      	movs	r2, #0
 800233a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800233c:	7afb      	ldrb	r3, [r7, #11]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	b2da      	uxtb	r2, r3
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002348:	7afb      	ldrb	r3, [r7, #11]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	2b00      	cmp	r3, #0
 8002350:	d106      	bne.n	8002360 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6979      	ldr	r1, [r7, #20]
 8002358:	4618      	mov	r0, r3
 800235a:	f002 fd85 	bl	8004e68 <USB_EPStartXfer>
 800235e:	e005      	b.n	800236c <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6979      	ldr	r1, [r7, #20]
 8002366:	4618      	mov	r0, r3
 8002368:	f002 fd7e 	bl	8004e68 <USB_EPStartXfer>
  }

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3718      	adds	r7, #24
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
 800237e:	460b      	mov	r3, r1
 8002380:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002382:	78fb      	ldrb	r3, [r7, #3]
 8002384:	f003 0207 	and.w	r2, r3, #7
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	4613      	mov	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4413      	add	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	440b      	add	r3, r1
 8002394:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002398:	681b      	ldr	r3, [r3, #0]
}
 800239a:	4618      	mov	r0, r3
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr

080023a4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	607a      	str	r2, [r7, #4]
 80023ae:	603b      	str	r3, [r7, #0]
 80023b0:	460b      	mov	r3, r1
 80023b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023b4:	7afb      	ldrb	r3, [r7, #11]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	1c5a      	adds	r2, r3, #1
 80023bc:	4613      	mov	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	4413      	add	r3, r2
 80023c8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	2200      	movs	r2, #0
 80023e8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	2201      	movs	r2, #1
 80023ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023f0:	7afb      	ldrb	r3, [r7, #11]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	b2da      	uxtb	r2, r3
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023fc:	7afb      	ldrb	r3, [r7, #11]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	2b00      	cmp	r3, #0
 8002404:	d106      	bne.n	8002414 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6979      	ldr	r1, [r7, #20]
 800240c:	4618      	mov	r0, r3
 800240e:	f002 fd2b 	bl	8004e68 <USB_EPStartXfer>
 8002412:	e005      	b.n	8002420 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6979      	ldr	r1, [r7, #20]
 800241a:	4618      	mov	r0, r3
 800241c:	f002 fd24 	bl	8004e68 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b084      	sub	sp, #16
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
 8002432:	460b      	mov	r3, r1
 8002434:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002436:	78fb      	ldrb	r3, [r7, #3]
 8002438:	f003 0207 	and.w	r2, r3, #7
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	429a      	cmp	r2, r3
 8002442:	d901      	bls.n	8002448 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e04c      	b.n	80024e2 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002448:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800244c:	2b00      	cmp	r3, #0
 800244e:	da0e      	bge.n	800246e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002450:	78fb      	ldrb	r3, [r7, #3]
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	1c5a      	adds	r2, r3, #1
 8002458:	4613      	mov	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	4413      	add	r3, r2
 8002464:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2201      	movs	r2, #1
 800246a:	705a      	strb	r2, [r3, #1]
 800246c:	e00c      	b.n	8002488 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800246e:	78fa      	ldrb	r2, [r7, #3]
 8002470:	4613      	mov	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	4413      	add	r3, r2
 8002480:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2201      	movs	r2, #1
 800248c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800248e:	78fb      	ldrb	r3, [r7, #3]
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	b2da      	uxtb	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d101      	bne.n	80024a8 <HAL_PCD_EP_SetStall+0x7e>
 80024a4:	2302      	movs	r3, #2
 80024a6:	e01c      	b.n	80024e2 <HAL_PCD_EP_SetStall+0xb8>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68f9      	ldr	r1, [r7, #12]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f003 ffcd 	bl	8006456 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024bc:	78fb      	ldrb	r3, [r7, #3]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d108      	bne.n	80024d8 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80024d0:	4619      	mov	r1, r3
 80024d2:	4610      	mov	r0, r2
 80024d4:	f004 f8f2 	bl	80066bc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b084      	sub	sp, #16
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
 80024f2:	460b      	mov	r3, r1
 80024f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80024f6:	78fb      	ldrb	r3, [r7, #3]
 80024f8:	f003 020f 	and.w	r2, r3, #15
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	429a      	cmp	r2, r3
 8002502:	d901      	bls.n	8002508 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e040      	b.n	800258a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002508:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800250c:	2b00      	cmp	r3, #0
 800250e:	da0e      	bge.n	800252e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002510:	78fb      	ldrb	r3, [r7, #3]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	1c5a      	adds	r2, r3, #1
 8002518:	4613      	mov	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	4413      	add	r3, r2
 8002524:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2201      	movs	r2, #1
 800252a:	705a      	strb	r2, [r3, #1]
 800252c:	e00e      	b.n	800254c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800252e:	78fb      	ldrb	r3, [r7, #3]
 8002530:	f003 0207 	and.w	r2, r3, #7
 8002534:	4613      	mov	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	4413      	add	r3, r2
 8002544:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002552:	78fb      	ldrb	r3, [r7, #3]
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	b2da      	uxtb	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002564:	2b01      	cmp	r3, #1
 8002566:	d101      	bne.n	800256c <HAL_PCD_EP_ClrStall+0x82>
 8002568:	2302      	movs	r3, #2
 800256a:	e00e      	b.n	800258a <HAL_PCD_EP_ClrStall+0xa0>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68f9      	ldr	r1, [r7, #12]
 800257a:	4618      	mov	r0, r3
 800257c:	f003 ffbb 	bl	80064f6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b08e      	sub	sp, #56	; 0x38
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800259a:	e2ec      	b.n	8002b76 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025a4:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80025a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80025b2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f040 8161 	bne.w	800287e <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80025bc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80025be:	f003 0310 	and.w	r3, r3, #16
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d152      	bne.n	800266c <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80025d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025d6:	81fb      	strh	r3, [r7, #14]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	89fb      	ldrh	r3, [r7, #14]
 80025de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	3328      	adds	r3, #40	; 0x28
 80025ee:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	461a      	mov	r2, r3
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	4413      	add	r3, r2
 8002604:	3302      	adds	r3, #2
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	4413      	add	r3, r2
 800260e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002612:	881b      	ldrh	r3, [r3, #0]
 8002614:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	695a      	ldr	r2, [r3, #20]
 8002620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	441a      	add	r2, r3
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800262a:	2100      	movs	r1, #0
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f005 fed0 	bl	80083d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	f000 829b 	beq.w	8002b76 <PCD_EP_ISR_Handler+0x5e4>
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	2b00      	cmp	r3, #0
 8002646:	f040 8296 	bne.w	8002b76 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002650:	b2db      	uxtb	r3, r3
 8002652:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002656:	b2da      	uxtb	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	b292      	uxth	r2, r2
 800265e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800266a:	e284      	b.n	8002b76 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002672:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800267c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800267e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002682:	2b00      	cmp	r3, #0
 8002684:	d034      	beq.n	80026f0 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800268e:	b29b      	uxth	r3, r3
 8002690:	461a      	mov	r2, r3
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	4413      	add	r3, r2
 800269a:	3306      	adds	r3, #6
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6812      	ldr	r2, [r2, #0]
 80026a2:	4413      	add	r3, r2
 80026a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6818      	ldr	r0, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80026bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026be:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80026c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	f004 f849 	bl	800675c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80026d6:	4013      	ands	r3, r2
 80026d8:	823b      	strh	r3, [r7, #16]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	8a3a      	ldrh	r2, [r7, #16]
 80026e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026e4:	b292      	uxth	r2, r2
 80026e6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f005 fe45 	bl	8008378 <HAL_PCD_SetupStageCallback>
 80026ee:	e242      	b.n	8002b76 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80026f0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f280 823e 	bge.w	8002b76 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	881b      	ldrh	r3, [r3, #0]
 8002700:	b29a      	uxth	r2, r3
 8002702:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002706:	4013      	ands	r3, r2
 8002708:	83bb      	strh	r3, [r7, #28]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	8bba      	ldrh	r2, [r7, #28]
 8002710:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002714:	b292      	uxth	r2, r2
 8002716:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002720:	b29b      	uxth	r3, r3
 8002722:	461a      	mov	r2, r3
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	4413      	add	r3, r2
 800272c:	3306      	adds	r3, #6
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6812      	ldr	r2, [r2, #0]
 8002734:	4413      	add	r3, r2
 8002736:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800273a:	881b      	ldrh	r3, [r3, #0]
 800273c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d019      	beq.n	8002780 <PCD_EP_ISR_Handler+0x1ee>
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	695b      	ldr	r3, [r3, #20]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d015      	beq.n	8002780 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6818      	ldr	r0, [r3, #0]
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	6959      	ldr	r1, [r3, #20]
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002764:	b29b      	uxth	r3, r3
 8002766:	f003 fff9 	bl	800675c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	695a      	ldr	r2, [r3, #20]
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	441a      	add	r2, r3
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002778:	2100      	movs	r1, #0
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f005 fe0e 	bl	800839c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	881b      	ldrh	r3, [r3, #0]
 8002786:	b29b      	uxth	r3, r3
 8002788:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800278c:	2b00      	cmp	r3, #0
 800278e:	f040 81f2 	bne.w	8002b76 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	61bb      	str	r3, [r7, #24]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	461a      	mov	r2, r3
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	4413      	add	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80027b0:	617b      	str	r3, [r7, #20]
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d112      	bne.n	80027e0 <PCD_EP_ISR_Handler+0x24e>
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	b29b      	uxth	r3, r3
 80027c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	801a      	strh	r2, [r3, #0]
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	881b      	ldrh	r3, [r3, #0]
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027d8:	b29a      	uxth	r2, r3
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	801a      	strh	r2, [r3, #0]
 80027de:	e02f      	b.n	8002840 <PCD_EP_ISR_Handler+0x2ae>
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	2b3e      	cmp	r3, #62	; 0x3e
 80027e6:	d813      	bhi.n	8002810 <PCD_EP_ISR_Handler+0x27e>
 80027e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	085b      	lsrs	r3, r3, #1
 80027ee:	633b      	str	r3, [r7, #48]	; 0x30
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d002      	beq.n	8002802 <PCD_EP_ISR_Handler+0x270>
 80027fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027fe:	3301      	adds	r3, #1
 8002800:	633b      	str	r3, [r7, #48]	; 0x30
 8002802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002804:	b29b      	uxth	r3, r3
 8002806:	029b      	lsls	r3, r3, #10
 8002808:	b29a      	uxth	r2, r3
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	801a      	strh	r2, [r3, #0]
 800280e:	e017      	b.n	8002840 <PCD_EP_ISR_Handler+0x2ae>
 8002810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	095b      	lsrs	r3, r3, #5
 8002816:	633b      	str	r3, [r7, #48]	; 0x30
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	f003 031f 	and.w	r3, r3, #31
 8002820:	2b00      	cmp	r3, #0
 8002822:	d102      	bne.n	800282a <PCD_EP_ISR_Handler+0x298>
 8002824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002826:	3b01      	subs	r3, #1
 8002828:	633b      	str	r3, [r7, #48]	; 0x30
 800282a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800282c:	b29b      	uxth	r3, r3
 800282e:	029b      	lsls	r3, r3, #10
 8002830:	b29b      	uxth	r3, r3
 8002832:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002836:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800283a:	b29a      	uxth	r2, r3
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	b29b      	uxth	r3, r3
 8002848:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800284c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002850:	827b      	strh	r3, [r7, #18]
 8002852:	8a7b      	ldrh	r3, [r7, #18]
 8002854:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002858:	827b      	strh	r3, [r7, #18]
 800285a:	8a7b      	ldrh	r3, [r7, #18]
 800285c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002860:	827b      	strh	r3, [r7, #18]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	8a7b      	ldrh	r3, [r7, #18]
 8002868:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800286c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002870:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002878:	b29b      	uxth	r3, r3
 800287a:	8013      	strh	r3, [r2, #0]
 800287c:	e17b      	b.n	8002b76 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	461a      	mov	r2, r3
 8002884:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	881b      	ldrh	r3, [r3, #0]
 800288e:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002890:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002894:	2b00      	cmp	r3, #0
 8002896:	f280 80ea 	bge.w	8002a6e <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	461a      	mov	r2, r3
 80028a0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	881b      	ldrh	r3, [r3, #0]
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	f640 738f 	movw	r3, #3983	; 0xf8f
 80028b0:	4013      	ands	r3, r2
 80028b2:	853b      	strh	r3, [r7, #40]	; 0x28
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	461a      	mov	r2, r3
 80028ba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80028c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028c8:	b292      	uxth	r2, r2
 80028ca:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80028cc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80028d0:	4613      	mov	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	4413      	add	r3, r2
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	7b1b      	ldrb	r3, [r3, #12]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d122      	bne.n	8002930 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	461a      	mov	r2, r3
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	4413      	add	r3, r2
 80028fe:	3306      	adds	r3, #6
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	6812      	ldr	r2, [r2, #0]
 8002906:	4413      	add	r3, r2
 8002908:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800290c:	881b      	ldrh	r3, [r3, #0]
 800290e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002912:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002914:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 8087 	beq.w	8002a2a <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6818      	ldr	r0, [r3, #0]
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	6959      	ldr	r1, [r3, #20]
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	88da      	ldrh	r2, [r3, #6]
 8002928:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800292a:	f003 ff17 	bl	800675c <USB_ReadPMA>
 800292e:	e07c      	b.n	8002a2a <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002932:	78db      	ldrb	r3, [r3, #3]
 8002934:	2b02      	cmp	r3, #2
 8002936:	d108      	bne.n	800294a <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002938:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800293a:	461a      	mov	r2, r3
 800293c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 f927 	bl	8002b92 <HAL_PCD_EP_DB_Receive>
 8002944:	4603      	mov	r3, r0
 8002946:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002948:	e06f      	b.n	8002a2a <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	461a      	mov	r2, r3
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	881b      	ldrh	r3, [r3, #0]
 800295a:	b29b      	uxth	r3, r3
 800295c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002964:	847b      	strh	r3, [r7, #34]	; 0x22
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	461a      	mov	r2, r3
 800296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	441a      	add	r2, r3
 8002974:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002976:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800297a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800297e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002982:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002986:	b29b      	uxth	r3, r3
 8002988:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	461a      	mov	r2, r3
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	881b      	ldrh	r3, [r3, #0]
 800299a:	b29b      	uxth	r3, r3
 800299c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d021      	beq.n	80029e8 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	461a      	mov	r2, r3
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	4413      	add	r3, r2
 80029b8:	3302      	adds	r3, #2
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6812      	ldr	r2, [r2, #0]
 80029c0:	4413      	add	r3, r2
 80029c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029c6:	881b      	ldrh	r3, [r3, #0]
 80029c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029cc:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80029ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d02a      	beq.n	8002a2a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6818      	ldr	r0, [r3, #0]
 80029d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029da:	6959      	ldr	r1, [r3, #20]
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	891a      	ldrh	r2, [r3, #8]
 80029e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029e2:	f003 febb 	bl	800675c <USB_ReadPMA>
 80029e6:	e020      	b.n	8002a2a <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	461a      	mov	r2, r3
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	4413      	add	r3, r2
 80029fc:	3306      	adds	r3, #6
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	6812      	ldr	r2, [r2, #0]
 8002a04:	4413      	add	r3, r2
 8002a06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a0a:	881b      	ldrh	r3, [r3, #0]
 8002a0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a10:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002a12:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d008      	beq.n	8002a2a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6818      	ldr	r0, [r3, #0]
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	6959      	ldr	r1, [r3, #20]
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	895a      	ldrh	r2, [r3, #10]
 8002a24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a26:	f003 fe99 	bl	800675c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	69da      	ldr	r2, [r3, #28]
 8002a2e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a30:	441a      	add	r2, r3
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	695a      	ldr	r2, [r3, #20]
 8002a3a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a3c:	441a      	add	r2, r3
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a40:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d004      	beq.n	8002a54 <PCD_EP_ISR_Handler+0x4c2>
 8002a4a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d206      	bcs.n	8002a62 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	4619      	mov	r1, r3
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f005 fc9e 	bl	800839c <HAL_PCD_DataOutStageCallback>
 8002a60:	e005      	b.n	8002a6e <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f002 f9fd 	bl	8004e68 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002a6e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d07e      	beq.n	8002b76 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002a78:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a7c:	1c5a      	adds	r2, r3, #1
 8002a7e:	4613      	mov	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	4413      	add	r3, r2
 8002a8a:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	461a      	mov	r2, r3
 8002a92:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4413      	add	r3, r2
 8002a9a:	881b      	ldrh	r3, [r3, #0]
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aa6:	843b      	strh	r3, [r7, #32]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	461a      	mov	r2, r3
 8002aae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	441a      	add	r2, r3
 8002ab6:	8c3b      	ldrh	r3, [r7, #32]
 8002ab8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002abc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac6:	78db      	ldrb	r3, [r3, #3]
 8002ac8:	2b03      	cmp	r3, #3
 8002aca:	d00c      	beq.n	8002ae6 <PCD_EP_ISR_Handler+0x554>
 8002acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ace:	78db      	ldrb	r3, [r3, #3]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d008      	beq.n	8002ae6 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d146      	bne.n	8002b6a <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002adc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d141      	bne.n	8002b6a <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	461a      	mov	r2, r3
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	4413      	add	r3, r2
 8002afa:	3302      	adds	r3, #2
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6812      	ldr	r2, [r2, #0]
 8002b02:	4413      	add	r3, r2
 8002b04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b08:	881b      	ldrh	r3, [r3, #0]
 8002b0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b0e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b12:	699a      	ldr	r2, [r3, #24]
 8002b14:	8bfb      	ldrh	r3, [r7, #30]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d906      	bls.n	8002b28 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	699a      	ldr	r2, [r3, #24]
 8002b1e:	8bfb      	ldrh	r3, [r7, #30]
 8002b20:	1ad2      	subs	r2, r2, r3
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	619a      	str	r2, [r3, #24]
 8002b26:	e002      	b.n	8002b2e <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d106      	bne.n	8002b44 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f005 fc48 	bl	80083d2 <HAL_PCD_DataInStageCallback>
 8002b42:	e018      	b.n	8002b76 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b46:	695a      	ldr	r2, [r3, #20]
 8002b48:	8bfb      	ldrh	r3, [r7, #30]
 8002b4a:	441a      	add	r2, r3
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b52:	69da      	ldr	r2, [r3, #28]
 8002b54:	8bfb      	ldrh	r3, [r7, #30]
 8002b56:	441a      	add	r2, r3
 8002b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b62:	4618      	mov	r0, r3
 8002b64:	f002 f980 	bl	8004e68 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002b68:	e005      	b.n	8002b76 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002b6a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 f91b 	bl	8002dac <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	b21b      	sxth	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f6ff ad0a 	blt.w	800259c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3738      	adds	r7, #56	; 0x38
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b088      	sub	sp, #32
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	60f8      	str	r0, [r7, #12]
 8002b9a:	60b9      	str	r1, [r7, #8]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ba0:	88fb      	ldrh	r3, [r7, #6]
 8002ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d07e      	beq.n	8002ca8 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	3302      	adds	r3, #2
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	6812      	ldr	r2, [r2, #0]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bd2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	699a      	ldr	r2, [r3, #24]
 8002bd8:	8b7b      	ldrh	r3, [r7, #26]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d306      	bcc.n	8002bec <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	699a      	ldr	r2, [r3, #24]
 8002be2:	8b7b      	ldrh	r3, [r7, #26]
 8002be4:	1ad2      	subs	r2, r2, r3
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	619a      	str	r2, [r3, #24]
 8002bea:	e002      	b.n	8002bf2 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d123      	bne.n	8002c42 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	881b      	ldrh	r3, [r3, #0]
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c14:	833b      	strh	r3, [r7, #24]
 8002c16:	8b3b      	ldrh	r3, [r7, #24]
 8002c18:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c1c:	833b      	strh	r3, [r7, #24]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	461a      	mov	r2, r3
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	441a      	add	r2, r3
 8002c2c:	8b3b      	ldrh	r3, [r7, #24]
 8002c2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c42:	88fb      	ldrh	r3, [r7, #6]
 8002c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d01f      	beq.n	8002c8c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	461a      	mov	r2, r3
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	881b      	ldrh	r3, [r3, #0]
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c66:	82fb      	strh	r3, [r7, #22]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	441a      	add	r2, r3
 8002c76:	8afb      	ldrh	r3, [r7, #22]
 8002c78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c8c:	8b7b      	ldrh	r3, [r7, #26]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 8087 	beq.w	8002da2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6818      	ldr	r0, [r3, #0]
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	6959      	ldr	r1, [r3, #20]
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	891a      	ldrh	r2, [r3, #8]
 8002ca0:	8b7b      	ldrh	r3, [r7, #26]
 8002ca2:	f003 fd5b 	bl	800675c <USB_ReadPMA>
 8002ca6:	e07c      	b.n	8002da2 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	4413      	add	r3, r2
 8002cbc:	3306      	adds	r3, #6
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	6812      	ldr	r2, [r2, #0]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cca:	881b      	ldrh	r3, [r3, #0]
 8002ccc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cd0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	699a      	ldr	r2, [r3, #24]
 8002cd6:	8b7b      	ldrh	r3, [r7, #26]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d306      	bcc.n	8002cea <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	699a      	ldr	r2, [r3, #24]
 8002ce0:	8b7b      	ldrh	r3, [r7, #26]
 8002ce2:	1ad2      	subs	r2, r2, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	619a      	str	r2, [r3, #24]
 8002ce8:	e002      	b.n	8002cf0 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	2200      	movs	r2, #0
 8002cee:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d123      	bne.n	8002d40 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	881b      	ldrh	r3, [r3, #0]
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d12:	83fb      	strh	r3, [r7, #30]
 8002d14:	8bfb      	ldrh	r3, [r7, #30]
 8002d16:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d1a:	83fb      	strh	r3, [r7, #30]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	461a      	mov	r2, r3
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	441a      	add	r2, r3
 8002d2a:	8bfb      	ldrh	r3, [r7, #30]
 8002d2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002d40:	88fb      	ldrh	r3, [r7, #6]
 8002d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d11f      	bne.n	8002d8a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	881b      	ldrh	r3, [r3, #0]
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d64:	83bb      	strh	r3, [r7, #28]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	441a      	add	r2, r3
 8002d74:	8bbb      	ldrh	r3, [r7, #28]
 8002d76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002d8a:	8b7b      	ldrh	r3, [r7, #26]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d008      	beq.n	8002da2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6818      	ldr	r0, [r3, #0]
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	6959      	ldr	r1, [r3, #20]
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	895a      	ldrh	r2, [r3, #10]
 8002d9c:	8b7b      	ldrh	r3, [r7, #26]
 8002d9e:	f003 fcdd 	bl	800675c <USB_ReadPMA>
    }
  }

  return count;
 8002da2:	8b7b      	ldrh	r3, [r7, #26]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3720      	adds	r7, #32
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b0a2      	sub	sp, #136	; 0x88
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	4613      	mov	r3, r2
 8002db8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002dba:	88fb      	ldrh	r3, [r7, #6]
 8002dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 81c7 	beq.w	8003154 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	4413      	add	r3, r2
 8002dda:	3302      	adds	r3, #2
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	6812      	ldr	r2, [r2, #0]
 8002de2:	4413      	add	r3, r2
 8002de4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	699a      	ldr	r2, [r3, #24]
 8002df6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d907      	bls.n	8002e0e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	699a      	ldr	r2, [r3, #24]
 8002e02:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e06:	1ad2      	subs	r2, r2, r3
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	619a      	str	r2, [r3, #24]
 8002e0c:	e002      	b.n	8002e14 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	2200      	movs	r2, #0
 8002e12:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f040 80b9 	bne.w	8002f90 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	785b      	ldrb	r3, [r3, #1]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d126      	bne.n	8002e74 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	461a      	mov	r2, r3
 8002e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3a:	4413      	add	r3, r2
 8002e3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	011a      	lsls	r2, r3, #4
 8002e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e46:	4413      	add	r3, r2
 8002e48:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e50:	881b      	ldrh	r3, [r3, #0]
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	801a      	strh	r2, [r3, #0]
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	881b      	ldrh	r3, [r3, #0]
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	801a      	strh	r2, [r3, #0]
 8002e72:	e01a      	b.n	8002eaa <HAL_PCD_EP_DB_Transmit+0xfe>
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	785b      	ldrb	r3, [r3, #1]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d116      	bne.n	8002eaa <HAL_PCD_EP_DB_Transmit+0xfe>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	633b      	str	r3, [r7, #48]	; 0x30
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e90:	4413      	add	r3, r2
 8002e92:	633b      	str	r3, [r7, #48]	; 0x30
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	011a      	lsls	r2, r3, #4
 8002e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9c:	4413      	add	r3, r2
 8002e9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	623b      	str	r3, [r7, #32]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	785b      	ldrb	r3, [r3, #1]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d126      	bne.n	8002f06 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	61bb      	str	r3, [r7, #24]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	461a      	mov	r2, r3
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	4413      	add	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	011a      	lsls	r2, r3, #4
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	4413      	add	r3, r2
 8002eda:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ede:	617b      	str	r3, [r7, #20]
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	881b      	ldrh	r3, [r3, #0]
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	801a      	strh	r2, [r3, #0]
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	881b      	ldrh	r3, [r3, #0]
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002efa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	801a      	strh	r2, [r3, #0]
 8002f04:	e017      	b.n	8002f36 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	785b      	ldrb	r3, [r3, #1]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d113      	bne.n	8002f36 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	461a      	mov	r2, r3
 8002f1a:	6a3b      	ldr	r3, [r7, #32]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	623b      	str	r3, [r7, #32]
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	011a      	lsls	r2, r3, #4
 8002f26:	6a3b      	ldr	r3, [r7, #32]
 8002f28:	4413      	add	r3, r2
 8002f2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f2e:	61fb      	str	r3, [r7, #28]
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	2200      	movs	r2, #0
 8002f34:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f005 fa48 	bl	80083d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f42:	88fb      	ldrh	r3, [r7, #6]
 8002f44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 82d4 	beq.w	80034f6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	461a      	mov	r2, r3
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4413      	add	r3, r2
 8002f5c:	881b      	ldrh	r3, [r3, #0]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f68:	827b      	strh	r3, [r7, #18]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	441a      	add	r2, r3
 8002f78:	8a7b      	ldrh	r3, [r7, #18]
 8002f7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	8013      	strh	r3, [r2, #0]
 8002f8e:	e2b2      	b.n	80034f6 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f90:	88fb      	ldrh	r3, [r7, #6]
 8002f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d021      	beq.n	8002fde <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	881b      	ldrh	r3, [r3, #0]
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	441a      	add	r2, r3
 8002fc6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002fca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	f040 8286 	bne.w	80034f6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	695a      	ldr	r2, [r3, #20]
 8002fee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ff2:	441a      	add	r2, r3
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	69da      	ldr	r2, [r3, #28]
 8002ffc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003000:	441a      	add	r2, r3
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	6a1a      	ldr	r2, [r3, #32]
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	429a      	cmp	r2, r3
 8003010:	d309      	bcc.n	8003026 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	6a1a      	ldr	r2, [r3, #32]
 800301c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800301e:	1ad2      	subs	r2, r2, r3
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	621a      	str	r2, [r3, #32]
 8003024:	e015      	b.n	8003052 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d107      	bne.n	800303e <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800302e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003032:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800303c:	e009      	b.n	8003052 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	2200      	movs	r2, #0
 8003050:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	785b      	ldrb	r3, [r3, #1]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d155      	bne.n	8003106 <HAL_PCD_EP_DB_Transmit+0x35a>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003068:	b29b      	uxth	r3, r3
 800306a:	461a      	mov	r2, r3
 800306c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306e:	4413      	add	r3, r2
 8003070:	63bb      	str	r3, [r7, #56]	; 0x38
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	011a      	lsls	r2, r3, #4
 8003078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800307a:	4413      	add	r3, r2
 800307c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003080:	637b      	str	r3, [r7, #52]	; 0x34
 8003082:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003084:	2b00      	cmp	r3, #0
 8003086:	d112      	bne.n	80030ae <HAL_PCD_EP_DB_Transmit+0x302>
 8003088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800308a:	881b      	ldrh	r3, [r3, #0]
 800308c:	b29b      	uxth	r3, r3
 800308e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003092:	b29a      	uxth	r2, r3
 8003094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003096:	801a      	strh	r2, [r3, #0]
 8003098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800309a:	881b      	ldrh	r3, [r3, #0]
 800309c:	b29b      	uxth	r3, r3
 800309e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030aa:	801a      	strh	r2, [r3, #0]
 80030ac:	e047      	b.n	800313e <HAL_PCD_EP_DB_Transmit+0x392>
 80030ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030b0:	2b3e      	cmp	r3, #62	; 0x3e
 80030b2:	d811      	bhi.n	80030d8 <HAL_PCD_EP_DB_Transmit+0x32c>
 80030b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030b6:	085b      	lsrs	r3, r3, #1
 80030b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80030ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d002      	beq.n	80030ca <HAL_PCD_EP_DB_Transmit+0x31e>
 80030c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030c6:	3301      	adds	r3, #1
 80030c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80030ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	029b      	lsls	r3, r3, #10
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d4:	801a      	strh	r2, [r3, #0]
 80030d6:	e032      	b.n	800313e <HAL_PCD_EP_DB_Transmit+0x392>
 80030d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030da:	095b      	lsrs	r3, r3, #5
 80030dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80030de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030e0:	f003 031f 	and.w	r3, r3, #31
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d102      	bne.n	80030ee <HAL_PCD_EP_DB_Transmit+0x342>
 80030e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030ea:	3b01      	subs	r3, #1
 80030ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80030ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	029b      	lsls	r3, r3, #10
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030fe:	b29a      	uxth	r2, r3
 8003100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003102:	801a      	strh	r2, [r3, #0]
 8003104:	e01b      	b.n	800313e <HAL_PCD_EP_DB_Transmit+0x392>
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	785b      	ldrb	r3, [r3, #1]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d117      	bne.n	800313e <HAL_PCD_EP_DB_Transmit+0x392>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	643b      	str	r3, [r7, #64]	; 0x40
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800311c:	b29b      	uxth	r3, r3
 800311e:	461a      	mov	r2, r3
 8003120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003122:	4413      	add	r3, r2
 8003124:	643b      	str	r3, [r7, #64]	; 0x40
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	011a      	lsls	r2, r3, #4
 800312c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800312e:	4413      	add	r3, r2
 8003130:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003134:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003138:	b29a      	uxth	r2, r3
 800313a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800313c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6818      	ldr	r0, [r3, #0]
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	6959      	ldr	r1, [r3, #20]
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	891a      	ldrh	r2, [r3, #8]
 800314a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800314c:	b29b      	uxth	r3, r3
 800314e:	f003 fac0 	bl	80066d2 <USB_WritePMA>
 8003152:	e1d0      	b.n	80034f6 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800315c:	b29b      	uxth	r3, r3
 800315e:	461a      	mov	r2, r3
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	4413      	add	r3, r2
 8003168:	3306      	adds	r3, #6
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	6812      	ldr	r2, [r2, #0]
 8003170:	4413      	add	r3, r2
 8003172:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003176:	881b      	ldrh	r3, [r3, #0]
 8003178:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800317c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	699a      	ldr	r2, [r3, #24]
 8003184:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003188:	429a      	cmp	r2, r3
 800318a:	d307      	bcc.n	800319c <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	699a      	ldr	r2, [r3, #24]
 8003190:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003194:	1ad2      	subs	r2, r2, r3
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	619a      	str	r2, [r3, #24]
 800319a:	e002      	b.n	80031a2 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	2200      	movs	r2, #0
 80031a0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f040 80c4 	bne.w	8003334 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	785b      	ldrb	r3, [r3, #1]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d126      	bne.n	8003202 <HAL_PCD_EP_DB_Transmit+0x456>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	461a      	mov	r2, r3
 80031c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031c8:	4413      	add	r3, r2
 80031ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	011a      	lsls	r2, r3, #4
 80031d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031d4:	4413      	add	r3, r2
 80031d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80031da:	66bb      	str	r3, [r7, #104]	; 0x68
 80031dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031de:	881b      	ldrh	r3, [r3, #0]
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031ea:	801a      	strh	r2, [r3, #0]
 80031ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031ee:	881b      	ldrh	r3, [r3, #0]
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031fe:	801a      	strh	r2, [r3, #0]
 8003200:	e01a      	b.n	8003238 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	785b      	ldrb	r3, [r3, #1]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d116      	bne.n	8003238 <HAL_PCD_EP_DB_Transmit+0x48c>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	677b      	str	r3, [r7, #116]	; 0x74
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003218:	b29b      	uxth	r3, r3
 800321a:	461a      	mov	r2, r3
 800321c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800321e:	4413      	add	r3, r2
 8003220:	677b      	str	r3, [r7, #116]	; 0x74
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	011a      	lsls	r2, r3, #4
 8003228:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800322a:	4413      	add	r3, r2
 800322c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003230:	673b      	str	r3, [r7, #112]	; 0x70
 8003232:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003234:	2200      	movs	r2, #0
 8003236:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	67bb      	str	r3, [r7, #120]	; 0x78
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	785b      	ldrb	r3, [r3, #1]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d12f      	bne.n	80032a6 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003256:	b29b      	uxth	r3, r3
 8003258:	461a      	mov	r2, r3
 800325a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800325e:	4413      	add	r3, r2
 8003260:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	011a      	lsls	r2, r3, #4
 800326a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800326e:	4413      	add	r3, r2
 8003270:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003274:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003278:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800327c:	881b      	ldrh	r3, [r3, #0]
 800327e:	b29b      	uxth	r3, r3
 8003280:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003284:	b29a      	uxth	r2, r3
 8003286:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800328a:	801a      	strh	r2, [r3, #0]
 800328c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003290:	881b      	ldrh	r3, [r3, #0]
 8003292:	b29b      	uxth	r3, r3
 8003294:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003298:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800329c:	b29a      	uxth	r2, r3
 800329e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032a2:	801a      	strh	r2, [r3, #0]
 80032a4:	e017      	b.n	80032d6 <HAL_PCD_EP_DB_Transmit+0x52a>
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	785b      	ldrb	r3, [r3, #1]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d113      	bne.n	80032d6 <HAL_PCD_EP_DB_Transmit+0x52a>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	461a      	mov	r2, r3
 80032ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032bc:	4413      	add	r3, r2
 80032be:	67bb      	str	r3, [r7, #120]	; 0x78
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	011a      	lsls	r2, r3, #4
 80032c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032c8:	4413      	add	r3, r2
 80032ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80032ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 80032d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032d2:	2200      	movs	r2, #0
 80032d4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	4619      	mov	r1, r3
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f005 f878 	bl	80083d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80032e2:	88fb      	ldrh	r3, [r7, #6]
 80032e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f040 8104 	bne.w	80034f6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	461a      	mov	r2, r3
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	881b      	ldrh	r3, [r3, #0]
 80032fe:	b29b      	uxth	r3, r3
 8003300:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003308:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	461a      	mov	r2, r3
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	441a      	add	r2, r3
 800331a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800331e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003322:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003326:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800332a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800332e:	b29b      	uxth	r3, r3
 8003330:	8013      	strh	r3, [r2, #0]
 8003332:	e0e0      	b.n	80034f6 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003334:	88fb      	ldrh	r3, [r7, #6]
 8003336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d121      	bne.n	8003382 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	461a      	mov	r2, r3
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	4413      	add	r3, r2
 800334c:	881b      	ldrh	r3, [r3, #0]
 800334e:	b29b      	uxth	r3, r3
 8003350:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003358:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	461a      	mov	r2, r3
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	441a      	add	r2, r3
 800336a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800336e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003372:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003376:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800337a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800337e:	b29b      	uxth	r3, r3
 8003380:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003388:	2b01      	cmp	r3, #1
 800338a:	f040 80b4 	bne.w	80034f6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	695a      	ldr	r2, [r3, #20]
 8003392:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003396:	441a      	add	r2, r3
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	69da      	ldr	r2, [r3, #28]
 80033a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033a4:	441a      	add	r2, r3
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	6a1a      	ldr	r2, [r3, #32]
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d309      	bcc.n	80033ca <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	6a1a      	ldr	r2, [r3, #32]
 80033c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033c2:	1ad2      	subs	r2, r2, r3
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	621a      	str	r2, [r3, #32]
 80033c8:	e015      	b.n	80033f6 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d107      	bne.n	80033e2 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80033d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033d6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80033e0:	e009      	b.n	80033f6 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	2200      	movs	r2, #0
 80033ec:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	667b      	str	r3, [r7, #100]	; 0x64
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	785b      	ldrb	r3, [r3, #1]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d155      	bne.n	80034b0 <HAL_PCD_EP_DB_Transmit+0x704>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	65fb      	str	r3, [r7, #92]	; 0x5c
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003412:	b29b      	uxth	r3, r3
 8003414:	461a      	mov	r2, r3
 8003416:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003418:	4413      	add	r3, r2
 800341a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	011a      	lsls	r2, r3, #4
 8003422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003424:	4413      	add	r3, r2
 8003426:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800342a:	65bb      	str	r3, [r7, #88]	; 0x58
 800342c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800342e:	2b00      	cmp	r3, #0
 8003430:	d112      	bne.n	8003458 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003432:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003434:	881b      	ldrh	r3, [r3, #0]
 8003436:	b29b      	uxth	r3, r3
 8003438:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800343c:	b29a      	uxth	r2, r3
 800343e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003440:	801a      	strh	r2, [r3, #0]
 8003442:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003444:	881b      	ldrh	r3, [r3, #0]
 8003446:	b29b      	uxth	r3, r3
 8003448:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800344c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003450:	b29a      	uxth	r2, r3
 8003452:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003454:	801a      	strh	r2, [r3, #0]
 8003456:	e044      	b.n	80034e2 <HAL_PCD_EP_DB_Transmit+0x736>
 8003458:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800345a:	2b3e      	cmp	r3, #62	; 0x3e
 800345c:	d811      	bhi.n	8003482 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800345e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003460:	085b      	lsrs	r3, r3, #1
 8003462:	657b      	str	r3, [r7, #84]	; 0x54
 8003464:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d002      	beq.n	8003474 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800346e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003470:	3301      	adds	r3, #1
 8003472:	657b      	str	r3, [r7, #84]	; 0x54
 8003474:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003476:	b29b      	uxth	r3, r3
 8003478:	029b      	lsls	r3, r3, #10
 800347a:	b29a      	uxth	r2, r3
 800347c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800347e:	801a      	strh	r2, [r3, #0]
 8003480:	e02f      	b.n	80034e2 <HAL_PCD_EP_DB_Transmit+0x736>
 8003482:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003484:	095b      	lsrs	r3, r3, #5
 8003486:	657b      	str	r3, [r7, #84]	; 0x54
 8003488:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800348a:	f003 031f 	and.w	r3, r3, #31
 800348e:	2b00      	cmp	r3, #0
 8003490:	d102      	bne.n	8003498 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8003492:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003494:	3b01      	subs	r3, #1
 8003496:	657b      	str	r3, [r7, #84]	; 0x54
 8003498:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800349a:	b29b      	uxth	r3, r3
 800349c:	029b      	lsls	r3, r3, #10
 800349e:	b29b      	uxth	r3, r3
 80034a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034ac:	801a      	strh	r2, [r3, #0]
 80034ae:	e018      	b.n	80034e2 <HAL_PCD_EP_DB_Transmit+0x736>
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	785b      	ldrb	r3, [r3, #1]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d114      	bne.n	80034e2 <HAL_PCD_EP_DB_Transmit+0x736>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	461a      	mov	r2, r3
 80034c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034c6:	4413      	add	r3, r2
 80034c8:	667b      	str	r3, [r7, #100]	; 0x64
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	011a      	lsls	r2, r3, #4
 80034d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034d2:	4413      	add	r3, r2
 80034d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80034d8:	663b      	str	r3, [r7, #96]	; 0x60
 80034da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034dc:	b29a      	uxth	r2, r3
 80034de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034e0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6818      	ldr	r0, [r3, #0]
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	6959      	ldr	r1, [r3, #20]
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	895a      	ldrh	r2, [r3, #10]
 80034ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	f003 f8ee 	bl	80066d2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	461a      	mov	r2, r3
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	881b      	ldrh	r3, [r3, #0]
 8003506:	b29b      	uxth	r3, r3
 8003508:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800350c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003510:	823b      	strh	r3, [r7, #16]
 8003512:	8a3b      	ldrh	r3, [r7, #16]
 8003514:	f083 0310 	eor.w	r3, r3, #16
 8003518:	823b      	strh	r3, [r7, #16]
 800351a:	8a3b      	ldrh	r3, [r7, #16]
 800351c:	f083 0320 	eor.w	r3, r3, #32
 8003520:	823b      	strh	r3, [r7, #16]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	461a      	mov	r2, r3
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	441a      	add	r2, r3
 8003530:	8a3b      	ldrh	r3, [r7, #16]
 8003532:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003536:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800353a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800353e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003542:	b29b      	uxth	r3, r3
 8003544:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3788      	adds	r7, #136	; 0x88
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003550:	b480      	push	{r7}
 8003552:	b087      	sub	sp, #28
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	607b      	str	r3, [r7, #4]
 800355a:	460b      	mov	r3, r1
 800355c:	817b      	strh	r3, [r7, #10]
 800355e:	4613      	mov	r3, r2
 8003560:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003562:	897b      	ldrh	r3, [r7, #10]
 8003564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003568:	b29b      	uxth	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00b      	beq.n	8003586 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800356e:	897b      	ldrh	r3, [r7, #10]
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	1c5a      	adds	r2, r3, #1
 8003576:	4613      	mov	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4413      	add	r3, r2
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	4413      	add	r3, r2
 8003582:	617b      	str	r3, [r7, #20]
 8003584:	e009      	b.n	800359a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003586:	897a      	ldrh	r2, [r7, #10]
 8003588:	4613      	mov	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4413      	add	r3, r2
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	4413      	add	r3, r2
 8003598:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800359a:	893b      	ldrh	r3, [r7, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d107      	bne.n	80035b0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	2200      	movs	r2, #0
 80035a4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	80da      	strh	r2, [r3, #6]
 80035ae:	e00b      	b.n	80035c8 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	2201      	movs	r2, #1
 80035b4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	0c1b      	lsrs	r3, r3, #16
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	371c      	adds	r7, #28
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bc80      	pop	{r7}
 80035d2:	4770      	bx	lr

080035d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e26c      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 8087 	beq.w	8003702 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035f4:	4b92      	ldr	r3, [pc, #584]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f003 030c 	and.w	r3, r3, #12
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d00c      	beq.n	800361a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003600:	4b8f      	ldr	r3, [pc, #572]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f003 030c 	and.w	r3, r3, #12
 8003608:	2b08      	cmp	r3, #8
 800360a:	d112      	bne.n	8003632 <HAL_RCC_OscConfig+0x5e>
 800360c:	4b8c      	ldr	r3, [pc, #560]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003618:	d10b      	bne.n	8003632 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800361a:	4b89      	ldr	r3, [pc, #548]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d06c      	beq.n	8003700 <HAL_RCC_OscConfig+0x12c>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d168      	bne.n	8003700 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e246      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800363a:	d106      	bne.n	800364a <HAL_RCC_OscConfig+0x76>
 800363c:	4b80      	ldr	r3, [pc, #512]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a7f      	ldr	r2, [pc, #508]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 8003642:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003646:	6013      	str	r3, [r2, #0]
 8003648:	e02e      	b.n	80036a8 <HAL_RCC_OscConfig+0xd4>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10c      	bne.n	800366c <HAL_RCC_OscConfig+0x98>
 8003652:	4b7b      	ldr	r3, [pc, #492]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a7a      	ldr	r2, [pc, #488]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 8003658:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800365c:	6013      	str	r3, [r2, #0]
 800365e:	4b78      	ldr	r3, [pc, #480]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a77      	ldr	r2, [pc, #476]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 8003664:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003668:	6013      	str	r3, [r2, #0]
 800366a:	e01d      	b.n	80036a8 <HAL_RCC_OscConfig+0xd4>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003674:	d10c      	bne.n	8003690 <HAL_RCC_OscConfig+0xbc>
 8003676:	4b72      	ldr	r3, [pc, #456]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a71      	ldr	r2, [pc, #452]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 800367c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	4b6f      	ldr	r3, [pc, #444]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a6e      	ldr	r2, [pc, #440]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 8003688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800368c:	6013      	str	r3, [r2, #0]
 800368e:	e00b      	b.n	80036a8 <HAL_RCC_OscConfig+0xd4>
 8003690:	4b6b      	ldr	r3, [pc, #428]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a6a      	ldr	r2, [pc, #424]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 8003696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800369a:	6013      	str	r3, [r2, #0]
 800369c:	4b68      	ldr	r3, [pc, #416]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a67      	ldr	r2, [pc, #412]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 80036a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d013      	beq.n	80036d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b0:	f7fd f968 	bl	8000984 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036b8:	f7fd f964 	bl	8000984 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b64      	cmp	r3, #100	; 0x64
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e1fa      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ca:	4b5d      	ldr	r3, [pc, #372]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0f0      	beq.n	80036b8 <HAL_RCC_OscConfig+0xe4>
 80036d6:	e014      	b.n	8003702 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d8:	f7fd f954 	bl	8000984 <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036e0:	f7fd f950 	bl	8000984 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b64      	cmp	r3, #100	; 0x64
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e1e6      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036f2:	4b53      	ldr	r3, [pc, #332]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1f0      	bne.n	80036e0 <HAL_RCC_OscConfig+0x10c>
 80036fe:	e000      	b.n	8003702 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d063      	beq.n	80037d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800370e:	4b4c      	ldr	r3, [pc, #304]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f003 030c 	and.w	r3, r3, #12
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00b      	beq.n	8003732 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800371a:	4b49      	ldr	r3, [pc, #292]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f003 030c 	and.w	r3, r3, #12
 8003722:	2b08      	cmp	r3, #8
 8003724:	d11c      	bne.n	8003760 <HAL_RCC_OscConfig+0x18c>
 8003726:	4b46      	ldr	r3, [pc, #280]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d116      	bne.n	8003760 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003732:	4b43      	ldr	r3, [pc, #268]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d005      	beq.n	800374a <HAL_RCC_OscConfig+0x176>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d001      	beq.n	800374a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e1ba      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800374a:	4b3d      	ldr	r3, [pc, #244]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	4939      	ldr	r1, [pc, #228]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 800375a:	4313      	orrs	r3, r2
 800375c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800375e:	e03a      	b.n	80037d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d020      	beq.n	80037aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003768:	4b36      	ldr	r3, [pc, #216]	; (8003844 <HAL_RCC_OscConfig+0x270>)
 800376a:	2201      	movs	r2, #1
 800376c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800376e:	f7fd f909 	bl	8000984 <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003776:	f7fd f905 	bl	8000984 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e19b      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003788:	4b2d      	ldr	r3, [pc, #180]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0f0      	beq.n	8003776 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003794:	4b2a      	ldr	r3, [pc, #168]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	4927      	ldr	r1, [pc, #156]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	600b      	str	r3, [r1, #0]
 80037a8:	e015      	b.n	80037d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037aa:	4b26      	ldr	r3, [pc, #152]	; (8003844 <HAL_RCC_OscConfig+0x270>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b0:	f7fd f8e8 	bl	8000984 <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037b8:	f7fd f8e4 	bl	8000984 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e17a      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ca:	4b1d      	ldr	r3, [pc, #116]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1f0      	bne.n	80037b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d03a      	beq.n	8003858 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d019      	beq.n	800381e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037ea:	4b17      	ldr	r3, [pc, #92]	; (8003848 <HAL_RCC_OscConfig+0x274>)
 80037ec:	2201      	movs	r2, #1
 80037ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037f0:	f7fd f8c8 	bl	8000984 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037f8:	f7fd f8c4 	bl	8000984 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e15a      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800380a:	4b0d      	ldr	r3, [pc, #52]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 800380c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0f0      	beq.n	80037f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003816:	2001      	movs	r0, #1
 8003818:	f000 fad8 	bl	8003dcc <RCC_Delay>
 800381c:	e01c      	b.n	8003858 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800381e:	4b0a      	ldr	r3, [pc, #40]	; (8003848 <HAL_RCC_OscConfig+0x274>)
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003824:	f7fd f8ae 	bl	8000984 <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800382a:	e00f      	b.n	800384c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800382c:	f7fd f8aa 	bl	8000984 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d908      	bls.n	800384c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e140      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4ec>
 800383e:	bf00      	nop
 8003840:	40021000 	.word	0x40021000
 8003844:	42420000 	.word	0x42420000
 8003848:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800384c:	4b9e      	ldr	r3, [pc, #632]	; (8003ac8 <HAL_RCC_OscConfig+0x4f4>)
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1e9      	bne.n	800382c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 80a6 	beq.w	80039b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003866:	2300      	movs	r3, #0
 8003868:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800386a:	4b97      	ldr	r3, [pc, #604]	; (8003ac8 <HAL_RCC_OscConfig+0x4f4>)
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10d      	bne.n	8003892 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003876:	4b94      	ldr	r3, [pc, #592]	; (8003ac8 <HAL_RCC_OscConfig+0x4f4>)
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	4a93      	ldr	r2, [pc, #588]	; (8003ac8 <HAL_RCC_OscConfig+0x4f4>)
 800387c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003880:	61d3      	str	r3, [r2, #28]
 8003882:	4b91      	ldr	r3, [pc, #580]	; (8003ac8 <HAL_RCC_OscConfig+0x4f4>)
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800388a:	60bb      	str	r3, [r7, #8]
 800388c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800388e:	2301      	movs	r3, #1
 8003890:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003892:	4b8e      	ldr	r3, [pc, #568]	; (8003acc <HAL_RCC_OscConfig+0x4f8>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389a:	2b00      	cmp	r3, #0
 800389c:	d118      	bne.n	80038d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800389e:	4b8b      	ldr	r3, [pc, #556]	; (8003acc <HAL_RCC_OscConfig+0x4f8>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a8a      	ldr	r2, [pc, #552]	; (8003acc <HAL_RCC_OscConfig+0x4f8>)
 80038a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038aa:	f7fd f86b 	bl	8000984 <HAL_GetTick>
 80038ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b0:	e008      	b.n	80038c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038b2:	f7fd f867 	bl	8000984 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b64      	cmp	r3, #100	; 0x64
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e0fd      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c4:	4b81      	ldr	r3, [pc, #516]	; (8003acc <HAL_RCC_OscConfig+0x4f8>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0f0      	beq.n	80038b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d106      	bne.n	80038e6 <HAL_RCC_OscConfig+0x312>
 80038d8:	4b7b      	ldr	r3, [pc, #492]	; (8003ac8 <HAL_RCC_OscConfig+0x4f4>)
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	4a7a      	ldr	r2, [pc, #488]	; (8003ac8 <HAL_RCC_OscConfig+0x4f4>)
 80038de:	f043 0301 	orr.w	r3, r3, #1
 80038e2:	6213      	str	r3, [r2, #32]
 80038e4:	e02d      	b.n	8003942 <HAL_RCC_OscConfig+0x36e>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10c      	bne.n	8003908 <HAL_RCC_OscConfig+0x334>
 80038ee:	4b76      	ldr	r3, [pc, #472]	; (8003ac8 <HAL_RCC_OscConfig+0x4f4>)
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	4a75      	ldr	r2, [pc, #468]	; (8003ac8 <HAL_RCC_OscConfig+0x4f4>)
 80038f4:	f023 0301 	bic.w	r3, r3, #1
 80038f8:	6213      	str	r3, [r2, #32]
 80038fa:	4b73      	ldr	r3, [pc, #460]	; (8003ac8 <HAL_RCC_OscConfig+0x4f4>)
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	4a72      	ldr	r2, [pc, #456]	; (8003ac8 <HAL_RCC_OscConfig+0x4f4>)
 8003900:	f023 0304 	bic.w	r3, r3, #4
 8003904:	6213      	str	r3, [r2, #32]
 8003906:	e01c      	b.n	8003942 <HAL_RCC_OscConfig+0x36e>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	2b05      	cmp	r3, #5
 800390e:	d10c      	bne.n	800392a <HAL_RCC_OscConfig+0x356>
 8003910:	4b6d      	ldr	r3, [pc, #436]	; (8003ac8 <HAL_RCC_OscConfig+0x4f4>)
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	4a6c      	ldr	r2, [pc, #432]	; (8003ac8 <HAL_RCC_OscConfig+0x4f4>)
 8003916:	f043 0304 	orr.w	r3, r3, #4
 800391a:	6213      	str	r3, [r2, #32]
 800391c:	4b6a      	ldr	r3, [pc, #424]	; (8003ac8 <HAL_RCC_OscConfig+0x4f4>)
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	4a69      	ldr	r2, [pc, #420]	; (8003ac8 <HAL_RCC_OscConfig+0x4f4>)
 8003922:	f043 0301 	orr.w	r3, r3, #1
 8003926:	6213      	str	r3, [r2, #32]
 8003928:	e00b      	b.n	8003942 <HAL_RCC_OscConfig+0x36e>
 800392a:	4b67      	ldr	r3, [pc, #412]	; (8003ac8 <HAL_RCC_OscConfig+0x4f4>)
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	4a66      	ldr	r2, [pc, #408]	; (8003ac8 <HAL_RCC_OscConfig+0x4f4>)
 8003930:	f023 0301 	bic.w	r3, r3, #1
 8003934:	6213      	str	r3, [r2, #32]
 8003936:	4b64      	ldr	r3, [pc, #400]	; (8003ac8 <HAL_RCC_OscConfig+0x4f4>)
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	4a63      	ldr	r2, [pc, #396]	; (8003ac8 <HAL_RCC_OscConfig+0x4f4>)
 800393c:	f023 0304 	bic.w	r3, r3, #4
 8003940:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d015      	beq.n	8003976 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800394a:	f7fd f81b 	bl	8000984 <HAL_GetTick>
 800394e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003950:	e00a      	b.n	8003968 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003952:	f7fd f817 	bl	8000984 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003960:	4293      	cmp	r3, r2
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e0ab      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003968:	4b57      	ldr	r3, [pc, #348]	; (8003ac8 <HAL_RCC_OscConfig+0x4f4>)
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0ee      	beq.n	8003952 <HAL_RCC_OscConfig+0x37e>
 8003974:	e014      	b.n	80039a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003976:	f7fd f805 	bl	8000984 <HAL_GetTick>
 800397a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800397c:	e00a      	b.n	8003994 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800397e:	f7fd f801 	bl	8000984 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	f241 3288 	movw	r2, #5000	; 0x1388
 800398c:	4293      	cmp	r3, r2
 800398e:	d901      	bls.n	8003994 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e095      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003994:	4b4c      	ldr	r3, [pc, #304]	; (8003ac8 <HAL_RCC_OscConfig+0x4f4>)
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1ee      	bne.n	800397e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80039a0:	7dfb      	ldrb	r3, [r7, #23]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d105      	bne.n	80039b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039a6:	4b48      	ldr	r3, [pc, #288]	; (8003ac8 <HAL_RCC_OscConfig+0x4f4>)
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	4a47      	ldr	r2, [pc, #284]	; (8003ac8 <HAL_RCC_OscConfig+0x4f4>)
 80039ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 8081 	beq.w	8003abe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039bc:	4b42      	ldr	r3, [pc, #264]	; (8003ac8 <HAL_RCC_OscConfig+0x4f4>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f003 030c 	and.w	r3, r3, #12
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	d061      	beq.n	8003a8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	69db      	ldr	r3, [r3, #28]
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d146      	bne.n	8003a5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d0:	4b3f      	ldr	r3, [pc, #252]	; (8003ad0 <HAL_RCC_OscConfig+0x4fc>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d6:	f7fc ffd5 	bl	8000984 <HAL_GetTick>
 80039da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039dc:	e008      	b.n	80039f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039de:	f7fc ffd1 	bl	8000984 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d901      	bls.n	80039f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e067      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039f0:	4b35      	ldr	r3, [pc, #212]	; (8003ac8 <HAL_RCC_OscConfig+0x4f4>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1f0      	bne.n	80039de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a04:	d108      	bne.n	8003a18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a06:	4b30      	ldr	r3, [pc, #192]	; (8003ac8 <HAL_RCC_OscConfig+0x4f4>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	492d      	ldr	r1, [pc, #180]	; (8003ac8 <HAL_RCC_OscConfig+0x4f4>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a18:	4b2b      	ldr	r3, [pc, #172]	; (8003ac8 <HAL_RCC_OscConfig+0x4f4>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a19      	ldr	r1, [r3, #32]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a28:	430b      	orrs	r3, r1
 8003a2a:	4927      	ldr	r1, [pc, #156]	; (8003ac8 <HAL_RCC_OscConfig+0x4f4>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a30:	4b27      	ldr	r3, [pc, #156]	; (8003ad0 <HAL_RCC_OscConfig+0x4fc>)
 8003a32:	2201      	movs	r2, #1
 8003a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a36:	f7fc ffa5 	bl	8000984 <HAL_GetTick>
 8003a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a3c:	e008      	b.n	8003a50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a3e:	f7fc ffa1 	bl	8000984 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e037      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a50:	4b1d      	ldr	r3, [pc, #116]	; (8003ac8 <HAL_RCC_OscConfig+0x4f4>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0f0      	beq.n	8003a3e <HAL_RCC_OscConfig+0x46a>
 8003a5c:	e02f      	b.n	8003abe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a5e:	4b1c      	ldr	r3, [pc, #112]	; (8003ad0 <HAL_RCC_OscConfig+0x4fc>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a64:	f7fc ff8e 	bl	8000984 <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a6a:	e008      	b.n	8003a7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a6c:	f7fc ff8a 	bl	8000984 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e020      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a7e:	4b12      	ldr	r3, [pc, #72]	; (8003ac8 <HAL_RCC_OscConfig+0x4f4>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1f0      	bne.n	8003a6c <HAL_RCC_OscConfig+0x498>
 8003a8a:	e018      	b.n	8003abe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	69db      	ldr	r3, [r3, #28]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d101      	bne.n	8003a98 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e013      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a98:	4b0b      	ldr	r3, [pc, #44]	; (8003ac8 <HAL_RCC_OscConfig+0x4f4>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d106      	bne.n	8003aba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d001      	beq.n	8003abe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e000      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3718      	adds	r7, #24
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	40007000 	.word	0x40007000
 8003ad0:	42420060 	.word	0x42420060

08003ad4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d101      	bne.n	8003ae8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e0d0      	b.n	8003c8a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ae8:	4b6a      	ldr	r3, [pc, #424]	; (8003c94 <HAL_RCC_ClockConfig+0x1c0>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d910      	bls.n	8003b18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003af6:	4b67      	ldr	r3, [pc, #412]	; (8003c94 <HAL_RCC_ClockConfig+0x1c0>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f023 0207 	bic.w	r2, r3, #7
 8003afe:	4965      	ldr	r1, [pc, #404]	; (8003c94 <HAL_RCC_ClockConfig+0x1c0>)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b06:	4b63      	ldr	r3, [pc, #396]	; (8003c94 <HAL_RCC_ClockConfig+0x1c0>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0307 	and.w	r3, r3, #7
 8003b0e:	683a      	ldr	r2, [r7, #0]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d001      	beq.n	8003b18 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e0b8      	b.n	8003c8a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d020      	beq.n	8003b66 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d005      	beq.n	8003b3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b30:	4b59      	ldr	r3, [pc, #356]	; (8003c98 <HAL_RCC_ClockConfig+0x1c4>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	4a58      	ldr	r2, [pc, #352]	; (8003c98 <HAL_RCC_ClockConfig+0x1c4>)
 8003b36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b3a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0308 	and.w	r3, r3, #8
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d005      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b48:	4b53      	ldr	r3, [pc, #332]	; (8003c98 <HAL_RCC_ClockConfig+0x1c4>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	4a52      	ldr	r2, [pc, #328]	; (8003c98 <HAL_RCC_ClockConfig+0x1c4>)
 8003b4e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003b52:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b54:	4b50      	ldr	r3, [pc, #320]	; (8003c98 <HAL_RCC_ClockConfig+0x1c4>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	494d      	ldr	r1, [pc, #308]	; (8003c98 <HAL_RCC_ClockConfig+0x1c4>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d040      	beq.n	8003bf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d107      	bne.n	8003b8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b7a:	4b47      	ldr	r3, [pc, #284]	; (8003c98 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d115      	bne.n	8003bb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e07f      	b.n	8003c8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d107      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b92:	4b41      	ldr	r3, [pc, #260]	; (8003c98 <HAL_RCC_ClockConfig+0x1c4>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d109      	bne.n	8003bb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e073      	b.n	8003c8a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba2:	4b3d      	ldr	r3, [pc, #244]	; (8003c98 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e06b      	b.n	8003c8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bb2:	4b39      	ldr	r3, [pc, #228]	; (8003c98 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f023 0203 	bic.w	r2, r3, #3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	4936      	ldr	r1, [pc, #216]	; (8003c98 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bc4:	f7fc fede 	bl	8000984 <HAL_GetTick>
 8003bc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bca:	e00a      	b.n	8003be2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bcc:	f7fc feda 	bl	8000984 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e053      	b.n	8003c8a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003be2:	4b2d      	ldr	r3, [pc, #180]	; (8003c98 <HAL_RCC_ClockConfig+0x1c4>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f003 020c 	and.w	r2, r3, #12
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d1eb      	bne.n	8003bcc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bf4:	4b27      	ldr	r3, [pc, #156]	; (8003c94 <HAL_RCC_ClockConfig+0x1c0>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0307 	and.w	r3, r3, #7
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d210      	bcs.n	8003c24 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c02:	4b24      	ldr	r3, [pc, #144]	; (8003c94 <HAL_RCC_ClockConfig+0x1c0>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f023 0207 	bic.w	r2, r3, #7
 8003c0a:	4922      	ldr	r1, [pc, #136]	; (8003c94 <HAL_RCC_ClockConfig+0x1c0>)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c12:	4b20      	ldr	r3, [pc, #128]	; (8003c94 <HAL_RCC_ClockConfig+0x1c0>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0307 	and.w	r3, r3, #7
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d001      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e032      	b.n	8003c8a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0304 	and.w	r3, r3, #4
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d008      	beq.n	8003c42 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c30:	4b19      	ldr	r3, [pc, #100]	; (8003c98 <HAL_RCC_ClockConfig+0x1c4>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	4916      	ldr	r1, [pc, #88]	; (8003c98 <HAL_RCC_ClockConfig+0x1c4>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d009      	beq.n	8003c62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c4e:	4b12      	ldr	r3, [pc, #72]	; (8003c98 <HAL_RCC_ClockConfig+0x1c4>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	490e      	ldr	r1, [pc, #56]	; (8003c98 <HAL_RCC_ClockConfig+0x1c4>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c62:	f000 f821 	bl	8003ca8 <HAL_RCC_GetSysClockFreq>
 8003c66:	4602      	mov	r2, r0
 8003c68:	4b0b      	ldr	r3, [pc, #44]	; (8003c98 <HAL_RCC_ClockConfig+0x1c4>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	091b      	lsrs	r3, r3, #4
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	490a      	ldr	r1, [pc, #40]	; (8003c9c <HAL_RCC_ClockConfig+0x1c8>)
 8003c74:	5ccb      	ldrb	r3, [r1, r3]
 8003c76:	fa22 f303 	lsr.w	r3, r2, r3
 8003c7a:	4a09      	ldr	r2, [pc, #36]	; (8003ca0 <HAL_RCC_ClockConfig+0x1cc>)
 8003c7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c7e:	4b09      	ldr	r3, [pc, #36]	; (8003ca4 <HAL_RCC_ClockConfig+0x1d0>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7fc fe3c 	bl	8000900 <HAL_InitTick>

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	40022000 	.word	0x40022000
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	0800927c 	.word	0x0800927c
 8003ca0:	20000000 	.word	0x20000000
 8003ca4:	20000004 	.word	0x20000004

08003ca8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ca8:	b490      	push	{r4, r7}
 8003caa:	b08a      	sub	sp, #40	; 0x28
 8003cac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003cae:	4b2a      	ldr	r3, [pc, #168]	; (8003d58 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003cb0:	1d3c      	adds	r4, r7, #4
 8003cb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003cb8:	f240 2301 	movw	r3, #513	; 0x201
 8003cbc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61fb      	str	r3, [r7, #28]
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61bb      	str	r3, [r7, #24]
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cca:	2300      	movs	r3, #0
 8003ccc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003cd2:	4b22      	ldr	r3, [pc, #136]	; (8003d5c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	f003 030c 	and.w	r3, r3, #12
 8003cde:	2b04      	cmp	r3, #4
 8003ce0:	d002      	beq.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x40>
 8003ce2:	2b08      	cmp	r3, #8
 8003ce4:	d003      	beq.n	8003cee <HAL_RCC_GetSysClockFreq+0x46>
 8003ce6:	e02d      	b.n	8003d44 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ce8:	4b1d      	ldr	r3, [pc, #116]	; (8003d60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cea:	623b      	str	r3, [r7, #32]
      break;
 8003cec:	e02d      	b.n	8003d4a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	0c9b      	lsrs	r3, r3, #18
 8003cf2:	f003 030f 	and.w	r3, r3, #15
 8003cf6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003d00:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d013      	beq.n	8003d34 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d0c:	4b13      	ldr	r3, [pc, #76]	; (8003d5c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	0c5b      	lsrs	r3, r3, #17
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003d1a:	4413      	add	r3, r2
 8003d1c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003d20:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	4a0e      	ldr	r2, [pc, #56]	; (8003d60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d26:	fb02 f203 	mul.w	r2, r2, r3
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d30:	627b      	str	r3, [r7, #36]	; 0x24
 8003d32:	e004      	b.n	8003d3e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	4a0b      	ldr	r2, [pc, #44]	; (8003d64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d38:	fb02 f303 	mul.w	r3, r2, r3
 8003d3c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d40:	623b      	str	r3, [r7, #32]
      break;
 8003d42:	e002      	b.n	8003d4a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d44:	4b06      	ldr	r3, [pc, #24]	; (8003d60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d46:	623b      	str	r3, [r7, #32]
      break;
 8003d48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d4a:	6a3b      	ldr	r3, [r7, #32]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3728      	adds	r7, #40	; 0x28
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bc90      	pop	{r4, r7}
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	08009210 	.word	0x08009210
 8003d5c:	40021000 	.word	0x40021000
 8003d60:	007a1200 	.word	0x007a1200
 8003d64:	003d0900 	.word	0x003d0900

08003d68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d6c:	4b02      	ldr	r3, [pc, #8]	; (8003d78 <HAL_RCC_GetHCLKFreq+0x10>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bc80      	pop	{r7}
 8003d76:	4770      	bx	lr
 8003d78:	20000000 	.word	0x20000000

08003d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d80:	f7ff fff2 	bl	8003d68 <HAL_RCC_GetHCLKFreq>
 8003d84:	4602      	mov	r2, r0
 8003d86:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	0a1b      	lsrs	r3, r3, #8
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	4903      	ldr	r1, [pc, #12]	; (8003da0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d92:	5ccb      	ldrb	r3, [r1, r3]
 8003d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40021000 	.word	0x40021000
 8003da0:	0800928c 	.word	0x0800928c

08003da4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003da8:	f7ff ffde 	bl	8003d68 <HAL_RCC_GetHCLKFreq>
 8003dac:	4602      	mov	r2, r0
 8003dae:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	0adb      	lsrs	r3, r3, #11
 8003db4:	f003 0307 	and.w	r3, r3, #7
 8003db8:	4903      	ldr	r1, [pc, #12]	; (8003dc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dba:	5ccb      	ldrb	r3, [r1, r3]
 8003dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	40021000 	.word	0x40021000
 8003dc8:	0800928c 	.word	0x0800928c

08003dcc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003dd4:	4b0a      	ldr	r3, [pc, #40]	; (8003e00 <RCC_Delay+0x34>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a0a      	ldr	r2, [pc, #40]	; (8003e04 <RCC_Delay+0x38>)
 8003dda:	fba2 2303 	umull	r2, r3, r2, r3
 8003dde:	0a5b      	lsrs	r3, r3, #9
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	fb02 f303 	mul.w	r3, r2, r3
 8003de6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003de8:	bf00      	nop
  }
  while (Delay --);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	1e5a      	subs	r2, r3, #1
 8003dee:	60fa      	str	r2, [r7, #12]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1f9      	bne.n	8003de8 <RCC_Delay+0x1c>
}
 8003df4:	bf00      	nop
 8003df6:	bf00      	nop
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr
 8003e00:	20000000 	.word	0x20000000
 8003e04:	10624dd3 	.word	0x10624dd3

08003e08 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	613b      	str	r3, [r7, #16]
 8003e14:	2300      	movs	r3, #0
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d07d      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003e24:	2300      	movs	r3, #0
 8003e26:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e28:	4b4f      	ldr	r3, [pc, #316]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e2a:	69db      	ldr	r3, [r3, #28]
 8003e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d10d      	bne.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e34:	4b4c      	ldr	r3, [pc, #304]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	4a4b      	ldr	r2, [pc, #300]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e3e:	61d3      	str	r3, [r2, #28]
 8003e40:	4b49      	ldr	r3, [pc, #292]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e42:	69db      	ldr	r3, [r3, #28]
 8003e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e48:	60bb      	str	r3, [r7, #8]
 8003e4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e50:	4b46      	ldr	r3, [pc, #280]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d118      	bne.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e5c:	4b43      	ldr	r3, [pc, #268]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a42      	ldr	r2, [pc, #264]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e68:	f7fc fd8c 	bl	8000984 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e6e:	e008      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e70:	f7fc fd88 	bl	8000984 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b64      	cmp	r3, #100	; 0x64
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e06d      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e82:	4b3a      	ldr	r3, [pc, #232]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0f0      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e8e:	4b36      	ldr	r3, [pc, #216]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e96:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d02e      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d027      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003eac:	4b2e      	ldr	r3, [pc, #184]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eb4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003eb6:	4b2e      	ldr	r3, [pc, #184]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003eb8:	2201      	movs	r2, #1
 8003eba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ebc:	4b2c      	ldr	r3, [pc, #176]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ec2:	4a29      	ldr	r2, [pc, #164]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d014      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed2:	f7fc fd57 	bl	8000984 <HAL_GetTick>
 8003ed6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed8:	e00a      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eda:	f7fc fd53 	bl	8000984 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e036      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef0:	4b1d      	ldr	r3, [pc, #116]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d0ee      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003efc:	4b1a      	ldr	r3, [pc, #104]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	4917      	ldr	r1, [pc, #92]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f0e:	7dfb      	ldrb	r3, [r7, #23]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d105      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f14:	4b14      	ldr	r3, [pc, #80]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f16:	69db      	ldr	r3, [r3, #28]
 8003f18:	4a13      	ldr	r2, [pc, #76]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f1e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d008      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f2c:	4b0e      	ldr	r3, [pc, #56]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	490b      	ldr	r1, [pc, #44]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0310 	and.w	r3, r3, #16
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d008      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f4a:	4b07      	ldr	r3, [pc, #28]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	4904      	ldr	r1, [pc, #16]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3718      	adds	r7, #24
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	40007000 	.word	0x40007000
 8003f70:	42420440 	.word	0x42420440

08003f74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e03f      	b.n	8004006 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d106      	bne.n	8003fa0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f7fc fbb6 	bl	800070c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2224      	movs	r2, #36	; 0x24
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68da      	ldr	r2, [r3, #12]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 f905 	bl	80041c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	691a      	ldr	r2, [r3, #16]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	695a      	ldr	r2, [r3, #20]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68da      	ldr	r2, [r3, #12]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b08a      	sub	sp, #40	; 0x28
 8004012:	af02      	add	r7, sp, #8
 8004014:	60f8      	str	r0, [r7, #12]
 8004016:	60b9      	str	r1, [r7, #8]
 8004018:	603b      	str	r3, [r7, #0]
 800401a:	4613      	mov	r3, r2
 800401c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800401e:	2300      	movs	r3, #0
 8004020:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b20      	cmp	r3, #32
 800402c:	d17c      	bne.n	8004128 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d002      	beq.n	800403a <HAL_UART_Transmit+0x2c>
 8004034:	88fb      	ldrh	r3, [r7, #6]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e075      	b.n	800412a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004044:	2b01      	cmp	r3, #1
 8004046:	d101      	bne.n	800404c <HAL_UART_Transmit+0x3e>
 8004048:	2302      	movs	r3, #2
 800404a:	e06e      	b.n	800412a <HAL_UART_Transmit+0x11c>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2221      	movs	r2, #33	; 0x21
 800405e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004062:	f7fc fc8f 	bl	8000984 <HAL_GetTick>
 8004066:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	88fa      	ldrh	r2, [r7, #6]
 800406c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	88fa      	ldrh	r2, [r7, #6]
 8004072:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800407c:	d108      	bne.n	8004090 <HAL_UART_Transmit+0x82>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d104      	bne.n	8004090 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004086:	2300      	movs	r3, #0
 8004088:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	61bb      	str	r3, [r7, #24]
 800408e:	e003      	b.n	8004098 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004094:	2300      	movs	r3, #0
 8004096:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80040a0:	e02a      	b.n	80040f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	2200      	movs	r2, #0
 80040aa:	2180      	movs	r1, #128	; 0x80
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f000 f840 	bl	8004132 <UART_WaitOnFlagUntilTimeout>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d001      	beq.n	80040bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e036      	b.n	800412a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10b      	bne.n	80040da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	881b      	ldrh	r3, [r3, #0]
 80040c6:	461a      	mov	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	3302      	adds	r3, #2
 80040d6:	61bb      	str	r3, [r7, #24]
 80040d8:	e007      	b.n	80040ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	781a      	ldrb	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	3301      	adds	r3, #1
 80040e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	3b01      	subs	r3, #1
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1cf      	bne.n	80040a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	2200      	movs	r2, #0
 800410a:	2140      	movs	r1, #64	; 0x40
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f000 f810 	bl	8004132 <UART_WaitOnFlagUntilTimeout>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e006      	b.n	800412a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004124:	2300      	movs	r3, #0
 8004126:	e000      	b.n	800412a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004128:	2302      	movs	r3, #2
  }
}
 800412a:	4618      	mov	r0, r3
 800412c:	3720      	adds	r7, #32
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b084      	sub	sp, #16
 8004136:	af00      	add	r7, sp, #0
 8004138:	60f8      	str	r0, [r7, #12]
 800413a:	60b9      	str	r1, [r7, #8]
 800413c:	603b      	str	r3, [r7, #0]
 800413e:	4613      	mov	r3, r2
 8004140:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004142:	e02c      	b.n	800419e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800414a:	d028      	beq.n	800419e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d007      	beq.n	8004162 <UART_WaitOnFlagUntilTimeout+0x30>
 8004152:	f7fc fc17 	bl	8000984 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	429a      	cmp	r2, r3
 8004160:	d21d      	bcs.n	800419e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004170:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	695a      	ldr	r2, [r3, #20]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 0201 	bic.w	r2, r2, #1
 8004180:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2220      	movs	r2, #32
 8004186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2220      	movs	r2, #32
 800418e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e00f      	b.n	80041be <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	4013      	ands	r3, r2
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	bf0c      	ite	eq
 80041ae:	2301      	moveq	r3, #1
 80041b0:	2300      	movne	r3, #0
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	461a      	mov	r2, r3
 80041b6:	79fb      	ldrb	r3, [r7, #7]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d0c3      	beq.n	8004144 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
	...

080041c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68da      	ldr	r2, [r3, #12]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689a      	ldr	r2, [r3, #8]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004202:	f023 030c 	bic.w	r3, r3, #12
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6812      	ldr	r2, [r2, #0]
 800420a:	68b9      	ldr	r1, [r7, #8]
 800420c:	430b      	orrs	r3, r1
 800420e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	699a      	ldr	r2, [r3, #24]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a2c      	ldr	r2, [pc, #176]	; (80042dc <UART_SetConfig+0x114>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d103      	bne.n	8004238 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004230:	f7ff fdb8 	bl	8003da4 <HAL_RCC_GetPCLK2Freq>
 8004234:	60f8      	str	r0, [r7, #12]
 8004236:	e002      	b.n	800423e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004238:	f7ff fda0 	bl	8003d7c <HAL_RCC_GetPCLK1Freq>
 800423c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	4613      	mov	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	009a      	lsls	r2, r3, #2
 8004248:	441a      	add	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	fbb2 f3f3 	udiv	r3, r2, r3
 8004254:	4a22      	ldr	r2, [pc, #136]	; (80042e0 <UART_SetConfig+0x118>)
 8004256:	fba2 2303 	umull	r2, r3, r2, r3
 800425a:	095b      	lsrs	r3, r3, #5
 800425c:	0119      	lsls	r1, r3, #4
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	4613      	mov	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4413      	add	r3, r2
 8004266:	009a      	lsls	r2, r3, #2
 8004268:	441a      	add	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	fbb2 f2f3 	udiv	r2, r2, r3
 8004274:	4b1a      	ldr	r3, [pc, #104]	; (80042e0 <UART_SetConfig+0x118>)
 8004276:	fba3 0302 	umull	r0, r3, r3, r2
 800427a:	095b      	lsrs	r3, r3, #5
 800427c:	2064      	movs	r0, #100	; 0x64
 800427e:	fb00 f303 	mul.w	r3, r0, r3
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	011b      	lsls	r3, r3, #4
 8004286:	3332      	adds	r3, #50	; 0x32
 8004288:	4a15      	ldr	r2, [pc, #84]	; (80042e0 <UART_SetConfig+0x118>)
 800428a:	fba2 2303 	umull	r2, r3, r2, r3
 800428e:	095b      	lsrs	r3, r3, #5
 8004290:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004294:	4419      	add	r1, r3
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	4613      	mov	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4413      	add	r3, r2
 800429e:	009a      	lsls	r2, r3, #2
 80042a0:	441a      	add	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80042ac:	4b0c      	ldr	r3, [pc, #48]	; (80042e0 <UART_SetConfig+0x118>)
 80042ae:	fba3 0302 	umull	r0, r3, r3, r2
 80042b2:	095b      	lsrs	r3, r3, #5
 80042b4:	2064      	movs	r0, #100	; 0x64
 80042b6:	fb00 f303 	mul.w	r3, r0, r3
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	011b      	lsls	r3, r3, #4
 80042be:	3332      	adds	r3, #50	; 0x32
 80042c0:	4a07      	ldr	r2, [pc, #28]	; (80042e0 <UART_SetConfig+0x118>)
 80042c2:	fba2 2303 	umull	r2, r3, r2, r3
 80042c6:	095b      	lsrs	r3, r3, #5
 80042c8:	f003 020f 	and.w	r2, r3, #15
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	440a      	add	r2, r1
 80042d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80042d4:	bf00      	nop
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	40013800 	.word	0x40013800
 80042e0:	51eb851f 	.word	0x51eb851f

080042e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80042e4:	b084      	sub	sp, #16
 80042e6:	b480      	push	{r7}
 80042e8:	b083      	sub	sp, #12
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
 80042ee:	f107 0014 	add.w	r0, r7, #20
 80042f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bc80      	pop	{r7}
 8004300:	b004      	add	sp, #16
 8004302:	4770      	bx	lr

08004304 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004314:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004318:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	b29a      	uxth	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3714      	adds	r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	bc80      	pop	{r7}
 800432e:	4770      	bx	lr

08004330 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004338:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800433c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004344:	b29a      	uxth	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	b29b      	uxth	r3, r3
 800434a:	43db      	mvns	r3, r3
 800434c:	b29b      	uxth	r3, r3
 800434e:	4013      	ands	r3, r2
 8004350:	b29a      	uxth	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3714      	adds	r7, #20
 800435e:	46bd      	mov	sp, r7
 8004360:	bc80      	pop	{r7}
 8004362:	4770      	bx	lr

08004364 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	460b      	mov	r3, r1
 800436e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	bc80      	pop	{r7}
 800437a:	4770      	bx	lr

0800437c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800437c:	b084      	sub	sp, #16
 800437e:	b480      	push	{r7}
 8004380:	b083      	sub	sp, #12
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
 8004386:	f107 0014 	add.w	r0, r7, #20
 800438a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bc80      	pop	{r7}
 80043b8:	b004      	add	sp, #16
 80043ba:	4770      	bx	lr

080043bc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80043bc:	b480      	push	{r7}
 80043be:	b09b      	sub	sp, #108	; 0x6c
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80043c6:	2300      	movs	r3, #0
 80043c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4413      	add	r3, r2
 80043d6:	881b      	ldrh	r3, [r3, #0]
 80043d8:	b29b      	uxth	r3, r3
 80043da:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80043de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043e2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	78db      	ldrb	r3, [r3, #3]
 80043ea:	2b03      	cmp	r3, #3
 80043ec:	d81f      	bhi.n	800442e <USB_ActivateEndpoint+0x72>
 80043ee:	a201      	add	r2, pc, #4	; (adr r2, 80043f4 <USB_ActivateEndpoint+0x38>)
 80043f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f4:	08004405 	.word	0x08004405
 80043f8:	08004421 	.word	0x08004421
 80043fc:	08004437 	.word	0x08004437
 8004400:	08004413 	.word	0x08004413
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004404:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004408:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800440c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004410:	e012      	b.n	8004438 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004412:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004416:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800441a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800441e:	e00b      	b.n	8004438 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004420:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004424:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004428:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800442c:	e004      	b.n	8004438 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004434:	e000      	b.n	8004438 <USB_ActivateEndpoint+0x7c>
      break;
 8004436:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	441a      	add	r2, r3
 8004442:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004446:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800444a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800444e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004456:	b29b      	uxth	r3, r3
 8004458:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4413      	add	r3, r2
 8004464:	881b      	ldrh	r3, [r3, #0]
 8004466:	b29b      	uxth	r3, r3
 8004468:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800446c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004470:	b29a      	uxth	r2, r3
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	b29b      	uxth	r3, r3
 8004478:	4313      	orrs	r3, r2
 800447a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	441a      	add	r2, r3
 8004488:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800448c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004490:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004494:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800449c:	b29b      	uxth	r3, r3
 800449e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	7b1b      	ldrb	r3, [r3, #12]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f040 8149 	bne.w	800473c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	785b      	ldrb	r3, [r3, #1]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 8084 	beq.w	80045bc <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	617b      	str	r3, [r7, #20]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044be:	b29b      	uxth	r3, r3
 80044c0:	461a      	mov	r2, r3
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	4413      	add	r3, r2
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	011a      	lsls	r2, r3, #4
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	4413      	add	r3, r2
 80044d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044d6:	613b      	str	r3, [r7, #16]
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	88db      	ldrh	r3, [r3, #6]
 80044dc:	085b      	lsrs	r3, r3, #1
 80044de:	b29b      	uxth	r3, r3
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4413      	add	r3, r2
 80044f2:	881b      	ldrh	r3, [r3, #0]
 80044f4:	81fb      	strh	r3, [r7, #14]
 80044f6:	89fb      	ldrh	r3, [r7, #14]
 80044f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d01b      	beq.n	8004538 <USB_ActivateEndpoint+0x17c>
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	4413      	add	r3, r2
 800450a:	881b      	ldrh	r3, [r3, #0]
 800450c:	b29b      	uxth	r3, r3
 800450e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004516:	81bb      	strh	r3, [r7, #12]
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	441a      	add	r2, r3
 8004522:	89bb      	ldrh	r3, [r7, #12]
 8004524:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004528:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800452c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004530:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004534:	b29b      	uxth	r3, r3
 8004536:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	78db      	ldrb	r3, [r3, #3]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d020      	beq.n	8004582 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4413      	add	r3, r2
 800454a:	881b      	ldrh	r3, [r3, #0]
 800454c:	b29b      	uxth	r3, r3
 800454e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004552:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004556:	813b      	strh	r3, [r7, #8]
 8004558:	893b      	ldrh	r3, [r7, #8]
 800455a:	f083 0320 	eor.w	r3, r3, #32
 800455e:	813b      	strh	r3, [r7, #8]
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	441a      	add	r2, r3
 800456a:	893b      	ldrh	r3, [r7, #8]
 800456c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004570:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004574:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800457c:	b29b      	uxth	r3, r3
 800457e:	8013      	strh	r3, [r2, #0]
 8004580:	e27f      	b.n	8004a82 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4413      	add	r3, r2
 800458c:	881b      	ldrh	r3, [r3, #0]
 800458e:	b29b      	uxth	r3, r3
 8004590:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004594:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004598:	817b      	strh	r3, [r7, #10]
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	441a      	add	r2, r3
 80045a4:	897b      	ldrh	r3, [r7, #10]
 80045a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	8013      	strh	r3, [r2, #0]
 80045ba:	e262      	b.n	8004a82 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	461a      	mov	r2, r3
 80045ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045cc:	4413      	add	r3, r2
 80045ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	011a      	lsls	r2, r3, #4
 80045d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d8:	4413      	add	r3, r2
 80045da:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80045de:	62bb      	str	r3, [r7, #40]	; 0x28
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	88db      	ldrh	r3, [r3, #6]
 80045e4:	085b      	lsrs	r3, r3, #1
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ee:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	627b      	str	r3, [r7, #36]	; 0x24
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	461a      	mov	r2, r3
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	4413      	add	r3, r2
 8004602:	627b      	str	r3, [r7, #36]	; 0x24
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	011a      	lsls	r2, r3, #4
 800460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460c:	4413      	add	r3, r2
 800460e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004612:	623b      	str	r3, [r7, #32]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d112      	bne.n	8004642 <USB_ActivateEndpoint+0x286>
 800461c:	6a3b      	ldr	r3, [r7, #32]
 800461e:	881b      	ldrh	r3, [r3, #0]
 8004620:	b29b      	uxth	r3, r3
 8004622:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004626:	b29a      	uxth	r2, r3
 8004628:	6a3b      	ldr	r3, [r7, #32]
 800462a:	801a      	strh	r2, [r3, #0]
 800462c:	6a3b      	ldr	r3, [r7, #32]
 800462e:	881b      	ldrh	r3, [r3, #0]
 8004630:	b29b      	uxth	r3, r3
 8004632:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004636:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800463a:	b29a      	uxth	r2, r3
 800463c:	6a3b      	ldr	r3, [r7, #32]
 800463e:	801a      	strh	r2, [r3, #0]
 8004640:	e02f      	b.n	80046a2 <USB_ActivateEndpoint+0x2e6>
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	2b3e      	cmp	r3, #62	; 0x3e
 8004648:	d813      	bhi.n	8004672 <USB_ActivateEndpoint+0x2b6>
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	085b      	lsrs	r3, r3, #1
 8004650:	663b      	str	r3, [r7, #96]	; 0x60
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b00      	cmp	r3, #0
 800465c:	d002      	beq.n	8004664 <USB_ActivateEndpoint+0x2a8>
 800465e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004660:	3301      	adds	r3, #1
 8004662:	663b      	str	r3, [r7, #96]	; 0x60
 8004664:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004666:	b29b      	uxth	r3, r3
 8004668:	029b      	lsls	r3, r3, #10
 800466a:	b29a      	uxth	r2, r3
 800466c:	6a3b      	ldr	r3, [r7, #32]
 800466e:	801a      	strh	r2, [r3, #0]
 8004670:	e017      	b.n	80046a2 <USB_ActivateEndpoint+0x2e6>
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	095b      	lsrs	r3, r3, #5
 8004678:	663b      	str	r3, [r7, #96]	; 0x60
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	f003 031f 	and.w	r3, r3, #31
 8004682:	2b00      	cmp	r3, #0
 8004684:	d102      	bne.n	800468c <USB_ActivateEndpoint+0x2d0>
 8004686:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004688:	3b01      	subs	r3, #1
 800468a:	663b      	str	r3, [r7, #96]	; 0x60
 800468c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800468e:	b29b      	uxth	r3, r3
 8004690:	029b      	lsls	r3, r3, #10
 8004692:	b29b      	uxth	r3, r3
 8004694:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004698:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800469c:	b29a      	uxth	r2, r3
 800469e:	6a3b      	ldr	r3, [r7, #32]
 80046a0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4413      	add	r3, r2
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	83fb      	strh	r3, [r7, #30]
 80046b0:	8bfb      	ldrh	r3, [r7, #30]
 80046b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d01b      	beq.n	80046f2 <USB_ActivateEndpoint+0x336>
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4413      	add	r3, r2
 80046c4:	881b      	ldrh	r3, [r3, #0]
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046d0:	83bb      	strh	r3, [r7, #28]
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	441a      	add	r2, r3
 80046dc:	8bbb      	ldrh	r3, [r7, #28]
 80046de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	4413      	add	r3, r2
 80046fc:	881b      	ldrh	r3, [r3, #0]
 80046fe:	b29b      	uxth	r3, r3
 8004700:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004708:	837b      	strh	r3, [r7, #26]
 800470a:	8b7b      	ldrh	r3, [r7, #26]
 800470c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004710:	837b      	strh	r3, [r7, #26]
 8004712:	8b7b      	ldrh	r3, [r7, #26]
 8004714:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004718:	837b      	strh	r3, [r7, #26]
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	441a      	add	r2, r3
 8004724:	8b7b      	ldrh	r3, [r7, #26]
 8004726:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800472a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800472e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004736:	b29b      	uxth	r3, r3
 8004738:	8013      	strh	r3, [r2, #0]
 800473a:	e1a2      	b.n	8004a82 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	881b      	ldrh	r3, [r3, #0]
 8004748:	b29b      	uxth	r3, r3
 800474a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800474e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004752:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	441a      	add	r2, r3
 8004760:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004764:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004768:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800476c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004774:	b29b      	uxth	r3, r3
 8004776:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	65bb      	str	r3, [r7, #88]	; 0x58
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004782:	b29b      	uxth	r3, r3
 8004784:	461a      	mov	r2, r3
 8004786:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004788:	4413      	add	r3, r2
 800478a:	65bb      	str	r3, [r7, #88]	; 0x58
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	011a      	lsls	r2, r3, #4
 8004792:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004794:	4413      	add	r3, r2
 8004796:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800479a:	657b      	str	r3, [r7, #84]	; 0x54
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	891b      	ldrh	r3, [r3, #8]
 80047a0:	085b      	lsrs	r3, r3, #1
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	005b      	lsls	r3, r3, #1
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047aa:	801a      	strh	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	653b      	str	r3, [r7, #80]	; 0x50
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	461a      	mov	r2, r3
 80047ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047bc:	4413      	add	r3, r2
 80047be:	653b      	str	r3, [r7, #80]	; 0x50
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	011a      	lsls	r2, r3, #4
 80047c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80047ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	895b      	ldrh	r3, [r3, #10]
 80047d4:	085b      	lsrs	r3, r3, #1
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	b29a      	uxth	r2, r3
 80047dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047de:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	785b      	ldrb	r3, [r3, #1]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f040 8091 	bne.w	800490c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	4413      	add	r3, r2
 80047f4:	881b      	ldrh	r3, [r3, #0]
 80047f6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80047f8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80047fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d01b      	beq.n	800483a <USB_ActivateEndpoint+0x47e>
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	4413      	add	r3, r2
 800480c:	881b      	ldrh	r3, [r3, #0]
 800480e:	b29b      	uxth	r3, r3
 8004810:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004818:	877b      	strh	r3, [r7, #58]	; 0x3a
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	441a      	add	r2, r3
 8004824:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004826:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800482a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800482e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004836:	b29b      	uxth	r3, r3
 8004838:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	4413      	add	r3, r2
 8004844:	881b      	ldrh	r3, [r3, #0]
 8004846:	873b      	strh	r3, [r7, #56]	; 0x38
 8004848:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800484a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484e:	2b00      	cmp	r3, #0
 8004850:	d01b      	beq.n	800488a <USB_ActivateEndpoint+0x4ce>
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	4413      	add	r3, r2
 800485c:	881b      	ldrh	r3, [r3, #0]
 800485e:	b29b      	uxth	r3, r3
 8004860:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004864:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004868:	86fb      	strh	r3, [r7, #54]	; 0x36
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	441a      	add	r2, r3
 8004874:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004876:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800487a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800487e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004882:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004886:	b29b      	uxth	r3, r3
 8004888:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	881b      	ldrh	r3, [r3, #0]
 8004896:	b29b      	uxth	r3, r3
 8004898:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800489c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048a0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80048a2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80048a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80048a8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80048aa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80048ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80048b0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	441a      	add	r2, r3
 80048bc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80048be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	4413      	add	r3, r2
 80048dc:	881b      	ldrh	r3, [r3, #0]
 80048de:	b29b      	uxth	r3, r3
 80048e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048e8:	867b      	strh	r3, [r7, #50]	; 0x32
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	441a      	add	r2, r3
 80048f4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80048f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004906:	b29b      	uxth	r3, r3
 8004908:	8013      	strh	r3, [r2, #0]
 800490a:	e0ba      	b.n	8004a82 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4413      	add	r3, r2
 8004916:	881b      	ldrh	r3, [r3, #0]
 8004918:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800491c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004920:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d01d      	beq.n	8004964 <USB_ActivateEndpoint+0x5a8>
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4413      	add	r3, r2
 8004932:	881b      	ldrh	r3, [r3, #0]
 8004934:	b29b      	uxth	r3, r3
 8004936:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800493a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800493e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	441a      	add	r2, r3
 800494c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004950:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004954:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004958:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800495c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004960:	b29b      	uxth	r3, r3
 8004962:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	881b      	ldrh	r3, [r3, #0]
 8004970:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004974:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497c:	2b00      	cmp	r3, #0
 800497e:	d01d      	beq.n	80049bc <USB_ActivateEndpoint+0x600>
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4413      	add	r3, r2
 800498a:	881b      	ldrh	r3, [r3, #0]
 800498c:	b29b      	uxth	r3, r3
 800498e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004996:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	441a      	add	r2, r3
 80049a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80049a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	78db      	ldrb	r3, [r3, #3]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d024      	beq.n	8004a0e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4413      	add	r3, r2
 80049ce:	881b      	ldrh	r3, [r3, #0]
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049da:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80049de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80049e2:	f083 0320 	eor.w	r3, r3, #32
 80049e6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	441a      	add	r2, r3
 80049f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80049f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	8013      	strh	r3, [r2, #0]
 8004a0c:	e01d      	b.n	8004a4a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	881b      	ldrh	r3, [r3, #0]
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a24:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	441a      	add	r2, r3
 8004a32:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004a36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	4413      	add	r3, r2
 8004a54:	881b      	ldrh	r3, [r3, #0]
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a60:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	441a      	add	r2, r3
 8004a6c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004a6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004a82:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	376c      	adds	r7, #108	; 0x6c
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bc80      	pop	{r7}
 8004a8e:	4770      	bx	lr

08004a90 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b08d      	sub	sp, #52	; 0x34
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	7b1b      	ldrb	r3, [r3, #12]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f040 808e 	bne.w	8004bc0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	785b      	ldrb	r3, [r3, #1]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d044      	beq.n	8004b36 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	4413      	add	r3, r2
 8004ab6:	881b      	ldrh	r3, [r3, #0]
 8004ab8:	81bb      	strh	r3, [r7, #12]
 8004aba:	89bb      	ldrh	r3, [r7, #12]
 8004abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d01b      	beq.n	8004afc <USB_DeactivateEndpoint+0x6c>
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4413      	add	r3, r2
 8004ace:	881b      	ldrh	r3, [r3, #0]
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ada:	817b      	strh	r3, [r7, #10]
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	441a      	add	r2, r3
 8004ae6:	897b      	ldrh	r3, [r7, #10]
 8004ae8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004af0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004af4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	881b      	ldrh	r3, [r3, #0]
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b12:	813b      	strh	r3, [r7, #8]
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	441a      	add	r2, r3
 8004b1e:	893b      	ldrh	r3, [r7, #8]
 8004b20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	8013      	strh	r3, [r2, #0]
 8004b34:	e192      	b.n	8004e5c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4413      	add	r3, r2
 8004b40:	881b      	ldrh	r3, [r3, #0]
 8004b42:	827b      	strh	r3, [r7, #18]
 8004b44:	8a7b      	ldrh	r3, [r7, #18]
 8004b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d01b      	beq.n	8004b86 <USB_DeactivateEndpoint+0xf6>
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	881b      	ldrh	r3, [r3, #0]
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b64:	823b      	strh	r3, [r7, #16]
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	441a      	add	r2, r3
 8004b70:	8a3b      	ldrh	r3, [r7, #16]
 8004b72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4413      	add	r3, r2
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b9c:	81fb      	strh	r3, [r7, #14]
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	441a      	add	r2, r3
 8004ba8:	89fb      	ldrh	r3, [r7, #14]
 8004baa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	8013      	strh	r3, [r2, #0]
 8004bbe:	e14d      	b.n	8004e5c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	785b      	ldrb	r3, [r3, #1]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f040 80a5 	bne.w	8004d14 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4413      	add	r3, r2
 8004bd4:	881b      	ldrh	r3, [r3, #0]
 8004bd6:	843b      	strh	r3, [r7, #32]
 8004bd8:	8c3b      	ldrh	r3, [r7, #32]
 8004bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d01b      	beq.n	8004c1a <USB_DeactivateEndpoint+0x18a>
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	4413      	add	r3, r2
 8004bec:	881b      	ldrh	r3, [r3, #0]
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf8:	83fb      	strh	r3, [r7, #30]
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	441a      	add	r2, r3
 8004c04:	8bfb      	ldrh	r3, [r7, #30]
 8004c06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	4413      	add	r3, r2
 8004c24:	881b      	ldrh	r3, [r3, #0]
 8004c26:	83bb      	strh	r3, [r7, #28]
 8004c28:	8bbb      	ldrh	r3, [r7, #28]
 8004c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d01b      	beq.n	8004c6a <USB_DeactivateEndpoint+0x1da>
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4413      	add	r3, r2
 8004c3c:	881b      	ldrh	r3, [r3, #0]
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c48:	837b      	strh	r3, [r7, #26]
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	441a      	add	r2, r3
 8004c54:	8b7b      	ldrh	r3, [r7, #26]
 8004c56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c62:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	4413      	add	r3, r2
 8004c74:	881b      	ldrh	r3, [r3, #0]
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c80:	833b      	strh	r3, [r7, #24]
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	441a      	add	r2, r3
 8004c8c:	8b3b      	ldrh	r3, [r7, #24]
 8004c8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	4413      	add	r3, r2
 8004cac:	881b      	ldrh	r3, [r3, #0]
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cb8:	82fb      	strh	r3, [r7, #22]
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	441a      	add	r2, r3
 8004cc4:	8afb      	ldrh	r3, [r7, #22]
 8004cc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	4413      	add	r3, r2
 8004ce4:	881b      	ldrh	r3, [r3, #0]
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cf0:	82bb      	strh	r3, [r7, #20]
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	441a      	add	r2, r3
 8004cfc:	8abb      	ldrh	r3, [r7, #20]
 8004cfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	8013      	strh	r3, [r2, #0]
 8004d12:	e0a3      	b.n	8004e5c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004d22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d01b      	beq.n	8004d64 <USB_DeactivateEndpoint+0x2d4>
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4413      	add	r3, r2
 8004d36:	881b      	ldrh	r3, [r3, #0]
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d42:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	441a      	add	r2, r3
 8004d4e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004d50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4413      	add	r3, r2
 8004d6e:	881b      	ldrh	r3, [r3, #0]
 8004d70:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004d72:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d01b      	beq.n	8004db4 <USB_DeactivateEndpoint+0x324>
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4413      	add	r3, r2
 8004d86:	881b      	ldrh	r3, [r3, #0]
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d92:	853b      	strh	r3, [r7, #40]	; 0x28
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	441a      	add	r2, r3
 8004d9e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004da0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004da4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004da8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4413      	add	r3, r2
 8004dbe:	881b      	ldrh	r3, [r3, #0]
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dca:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	441a      	add	r2, r3
 8004dd6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004dd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ddc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004de0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	4413      	add	r3, r2
 8004df6:	881b      	ldrh	r3, [r3, #0]
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e02:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	441a      	add	r2, r3
 8004e0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	4413      	add	r3, r2
 8004e2e:	881b      	ldrh	r3, [r3, #0]
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e3a:	847b      	strh	r3, [r7, #34]	; 0x22
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	441a      	add	r2, r3
 8004e46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004e48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3734      	adds	r7, #52	; 0x34
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bc80      	pop	{r7}
 8004e66:	4770      	bx	lr

08004e68 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b0cc      	sub	sp, #304	; 0x130
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	1d3b      	adds	r3, r7, #4
 8004e70:	6018      	str	r0, [r3, #0]
 8004e72:	463b      	mov	r3, r7
 8004e74:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e76:	463b      	mov	r3, r7
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	785b      	ldrb	r3, [r3, #1]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	f040 872e 	bne.w	8005cde <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004e82:	463b      	mov	r3, r7
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	699a      	ldr	r2, [r3, #24]
 8004e88:	463b      	mov	r3, r7
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d905      	bls.n	8004e9e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004e92:	463b      	mov	r3, r7
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004e9c:	e004      	b.n	8004ea8 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004e9e:	463b      	mov	r3, r7
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004ea8:	463b      	mov	r3, r7
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	7b1b      	ldrb	r3, [r3, #12]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d134      	bne.n	8004f1c <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004eb2:	463b      	mov	r3, r7
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6959      	ldr	r1, [r3, #20]
 8004eb8:	463b      	mov	r3, r7
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	88da      	ldrh	r2, [r3, #6]
 8004ebe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	1d38      	adds	r0, r7, #4
 8004ec6:	6800      	ldr	r0, [r0, #0]
 8004ec8:	f001 fc03 	bl	80066d2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004ecc:	f107 0310 	add.w	r3, r7, #16
 8004ed0:	1d3a      	adds	r2, r7, #4
 8004ed2:	6812      	ldr	r2, [r2, #0]
 8004ed4:	601a      	str	r2, [r3, #0]
 8004ed6:	1d3b      	adds	r3, r7, #4
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	f107 0310 	add.w	r3, r7, #16
 8004ee6:	f107 0210 	add.w	r2, r7, #16
 8004eea:	6812      	ldr	r2, [r2, #0]
 8004eec:	440a      	add	r2, r1
 8004eee:	601a      	str	r2, [r3, #0]
 8004ef0:	463b      	mov	r3, r7
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	011a      	lsls	r2, r3, #4
 8004ef8:	f107 0310 	add.w	r3, r7, #16
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4413      	add	r3, r2
 8004f00:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004f04:	f107 030c 	add.w	r3, r7, #12
 8004f08:	601a      	str	r2, [r3, #0]
 8004f0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	f107 030c 	add.w	r3, r7, #12
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	801a      	strh	r2, [r3, #0]
 8004f18:	f000 beac 	b.w	8005c74 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004f1c:	463b      	mov	r3, r7
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	78db      	ldrb	r3, [r3, #3]
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	f040 838c 	bne.w	8005640 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004f28:	463b      	mov	r3, r7
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6a1a      	ldr	r2, [r3, #32]
 8004f2e:	463b      	mov	r3, r7
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	f240 8330 	bls.w	800559a <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004f3a:	1d3b      	adds	r3, r7, #4
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	463b      	mov	r3, r7
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	4413      	add	r3, r2
 8004f48:	881b      	ldrh	r3, [r3, #0]
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f54:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004f58:	1d3b      	adds	r3, r7, #4
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	463b      	mov	r3, r7
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	441a      	add	r2, r3
 8004f66:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004f6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f72:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004f76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004f7e:	463b      	mov	r3, r7
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6a1a      	ldr	r2, [r3, #32]
 8004f84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f88:	1ad2      	subs	r2, r2, r3
 8004f8a:	463b      	mov	r3, r7
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004f90:	1d3b      	adds	r3, r7, #4
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	463b      	mov	r3, r7
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	881b      	ldrh	r3, [r3, #0]
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f000 819e 	beq.w	80052e8 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004fac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004fb0:	1d3a      	adds	r2, r7, #4
 8004fb2:	6812      	ldr	r2, [r2, #0]
 8004fb4:	601a      	str	r2, [r3, #0]
 8004fb6:	463b      	mov	r3, r7
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	785b      	ldrb	r3, [r3, #1]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d17a      	bne.n	80050b6 <USB_EPStartXfer+0x24e>
 8004fc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004fc4:	1d3a      	adds	r2, r7, #4
 8004fc6:	6812      	ldr	r2, [r2, #0]
 8004fc8:	601a      	str	r2, [r3, #0]
 8004fca:	1d3b      	adds	r3, r7, #4
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004fda:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004fde:	6812      	ldr	r2, [r2, #0]
 8004fe0:	440a      	add	r2, r1
 8004fe2:	601a      	str	r2, [r3, #0]
 8004fe4:	463b      	mov	r3, r7
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	011a      	lsls	r2, r3, #4
 8004fec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004ff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ffc:	601a      	str	r2, [r3, #0]
 8004ffe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005002:	2b00      	cmp	r3, #0
 8005004:	d11a      	bne.n	800503c <USB_EPStartXfer+0x1d4>
 8005006:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	881b      	ldrh	r3, [r3, #0]
 800500e:	b29b      	uxth	r3, r3
 8005010:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005014:	b29a      	uxth	r2, r3
 8005016:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	801a      	strh	r2, [r3, #0]
 800501e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	881b      	ldrh	r3, [r3, #0]
 8005026:	b29b      	uxth	r3, r3
 8005028:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800502c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005030:	b29a      	uxth	r2, r3
 8005032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	801a      	strh	r2, [r3, #0]
 800503a:	e062      	b.n	8005102 <USB_EPStartXfer+0x29a>
 800503c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005040:	2b3e      	cmp	r3, #62	; 0x3e
 8005042:	d819      	bhi.n	8005078 <USB_EPStartXfer+0x210>
 8005044:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005048:	085b      	lsrs	r3, r3, #1
 800504a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800504e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b00      	cmp	r3, #0
 8005058:	d004      	beq.n	8005064 <USB_EPStartXfer+0x1fc>
 800505a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800505e:	3301      	adds	r3, #1
 8005060:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005064:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005068:	b29b      	uxth	r3, r3
 800506a:	029b      	lsls	r3, r3, #10
 800506c:	b29a      	uxth	r2, r3
 800506e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	801a      	strh	r2, [r3, #0]
 8005076:	e044      	b.n	8005102 <USB_EPStartXfer+0x29a>
 8005078:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800507c:	095b      	lsrs	r3, r3, #5
 800507e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005082:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005086:	f003 031f 	and.w	r3, r3, #31
 800508a:	2b00      	cmp	r3, #0
 800508c:	d104      	bne.n	8005098 <USB_EPStartXfer+0x230>
 800508e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005092:	3b01      	subs	r3, #1
 8005094:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005098:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800509c:	b29b      	uxth	r3, r3
 800509e:	029b      	lsls	r3, r3, #10
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	801a      	strh	r2, [r3, #0]
 80050b4:	e025      	b.n	8005102 <USB_EPStartXfer+0x29a>
 80050b6:	463b      	mov	r3, r7
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	785b      	ldrb	r3, [r3, #1]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d120      	bne.n	8005102 <USB_EPStartXfer+0x29a>
 80050c0:	1d3b      	adds	r3, r7, #4
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	4619      	mov	r1, r3
 80050cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80050d0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80050d4:	6812      	ldr	r2, [r2, #0]
 80050d6:	440a      	add	r2, r1
 80050d8:	601a      	str	r2, [r3, #0]
 80050da:	463b      	mov	r3, r7
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	011a      	lsls	r2, r3, #4
 80050e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4413      	add	r3, r2
 80050ea:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80050ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005102:	463b      	mov	r3, r7
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	895b      	ldrh	r3, [r3, #10]
 8005108:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800510c:	463b      	mov	r3, r7
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6959      	ldr	r1, [r3, #20]
 8005112:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005116:	b29b      	uxth	r3, r3
 8005118:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800511c:	1d38      	adds	r0, r7, #4
 800511e:	6800      	ldr	r0, [r0, #0]
 8005120:	f001 fad7 	bl	80066d2 <USB_WritePMA>
            ep->xfer_buff += len;
 8005124:	463b      	mov	r3, r7
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	695a      	ldr	r2, [r3, #20]
 800512a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800512e:	441a      	add	r2, r3
 8005130:	463b      	mov	r3, r7
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005136:	463b      	mov	r3, r7
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6a1a      	ldr	r2, [r3, #32]
 800513c:	463b      	mov	r3, r7
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	429a      	cmp	r2, r3
 8005144:	d909      	bls.n	800515a <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8005146:	463b      	mov	r3, r7
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	6a1a      	ldr	r2, [r3, #32]
 800514c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005150:	1ad2      	subs	r2, r2, r3
 8005152:	463b      	mov	r3, r7
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	621a      	str	r2, [r3, #32]
 8005158:	e008      	b.n	800516c <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 800515a:	463b      	mov	r3, r7
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005164:	463b      	mov	r3, r7
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2200      	movs	r2, #0
 800516a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800516c:	463b      	mov	r3, r7
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	785b      	ldrb	r3, [r3, #1]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d17a      	bne.n	800526c <USB_EPStartXfer+0x404>
 8005176:	f107 0318 	add.w	r3, r7, #24
 800517a:	1d3a      	adds	r2, r7, #4
 800517c:	6812      	ldr	r2, [r2, #0]
 800517e:	601a      	str	r2, [r3, #0]
 8005180:	1d3b      	adds	r3, r7, #4
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005188:	b29b      	uxth	r3, r3
 800518a:	4619      	mov	r1, r3
 800518c:	f107 0318 	add.w	r3, r7, #24
 8005190:	f107 0218 	add.w	r2, r7, #24
 8005194:	6812      	ldr	r2, [r2, #0]
 8005196:	440a      	add	r2, r1
 8005198:	601a      	str	r2, [r3, #0]
 800519a:	463b      	mov	r3, r7
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	011a      	lsls	r2, r3, #4
 80051a2:	f107 0318 	add.w	r3, r7, #24
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4413      	add	r3, r2
 80051aa:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80051ae:	f107 0314 	add.w	r3, r7, #20
 80051b2:	601a      	str	r2, [r3, #0]
 80051b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d11a      	bne.n	80051f2 <USB_EPStartXfer+0x38a>
 80051bc:	f107 0314 	add.w	r3, r7, #20
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	881b      	ldrh	r3, [r3, #0]
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	f107 0314 	add.w	r3, r7, #20
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	801a      	strh	r2, [r3, #0]
 80051d4:	f107 0314 	add.w	r3, r7, #20
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	881b      	ldrh	r3, [r3, #0]
 80051dc:	b29b      	uxth	r3, r3
 80051de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	f107 0314 	add.w	r3, r7, #20
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	801a      	strh	r2, [r3, #0]
 80051f0:	e067      	b.n	80052c2 <USB_EPStartXfer+0x45a>
 80051f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051f6:	2b3e      	cmp	r3, #62	; 0x3e
 80051f8:	d819      	bhi.n	800522e <USB_EPStartXfer+0x3c6>
 80051fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051fe:	085b      	lsrs	r3, r3, #1
 8005200:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005204:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	2b00      	cmp	r3, #0
 800520e:	d004      	beq.n	800521a <USB_EPStartXfer+0x3b2>
 8005210:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005214:	3301      	adds	r3, #1
 8005216:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800521a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800521e:	b29b      	uxth	r3, r3
 8005220:	029b      	lsls	r3, r3, #10
 8005222:	b29a      	uxth	r2, r3
 8005224:	f107 0314 	add.w	r3, r7, #20
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	801a      	strh	r2, [r3, #0]
 800522c:	e049      	b.n	80052c2 <USB_EPStartXfer+0x45a>
 800522e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005232:	095b      	lsrs	r3, r3, #5
 8005234:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005238:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800523c:	f003 031f 	and.w	r3, r3, #31
 8005240:	2b00      	cmp	r3, #0
 8005242:	d104      	bne.n	800524e <USB_EPStartXfer+0x3e6>
 8005244:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005248:	3b01      	subs	r3, #1
 800524a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800524e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005252:	b29b      	uxth	r3, r3
 8005254:	029b      	lsls	r3, r3, #10
 8005256:	b29b      	uxth	r3, r3
 8005258:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800525c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005260:	b29a      	uxth	r2, r3
 8005262:	f107 0314 	add.w	r3, r7, #20
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	801a      	strh	r2, [r3, #0]
 800526a:	e02a      	b.n	80052c2 <USB_EPStartXfer+0x45a>
 800526c:	463b      	mov	r3, r7
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	785b      	ldrb	r3, [r3, #1]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d125      	bne.n	80052c2 <USB_EPStartXfer+0x45a>
 8005276:	f107 0320 	add.w	r3, r7, #32
 800527a:	1d3a      	adds	r2, r7, #4
 800527c:	6812      	ldr	r2, [r2, #0]
 800527e:	601a      	str	r2, [r3, #0]
 8005280:	1d3b      	adds	r3, r7, #4
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005288:	b29b      	uxth	r3, r3
 800528a:	4619      	mov	r1, r3
 800528c:	f107 0320 	add.w	r3, r7, #32
 8005290:	f107 0220 	add.w	r2, r7, #32
 8005294:	6812      	ldr	r2, [r2, #0]
 8005296:	440a      	add	r2, r1
 8005298:	601a      	str	r2, [r3, #0]
 800529a:	463b      	mov	r3, r7
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	011a      	lsls	r2, r3, #4
 80052a2:	f107 0320 	add.w	r3, r7, #32
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4413      	add	r3, r2
 80052aa:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80052ae:	f107 031c 	add.w	r3, r7, #28
 80052b2:	601a      	str	r2, [r3, #0]
 80052b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	f107 031c 	add.w	r3, r7, #28
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80052c2:	463b      	mov	r3, r7
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	891b      	ldrh	r3, [r3, #8]
 80052c8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052cc:	463b      	mov	r3, r7
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6959      	ldr	r1, [r3, #20]
 80052d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80052dc:	1d38      	adds	r0, r7, #4
 80052de:	6800      	ldr	r0, [r0, #0]
 80052e0:	f001 f9f7 	bl	80066d2 <USB_WritePMA>
 80052e4:	f000 bcc6 	b.w	8005c74 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80052e8:	463b      	mov	r3, r7
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	785b      	ldrb	r3, [r3, #1]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d164      	bne.n	80053bc <USB_EPStartXfer+0x554>
 80052f2:	1d3b      	adds	r3, r7, #4
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80052f8:	1d3b      	adds	r3, r7, #4
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005300:	b29b      	uxth	r3, r3
 8005302:	461a      	mov	r2, r3
 8005304:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005306:	4413      	add	r3, r2
 8005308:	64bb      	str	r3, [r7, #72]	; 0x48
 800530a:	463b      	mov	r3, r7
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	011a      	lsls	r2, r3, #4
 8005312:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005314:	4413      	add	r3, r2
 8005316:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800531a:	647b      	str	r3, [r7, #68]	; 0x44
 800531c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005320:	2b00      	cmp	r3, #0
 8005322:	d112      	bne.n	800534a <USB_EPStartXfer+0x4e2>
 8005324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005326:	881b      	ldrh	r3, [r3, #0]
 8005328:	b29b      	uxth	r3, r3
 800532a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800532e:	b29a      	uxth	r2, r3
 8005330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005332:	801a      	strh	r2, [r3, #0]
 8005334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005336:	881b      	ldrh	r3, [r3, #0]
 8005338:	b29b      	uxth	r3, r3
 800533a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800533e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005342:	b29a      	uxth	r2, r3
 8005344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005346:	801a      	strh	r2, [r3, #0]
 8005348:	e057      	b.n	80053fa <USB_EPStartXfer+0x592>
 800534a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800534e:	2b3e      	cmp	r3, #62	; 0x3e
 8005350:	d817      	bhi.n	8005382 <USB_EPStartXfer+0x51a>
 8005352:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005356:	085b      	lsrs	r3, r3, #1
 8005358:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800535c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005360:	f003 0301 	and.w	r3, r3, #1
 8005364:	2b00      	cmp	r3, #0
 8005366:	d004      	beq.n	8005372 <USB_EPStartXfer+0x50a>
 8005368:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800536c:	3301      	adds	r3, #1
 800536e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005372:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005376:	b29b      	uxth	r3, r3
 8005378:	029b      	lsls	r3, r3, #10
 800537a:	b29a      	uxth	r2, r3
 800537c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800537e:	801a      	strh	r2, [r3, #0]
 8005380:	e03b      	b.n	80053fa <USB_EPStartXfer+0x592>
 8005382:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005386:	095b      	lsrs	r3, r3, #5
 8005388:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800538c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005390:	f003 031f 	and.w	r3, r3, #31
 8005394:	2b00      	cmp	r3, #0
 8005396:	d104      	bne.n	80053a2 <USB_EPStartXfer+0x53a>
 8005398:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800539c:	3b01      	subs	r3, #1
 800539e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80053a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	029b      	lsls	r3, r3, #10
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053b8:	801a      	strh	r2, [r3, #0]
 80053ba:	e01e      	b.n	80053fa <USB_EPStartXfer+0x592>
 80053bc:	463b      	mov	r3, r7
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	785b      	ldrb	r3, [r3, #1]
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d119      	bne.n	80053fa <USB_EPStartXfer+0x592>
 80053c6:	1d3b      	adds	r3, r7, #4
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	653b      	str	r3, [r7, #80]	; 0x50
 80053cc:	1d3b      	adds	r3, r7, #4
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	461a      	mov	r2, r3
 80053d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053da:	4413      	add	r3, r2
 80053dc:	653b      	str	r3, [r7, #80]	; 0x50
 80053de:	463b      	mov	r3, r7
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	011a      	lsls	r2, r3, #4
 80053e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053e8:	4413      	add	r3, r2
 80053ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80053fa:	463b      	mov	r3, r7
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	891b      	ldrh	r3, [r3, #8]
 8005400:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005404:	463b      	mov	r3, r7
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6959      	ldr	r1, [r3, #20]
 800540a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800540e:	b29b      	uxth	r3, r3
 8005410:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005414:	1d38      	adds	r0, r7, #4
 8005416:	6800      	ldr	r0, [r0, #0]
 8005418:	f001 f95b 	bl	80066d2 <USB_WritePMA>
            ep->xfer_buff += len;
 800541c:	463b      	mov	r3, r7
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	695a      	ldr	r2, [r3, #20]
 8005422:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005426:	441a      	add	r2, r3
 8005428:	463b      	mov	r3, r7
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800542e:	463b      	mov	r3, r7
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	6a1a      	ldr	r2, [r3, #32]
 8005434:	463b      	mov	r3, r7
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	429a      	cmp	r2, r3
 800543c:	d909      	bls.n	8005452 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 800543e:	463b      	mov	r3, r7
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	6a1a      	ldr	r2, [r3, #32]
 8005444:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005448:	1ad2      	subs	r2, r2, r3
 800544a:	463b      	mov	r3, r7
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	621a      	str	r2, [r3, #32]
 8005450:	e008      	b.n	8005464 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8005452:	463b      	mov	r3, r7
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	6a1b      	ldr	r3, [r3, #32]
 8005458:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800545c:	463b      	mov	r3, r7
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2200      	movs	r2, #0
 8005462:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005464:	1d3b      	adds	r3, r7, #4
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	643b      	str	r3, [r7, #64]	; 0x40
 800546a:	463b      	mov	r3, r7
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	785b      	ldrb	r3, [r3, #1]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d164      	bne.n	800553e <USB_EPStartXfer+0x6d6>
 8005474:	1d3b      	adds	r3, r7, #4
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	63bb      	str	r3, [r7, #56]	; 0x38
 800547a:	1d3b      	adds	r3, r7, #4
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005482:	b29b      	uxth	r3, r3
 8005484:	461a      	mov	r2, r3
 8005486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005488:	4413      	add	r3, r2
 800548a:	63bb      	str	r3, [r7, #56]	; 0x38
 800548c:	463b      	mov	r3, r7
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	011a      	lsls	r2, r3, #4
 8005494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005496:	4413      	add	r3, r2
 8005498:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800549c:	637b      	str	r3, [r7, #52]	; 0x34
 800549e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d112      	bne.n	80054cc <USB_EPStartXfer+0x664>
 80054a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054a8:	881b      	ldrh	r3, [r3, #0]
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054b4:	801a      	strh	r2, [r3, #0]
 80054b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054b8:	881b      	ldrh	r3, [r3, #0]
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c8:	801a      	strh	r2, [r3, #0]
 80054ca:	e054      	b.n	8005576 <USB_EPStartXfer+0x70e>
 80054cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054d0:	2b3e      	cmp	r3, #62	; 0x3e
 80054d2:	d817      	bhi.n	8005504 <USB_EPStartXfer+0x69c>
 80054d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054d8:	085b      	lsrs	r3, r3, #1
 80054da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80054de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d004      	beq.n	80054f4 <USB_EPStartXfer+0x68c>
 80054ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80054ee:	3301      	adds	r3, #1
 80054f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80054f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	029b      	lsls	r3, r3, #10
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005500:	801a      	strh	r2, [r3, #0]
 8005502:	e038      	b.n	8005576 <USB_EPStartXfer+0x70e>
 8005504:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005508:	095b      	lsrs	r3, r3, #5
 800550a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800550e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005512:	f003 031f 	and.w	r3, r3, #31
 8005516:	2b00      	cmp	r3, #0
 8005518:	d104      	bne.n	8005524 <USB_EPStartXfer+0x6bc>
 800551a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800551e:	3b01      	subs	r3, #1
 8005520:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005524:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005528:	b29b      	uxth	r3, r3
 800552a:	029b      	lsls	r3, r3, #10
 800552c:	b29b      	uxth	r3, r3
 800552e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005532:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005536:	b29a      	uxth	r2, r3
 8005538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800553a:	801a      	strh	r2, [r3, #0]
 800553c:	e01b      	b.n	8005576 <USB_EPStartXfer+0x70e>
 800553e:	463b      	mov	r3, r7
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	785b      	ldrb	r3, [r3, #1]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d116      	bne.n	8005576 <USB_EPStartXfer+0x70e>
 8005548:	1d3b      	adds	r3, r7, #4
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005550:	b29b      	uxth	r3, r3
 8005552:	461a      	mov	r2, r3
 8005554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005556:	4413      	add	r3, r2
 8005558:	643b      	str	r3, [r7, #64]	; 0x40
 800555a:	463b      	mov	r3, r7
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	011a      	lsls	r2, r3, #4
 8005562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005564:	4413      	add	r3, r2
 8005566:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800556a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800556c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005570:	b29a      	uxth	r2, r3
 8005572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005574:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005576:	463b      	mov	r3, r7
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	895b      	ldrh	r3, [r3, #10]
 800557c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005580:	463b      	mov	r3, r7
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6959      	ldr	r1, [r3, #20]
 8005586:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800558a:	b29b      	uxth	r3, r3
 800558c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005590:	1d38      	adds	r0, r7, #4
 8005592:	6800      	ldr	r0, [r0, #0]
 8005594:	f001 f89d 	bl	80066d2 <USB_WritePMA>
 8005598:	e36c      	b.n	8005c74 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800559a:	463b      	mov	r3, r7
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	6a1b      	ldr	r3, [r3, #32]
 80055a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80055a4:	1d3b      	adds	r3, r7, #4
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	463b      	mov	r3, r7
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4413      	add	r3, r2
 80055b2:	881b      	ldrh	r3, [r3, #0]
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80055ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055be:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80055c2:	1d3b      	adds	r3, r7, #4
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	463b      	mov	r3, r7
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	441a      	add	r2, r3
 80055d0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80055d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80055e8:	1d3b      	adds	r3, r7, #4
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055ee:	1d3b      	adds	r3, r7, #4
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	461a      	mov	r2, r3
 80055fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055fc:	4413      	add	r3, r2
 80055fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005600:	463b      	mov	r3, r7
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	011a      	lsls	r2, r3, #4
 8005608:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800560a:	4413      	add	r3, r2
 800560c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005610:	65bb      	str	r3, [r7, #88]	; 0x58
 8005612:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005616:	b29a      	uxth	r2, r3
 8005618:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800561a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800561c:	463b      	mov	r3, r7
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	891b      	ldrh	r3, [r3, #8]
 8005622:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005626:	463b      	mov	r3, r7
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	6959      	ldr	r1, [r3, #20]
 800562c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005630:	b29b      	uxth	r3, r3
 8005632:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005636:	1d38      	adds	r0, r7, #4
 8005638:	6800      	ldr	r0, [r0, #0]
 800563a:	f001 f84a 	bl	80066d2 <USB_WritePMA>
 800563e:	e319      	b.n	8005c74 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005640:	1d3b      	adds	r3, r7, #4
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	463b      	mov	r3, r7
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	4413      	add	r3, r2
 800564e:	881b      	ldrh	r3, [r3, #0]
 8005650:	b29b      	uxth	r3, r3
 8005652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800565a:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800565e:	1d3b      	adds	r3, r7, #4
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	463b      	mov	r3, r7
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	441a      	add	r2, r3
 800566c:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005670:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005674:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005678:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800567c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005680:	b29b      	uxth	r3, r3
 8005682:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005684:	463b      	mov	r3, r7
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6a1a      	ldr	r2, [r3, #32]
 800568a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800568e:	1ad2      	subs	r2, r2, r3
 8005690:	463b      	mov	r3, r7
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005696:	1d3b      	adds	r3, r7, #4
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	463b      	mov	r3, r7
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4413      	add	r3, r2
 80056a4:	881b      	ldrh	r3, [r3, #0]
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 8162 	beq.w	8005976 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80056b2:	1d3b      	adds	r3, r7, #4
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80056ba:	463b      	mov	r3, r7
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	785b      	ldrb	r3, [r3, #1]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d164      	bne.n	800578e <USB_EPStartXfer+0x926>
 80056c4:	1d3b      	adds	r3, r7, #4
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80056ca:	1d3b      	adds	r3, r7, #4
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	461a      	mov	r2, r3
 80056d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056d8:	4413      	add	r3, r2
 80056da:	67bb      	str	r3, [r7, #120]	; 0x78
 80056dc:	463b      	mov	r3, r7
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	011a      	lsls	r2, r3, #4
 80056e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056e6:	4413      	add	r3, r2
 80056e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056ec:	677b      	str	r3, [r7, #116]	; 0x74
 80056ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d112      	bne.n	800571c <USB_EPStartXfer+0x8b4>
 80056f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056f8:	881b      	ldrh	r3, [r3, #0]
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005700:	b29a      	uxth	r2, r3
 8005702:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005704:	801a      	strh	r2, [r3, #0]
 8005706:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005708:	881b      	ldrh	r3, [r3, #0]
 800570a:	b29b      	uxth	r3, r3
 800570c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005710:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005714:	b29a      	uxth	r2, r3
 8005716:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005718:	801a      	strh	r2, [r3, #0]
 800571a:	e057      	b.n	80057cc <USB_EPStartXfer+0x964>
 800571c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005720:	2b3e      	cmp	r3, #62	; 0x3e
 8005722:	d817      	bhi.n	8005754 <USB_EPStartXfer+0x8ec>
 8005724:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005728:	085b      	lsrs	r3, r3, #1
 800572a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800572e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b00      	cmp	r3, #0
 8005738:	d004      	beq.n	8005744 <USB_EPStartXfer+0x8dc>
 800573a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800573e:	3301      	adds	r3, #1
 8005740:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005744:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005748:	b29b      	uxth	r3, r3
 800574a:	029b      	lsls	r3, r3, #10
 800574c:	b29a      	uxth	r2, r3
 800574e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005750:	801a      	strh	r2, [r3, #0]
 8005752:	e03b      	b.n	80057cc <USB_EPStartXfer+0x964>
 8005754:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005758:	095b      	lsrs	r3, r3, #5
 800575a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800575e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005762:	f003 031f 	and.w	r3, r3, #31
 8005766:	2b00      	cmp	r3, #0
 8005768:	d104      	bne.n	8005774 <USB_EPStartXfer+0x90c>
 800576a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800576e:	3b01      	subs	r3, #1
 8005770:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005774:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005778:	b29b      	uxth	r3, r3
 800577a:	029b      	lsls	r3, r3, #10
 800577c:	b29b      	uxth	r3, r3
 800577e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005782:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005786:	b29a      	uxth	r2, r3
 8005788:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800578a:	801a      	strh	r2, [r3, #0]
 800578c:	e01e      	b.n	80057cc <USB_EPStartXfer+0x964>
 800578e:	463b      	mov	r3, r7
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	785b      	ldrb	r3, [r3, #1]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d119      	bne.n	80057cc <USB_EPStartXfer+0x964>
 8005798:	1d3b      	adds	r3, r7, #4
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	461a      	mov	r2, r3
 80057a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80057a8:	4413      	add	r3, r2
 80057aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80057ae:	463b      	mov	r3, r7
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	011a      	lsls	r2, r3, #4
 80057b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80057ba:	4413      	add	r3, r2
 80057bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80057c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80057c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057ca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80057cc:	463b      	mov	r3, r7
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	895b      	ldrh	r3, [r3, #10]
 80057d2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057d6:	463b      	mov	r3, r7
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	6959      	ldr	r1, [r3, #20]
 80057dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80057e6:	1d38      	adds	r0, r7, #4
 80057e8:	6800      	ldr	r0, [r0, #0]
 80057ea:	f000 ff72 	bl	80066d2 <USB_WritePMA>
          ep->xfer_buff += len;
 80057ee:	463b      	mov	r3, r7
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	695a      	ldr	r2, [r3, #20]
 80057f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057f8:	441a      	add	r2, r3
 80057fa:	463b      	mov	r3, r7
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005800:	463b      	mov	r3, r7
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6a1a      	ldr	r2, [r3, #32]
 8005806:	463b      	mov	r3, r7
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	429a      	cmp	r2, r3
 800580e:	d909      	bls.n	8005824 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8005810:	463b      	mov	r3, r7
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6a1a      	ldr	r2, [r3, #32]
 8005816:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800581a:	1ad2      	subs	r2, r2, r3
 800581c:	463b      	mov	r3, r7
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	621a      	str	r2, [r3, #32]
 8005822:	e008      	b.n	8005836 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8005824:	463b      	mov	r3, r7
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800582e:	463b      	mov	r3, r7
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2200      	movs	r2, #0
 8005834:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005836:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800583a:	2b00      	cmp	r3, #0
 800583c:	f000 821a 	beq.w	8005c74 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005840:	463b      	mov	r3, r7
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	785b      	ldrb	r3, [r3, #1]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d164      	bne.n	8005914 <USB_EPStartXfer+0xaac>
 800584a:	1d3b      	adds	r3, r7, #4
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005850:	1d3b      	adds	r3, r7, #4
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005858:	b29b      	uxth	r3, r3
 800585a:	461a      	mov	r2, r3
 800585c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800585e:	4413      	add	r3, r2
 8005860:	66bb      	str	r3, [r7, #104]	; 0x68
 8005862:	463b      	mov	r3, r7
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	011a      	lsls	r2, r3, #4
 800586a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800586c:	4413      	add	r3, r2
 800586e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005872:	667b      	str	r3, [r7, #100]	; 0x64
 8005874:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005878:	2b00      	cmp	r3, #0
 800587a:	d112      	bne.n	80058a2 <USB_EPStartXfer+0xa3a>
 800587c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800587e:	881b      	ldrh	r3, [r3, #0]
 8005880:	b29b      	uxth	r3, r3
 8005882:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005886:	b29a      	uxth	r2, r3
 8005888:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800588a:	801a      	strh	r2, [r3, #0]
 800588c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800588e:	881b      	ldrh	r3, [r3, #0]
 8005890:	b29b      	uxth	r3, r3
 8005892:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005896:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800589a:	b29a      	uxth	r2, r3
 800589c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800589e:	801a      	strh	r2, [r3, #0]
 80058a0:	e057      	b.n	8005952 <USB_EPStartXfer+0xaea>
 80058a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058a6:	2b3e      	cmp	r3, #62	; 0x3e
 80058a8:	d817      	bhi.n	80058da <USB_EPStartXfer+0xa72>
 80058aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ae:	085b      	lsrs	r3, r3, #1
 80058b0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80058b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058b8:	f003 0301 	and.w	r3, r3, #1
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d004      	beq.n	80058ca <USB_EPStartXfer+0xa62>
 80058c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058c4:	3301      	adds	r3, #1
 80058c6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80058ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	029b      	lsls	r3, r3, #10
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058d6:	801a      	strh	r2, [r3, #0]
 80058d8:	e03b      	b.n	8005952 <USB_EPStartXfer+0xaea>
 80058da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058de:	095b      	lsrs	r3, r3, #5
 80058e0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80058e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058e8:	f003 031f 	and.w	r3, r3, #31
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d104      	bne.n	80058fa <USB_EPStartXfer+0xa92>
 80058f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058f4:	3b01      	subs	r3, #1
 80058f6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80058fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058fe:	b29b      	uxth	r3, r3
 8005900:	029b      	lsls	r3, r3, #10
 8005902:	b29b      	uxth	r3, r3
 8005904:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005908:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800590c:	b29a      	uxth	r2, r3
 800590e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005910:	801a      	strh	r2, [r3, #0]
 8005912:	e01e      	b.n	8005952 <USB_EPStartXfer+0xaea>
 8005914:	463b      	mov	r3, r7
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	785b      	ldrb	r3, [r3, #1]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d119      	bne.n	8005952 <USB_EPStartXfer+0xaea>
 800591e:	1d3b      	adds	r3, r7, #4
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	673b      	str	r3, [r7, #112]	; 0x70
 8005924:	1d3b      	adds	r3, r7, #4
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800592c:	b29b      	uxth	r3, r3
 800592e:	461a      	mov	r2, r3
 8005930:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005932:	4413      	add	r3, r2
 8005934:	673b      	str	r3, [r7, #112]	; 0x70
 8005936:	463b      	mov	r3, r7
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	011a      	lsls	r2, r3, #4
 800593e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005940:	4413      	add	r3, r2
 8005942:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005946:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005948:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800594c:	b29a      	uxth	r2, r3
 800594e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005950:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005952:	463b      	mov	r3, r7
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	891b      	ldrh	r3, [r3, #8]
 8005958:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800595c:	463b      	mov	r3, r7
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6959      	ldr	r1, [r3, #20]
 8005962:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005966:	b29b      	uxth	r3, r3
 8005968:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800596c:	1d38      	adds	r0, r7, #4
 800596e:	6800      	ldr	r0, [r0, #0]
 8005970:	f000 feaf 	bl	80066d2 <USB_WritePMA>
 8005974:	e17e      	b.n	8005c74 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005976:	463b      	mov	r3, r7
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	785b      	ldrb	r3, [r3, #1]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d16f      	bne.n	8005a60 <USB_EPStartXfer+0xbf8>
 8005980:	1d3b      	adds	r3, r7, #4
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005988:	1d3b      	adds	r3, r7, #4
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005990:	b29b      	uxth	r3, r3
 8005992:	461a      	mov	r2, r3
 8005994:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005998:	4413      	add	r3, r2
 800599a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800599e:	463b      	mov	r3, r7
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	011a      	lsls	r2, r3, #4
 80059a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80059aa:	4413      	add	r3, r2
 80059ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80059b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d116      	bne.n	80059ea <USB_EPStartXfer+0xb82>
 80059bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059c0:	881b      	ldrh	r3, [r3, #0]
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059ce:	801a      	strh	r2, [r3, #0]
 80059d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059d4:	881b      	ldrh	r3, [r3, #0]
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059e6:	801a      	strh	r2, [r3, #0]
 80059e8:	e05f      	b.n	8005aaa <USB_EPStartXfer+0xc42>
 80059ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059ee:	2b3e      	cmp	r3, #62	; 0x3e
 80059f0:	d818      	bhi.n	8005a24 <USB_EPStartXfer+0xbbc>
 80059f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059f6:	085b      	lsrs	r3, r3, #1
 80059f8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80059fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d004      	beq.n	8005a12 <USB_EPStartXfer+0xbaa>
 8005a08:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005a12:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	029b      	lsls	r3, r3, #10
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a20:	801a      	strh	r2, [r3, #0]
 8005a22:	e042      	b.n	8005aaa <USB_EPStartXfer+0xc42>
 8005a24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a28:	095b      	lsrs	r3, r3, #5
 8005a2a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005a2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a32:	f003 031f 	and.w	r3, r3, #31
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d104      	bne.n	8005a44 <USB_EPStartXfer+0xbdc>
 8005a3a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005a44:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	029b      	lsls	r3, r3, #10
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a5c:	801a      	strh	r2, [r3, #0]
 8005a5e:	e024      	b.n	8005aaa <USB_EPStartXfer+0xc42>
 8005a60:	463b      	mov	r3, r7
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	785b      	ldrb	r3, [r3, #1]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d11f      	bne.n	8005aaa <USB_EPStartXfer+0xc42>
 8005a6a:	1d3b      	adds	r3, r7, #4
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005a72:	1d3b      	adds	r3, r7, #4
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005a82:	4413      	add	r3, r2
 8005a84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005a88:	463b      	mov	r3, r7
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	011a      	lsls	r2, r3, #4
 8005a90:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005a94:	4413      	add	r3, r2
 8005a96:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005aa8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005aaa:	463b      	mov	r3, r7
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	891b      	ldrh	r3, [r3, #8]
 8005ab0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ab4:	463b      	mov	r3, r7
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6959      	ldr	r1, [r3, #20]
 8005aba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005ac4:	1d38      	adds	r0, r7, #4
 8005ac6:	6800      	ldr	r0, [r0, #0]
 8005ac8:	f000 fe03 	bl	80066d2 <USB_WritePMA>
          ep->xfer_buff += len;
 8005acc:	463b      	mov	r3, r7
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	695a      	ldr	r2, [r3, #20]
 8005ad2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ad6:	441a      	add	r2, r3
 8005ad8:	463b      	mov	r3, r7
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005ade:	463b      	mov	r3, r7
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	6a1a      	ldr	r2, [r3, #32]
 8005ae4:	463b      	mov	r3, r7
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d909      	bls.n	8005b02 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8005aee:	463b      	mov	r3, r7
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	6a1a      	ldr	r2, [r3, #32]
 8005af4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005af8:	1ad2      	subs	r2, r2, r3
 8005afa:	463b      	mov	r3, r7
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	621a      	str	r2, [r3, #32]
 8005b00:	e008      	b.n	8005b14 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8005b02:	463b      	mov	r3, r7
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	6a1b      	ldr	r3, [r3, #32]
 8005b08:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005b0c:	463b      	mov	r3, r7
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2200      	movs	r2, #0
 8005b12:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005b14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f000 80ab 	beq.w	8005c74 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b1e:	1d3b      	adds	r3, r7, #4
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b26:	463b      	mov	r3, r7
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	785b      	ldrb	r3, [r3, #1]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d16f      	bne.n	8005c10 <USB_EPStartXfer+0xda8>
 8005b30:	1d3b      	adds	r3, r7, #4
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b38:	1d3b      	adds	r3, r7, #4
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	461a      	mov	r2, r3
 8005b44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b48:	4413      	add	r3, r2
 8005b4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b4e:	463b      	mov	r3, r7
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	011a      	lsls	r2, r3, #4
 8005b56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005b64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d116      	bne.n	8005b9a <USB_EPStartXfer+0xd32>
 8005b6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b70:	881b      	ldrh	r3, [r3, #0]
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b7e:	801a      	strh	r2, [r3, #0]
 8005b80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b84:	881b      	ldrh	r3, [r3, #0]
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b96:	801a      	strh	r2, [r3, #0]
 8005b98:	e05b      	b.n	8005c52 <USB_EPStartXfer+0xdea>
 8005b9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b9e:	2b3e      	cmp	r3, #62	; 0x3e
 8005ba0:	d818      	bhi.n	8005bd4 <USB_EPStartXfer+0xd6c>
 8005ba2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ba6:	085b      	lsrs	r3, r3, #1
 8005ba8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005bac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bb0:	f003 0301 	and.w	r3, r3, #1
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d004      	beq.n	8005bc2 <USB_EPStartXfer+0xd5a>
 8005bb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005bc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	029b      	lsls	r3, r3, #10
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bd0:	801a      	strh	r2, [r3, #0]
 8005bd2:	e03e      	b.n	8005c52 <USB_EPStartXfer+0xdea>
 8005bd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bd8:	095b      	lsrs	r3, r3, #5
 8005bda:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005bde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005be2:	f003 031f 	and.w	r3, r3, #31
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d104      	bne.n	8005bf4 <USB_EPStartXfer+0xd8c>
 8005bea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005bf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	029b      	lsls	r3, r3, #10
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c0c:	801a      	strh	r2, [r3, #0]
 8005c0e:	e020      	b.n	8005c52 <USB_EPStartXfer+0xdea>
 8005c10:	463b      	mov	r3, r7
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	785b      	ldrb	r3, [r3, #1]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d11b      	bne.n	8005c52 <USB_EPStartXfer+0xdea>
 8005c1a:	1d3b      	adds	r3, r7, #4
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	461a      	mov	r2, r3
 8005c26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005c30:	463b      	mov	r3, r7
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	011a      	lsls	r2, r3, #4
 8005c38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005c46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c50:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005c52:	463b      	mov	r3, r7
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	895b      	ldrh	r3, [r3, #10]
 8005c58:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c5c:	463b      	mov	r3, r7
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	6959      	ldr	r1, [r3, #20]
 8005c62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005c6c:	1d38      	adds	r0, r7, #4
 8005c6e:	6800      	ldr	r0, [r0, #0]
 8005c70:	f000 fd2f 	bl	80066d2 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005c74:	1d3b      	adds	r3, r7, #4
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	463b      	mov	r3, r7
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	4413      	add	r3, r2
 8005c82:	881b      	ldrh	r3, [r3, #0]
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	f107 020a 	add.w	r2, r7, #10
 8005c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c92:	8013      	strh	r3, [r2, #0]
 8005c94:	f107 030a 	add.w	r3, r7, #10
 8005c98:	f107 020a 	add.w	r2, r7, #10
 8005c9c:	8812      	ldrh	r2, [r2, #0]
 8005c9e:	f082 0210 	eor.w	r2, r2, #16
 8005ca2:	801a      	strh	r2, [r3, #0]
 8005ca4:	f107 030a 	add.w	r3, r7, #10
 8005ca8:	f107 020a 	add.w	r2, r7, #10
 8005cac:	8812      	ldrh	r2, [r2, #0]
 8005cae:	f082 0220 	eor.w	r2, r2, #32
 8005cb2:	801a      	strh	r2, [r3, #0]
 8005cb4:	1d3b      	adds	r3, r7, #4
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	463b      	mov	r3, r7
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	441a      	add	r2, r3
 8005cc2:	f107 030a 	add.w	r3, r7, #10
 8005cc6:	881b      	ldrh	r3, [r3, #0]
 8005cc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ccc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	8013      	strh	r3, [r2, #0]
 8005cdc:	e3b5      	b.n	800644a <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005cde:	463b      	mov	r3, r7
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	7b1b      	ldrb	r3, [r3, #12]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f040 8090 	bne.w	8005e0a <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005cea:	463b      	mov	r3, r7
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	699a      	ldr	r2, [r3, #24]
 8005cf0:	463b      	mov	r3, r7
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d90e      	bls.n	8005d18 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8005cfa:	463b      	mov	r3, r7
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005d04:	463b      	mov	r3, r7
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	699a      	ldr	r2, [r3, #24]
 8005d0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d0e:	1ad2      	subs	r2, r2, r3
 8005d10:	463b      	mov	r3, r7
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	619a      	str	r2, [r3, #24]
 8005d16:	e008      	b.n	8005d2a <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8005d18:	463b      	mov	r3, r7
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005d22:	463b      	mov	r3, r7
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2200      	movs	r2, #0
 8005d28:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005d2a:	1d3b      	adds	r3, r7, #4
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d32:	1d3b      	adds	r3, r7, #4
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005d42:	4413      	add	r3, r2
 8005d44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d48:	463b      	mov	r3, r7
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	011a      	lsls	r2, r3, #4
 8005d50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005d54:	4413      	add	r3, r2
 8005d56:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d116      	bne.n	8005d94 <USB_EPStartXfer+0xf2c>
 8005d66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d6a:	881b      	ldrh	r3, [r3, #0]
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d78:	801a      	strh	r2, [r3, #0]
 8005d7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d7e:	881b      	ldrh	r3, [r3, #0]
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d90:	801a      	strh	r2, [r3, #0]
 8005d92:	e32c      	b.n	80063ee <USB_EPStartXfer+0x1586>
 8005d94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d98:	2b3e      	cmp	r3, #62	; 0x3e
 8005d9a:	d818      	bhi.n	8005dce <USB_EPStartXfer+0xf66>
 8005d9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005da0:	085b      	lsrs	r3, r3, #1
 8005da2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005da6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d004      	beq.n	8005dbc <USB_EPStartXfer+0xf54>
 8005db2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005db6:	3301      	adds	r3, #1
 8005db8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005dbc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	029b      	lsls	r3, r3, #10
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005dca:	801a      	strh	r2, [r3, #0]
 8005dcc:	e30f      	b.n	80063ee <USB_EPStartXfer+0x1586>
 8005dce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dd2:	095b      	lsrs	r3, r3, #5
 8005dd4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005dd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ddc:	f003 031f 	and.w	r3, r3, #31
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d104      	bne.n	8005dee <USB_EPStartXfer+0xf86>
 8005de4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005de8:	3b01      	subs	r3, #1
 8005dea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005dee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	029b      	lsls	r3, r3, #10
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e00:	b29a      	uxth	r2, r3
 8005e02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e06:	801a      	strh	r2, [r3, #0]
 8005e08:	e2f1      	b.n	80063ee <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005e0a:	463b      	mov	r3, r7
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	78db      	ldrb	r3, [r3, #3]
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	f040 818f 	bne.w	8006134 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005e16:	463b      	mov	r3, r7
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	785b      	ldrb	r3, [r3, #1]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d175      	bne.n	8005f0c <USB_EPStartXfer+0x10a4>
 8005e20:	1d3b      	adds	r3, r7, #4
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005e28:	1d3b      	adds	r3, r7, #4
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	461a      	mov	r2, r3
 8005e34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e38:	4413      	add	r3, r2
 8005e3a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005e3e:	463b      	mov	r3, r7
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	011a      	lsls	r2, r3, #4
 8005e46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e54:	463b      	mov	r3, r7
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d116      	bne.n	8005e8c <USB_EPStartXfer+0x1024>
 8005e5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e62:	881b      	ldrh	r3, [r3, #0]
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e70:	801a      	strh	r2, [r3, #0]
 8005e72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e76:	881b      	ldrh	r3, [r3, #0]
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e88:	801a      	strh	r2, [r3, #0]
 8005e8a:	e065      	b.n	8005f58 <USB_EPStartXfer+0x10f0>
 8005e8c:	463b      	mov	r3, r7
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	2b3e      	cmp	r3, #62	; 0x3e
 8005e94:	d81a      	bhi.n	8005ecc <USB_EPStartXfer+0x1064>
 8005e96:	463b      	mov	r3, r7
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	085b      	lsrs	r3, r3, #1
 8005e9e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005ea2:	463b      	mov	r3, r7
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	f003 0301 	and.w	r3, r3, #1
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d004      	beq.n	8005eba <USB_EPStartXfer+0x1052>
 8005eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	029b      	lsls	r3, r3, #10
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ec8:	801a      	strh	r2, [r3, #0]
 8005eca:	e045      	b.n	8005f58 <USB_EPStartXfer+0x10f0>
 8005ecc:	463b      	mov	r3, r7
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	095b      	lsrs	r3, r3, #5
 8005ed4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005ed8:	463b      	mov	r3, r7
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	f003 031f 	and.w	r3, r3, #31
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d104      	bne.n	8005ef0 <USB_EPStartXfer+0x1088>
 8005ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eea:	3b01      	subs	r3, #1
 8005eec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	029b      	lsls	r3, r3, #10
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005efe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f08:	801a      	strh	r2, [r3, #0]
 8005f0a:	e025      	b.n	8005f58 <USB_EPStartXfer+0x10f0>
 8005f0c:	463b      	mov	r3, r7
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	785b      	ldrb	r3, [r3, #1]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d120      	bne.n	8005f58 <USB_EPStartXfer+0x10f0>
 8005f16:	1d3b      	adds	r3, r7, #4
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005f1e:	1d3b      	adds	r3, r7, #4
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	461a      	mov	r2, r3
 8005f2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f2e:	4413      	add	r3, r2
 8005f30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005f34:	463b      	mov	r3, r7
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	011a      	lsls	r2, r3, #4
 8005f3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f40:	4413      	add	r3, r2
 8005f42:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f46:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f4a:	463b      	mov	r3, r7
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005f56:	801a      	strh	r2, [r3, #0]
 8005f58:	1d3b      	adds	r3, r7, #4
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f60:	463b      	mov	r3, r7
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	785b      	ldrb	r3, [r3, #1]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d175      	bne.n	8006056 <USB_EPStartXfer+0x11ee>
 8005f6a:	1d3b      	adds	r3, r7, #4
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005f72:	1d3b      	adds	r3, r7, #4
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005f82:	4413      	add	r3, r2
 8005f84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005f88:	463b      	mov	r3, r7
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	011a      	lsls	r2, r3, #4
 8005f90:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005f94:	4413      	add	r3, r2
 8005f96:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f9a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f9e:	463b      	mov	r3, r7
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d116      	bne.n	8005fd6 <USB_EPStartXfer+0x116e>
 8005fa8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005fac:	881b      	ldrh	r3, [r3, #0]
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005fba:	801a      	strh	r2, [r3, #0]
 8005fbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005fc0:	881b      	ldrh	r3, [r3, #0]
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005fd2:	801a      	strh	r2, [r3, #0]
 8005fd4:	e061      	b.n	800609a <USB_EPStartXfer+0x1232>
 8005fd6:	463b      	mov	r3, r7
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	2b3e      	cmp	r3, #62	; 0x3e
 8005fde:	d81a      	bhi.n	8006016 <USB_EPStartXfer+0x11ae>
 8005fe0:	463b      	mov	r3, r7
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	085b      	lsrs	r3, r3, #1
 8005fe8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005fec:	463b      	mov	r3, r7
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	f003 0301 	and.w	r3, r3, #1
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d004      	beq.n	8006004 <USB_EPStartXfer+0x119c>
 8005ffa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ffe:	3301      	adds	r3, #1
 8006000:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006004:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006008:	b29b      	uxth	r3, r3
 800600a:	029b      	lsls	r3, r3, #10
 800600c:	b29a      	uxth	r2, r3
 800600e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006012:	801a      	strh	r2, [r3, #0]
 8006014:	e041      	b.n	800609a <USB_EPStartXfer+0x1232>
 8006016:	463b      	mov	r3, r7
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	095b      	lsrs	r3, r3, #5
 800601e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006022:	463b      	mov	r3, r7
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	f003 031f 	and.w	r3, r3, #31
 800602c:	2b00      	cmp	r3, #0
 800602e:	d104      	bne.n	800603a <USB_EPStartXfer+0x11d2>
 8006030:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006034:	3b01      	subs	r3, #1
 8006036:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800603a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800603e:	b29b      	uxth	r3, r3
 8006040:	029b      	lsls	r3, r3, #10
 8006042:	b29b      	uxth	r3, r3
 8006044:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006048:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800604c:	b29a      	uxth	r2, r3
 800604e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006052:	801a      	strh	r2, [r3, #0]
 8006054:	e021      	b.n	800609a <USB_EPStartXfer+0x1232>
 8006056:	463b      	mov	r3, r7
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	785b      	ldrb	r3, [r3, #1]
 800605c:	2b01      	cmp	r3, #1
 800605e:	d11c      	bne.n	800609a <USB_EPStartXfer+0x1232>
 8006060:	1d3b      	adds	r3, r7, #4
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006068:	b29b      	uxth	r3, r3
 800606a:	461a      	mov	r2, r3
 800606c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006070:	4413      	add	r3, r2
 8006072:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006076:	463b      	mov	r3, r7
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	011a      	lsls	r2, r3, #4
 800607e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006082:	4413      	add	r3, r2
 8006084:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006088:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800608c:	463b      	mov	r3, r7
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	b29a      	uxth	r2, r3
 8006094:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006098:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800609a:	463b      	mov	r3, r7
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	69db      	ldr	r3, [r3, #28]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f000 81a4 	beq.w	80063ee <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80060a6:	1d3b      	adds	r3, r7, #4
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	463b      	mov	r3, r7
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	4413      	add	r3, r2
 80060b4:	881b      	ldrh	r3, [r3, #0]
 80060b6:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80060ba:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80060be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d005      	beq.n	80060d2 <USB_EPStartXfer+0x126a>
 80060c6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80060ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10d      	bne.n	80060ee <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80060d2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80060d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f040 8187 	bne.w	80063ee <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80060e0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80060e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f040 8180 	bne.w	80063ee <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80060ee:	1d3b      	adds	r3, r7, #4
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	463b      	mov	r3, r7
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4413      	add	r3, r2
 80060fc:	881b      	ldrh	r3, [r3, #0]
 80060fe:	b29b      	uxth	r3, r3
 8006100:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006108:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800610c:	1d3b      	adds	r3, r7, #4
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	463b      	mov	r3, r7
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	441a      	add	r2, r3
 800611a:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800611e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006122:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006126:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800612a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800612e:	b29b      	uxth	r3, r3
 8006130:	8013      	strh	r3, [r2, #0]
 8006132:	e15c      	b.n	80063ee <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006134:	463b      	mov	r3, r7
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	78db      	ldrb	r3, [r3, #3]
 800613a:	2b01      	cmp	r3, #1
 800613c:	f040 8155 	bne.w	80063ea <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006140:	463b      	mov	r3, r7
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	699a      	ldr	r2, [r3, #24]
 8006146:	463b      	mov	r3, r7
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	429a      	cmp	r2, r3
 800614e:	d90e      	bls.n	800616e <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8006150:	463b      	mov	r3, r7
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800615a:	463b      	mov	r3, r7
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	699a      	ldr	r2, [r3, #24]
 8006160:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006164:	1ad2      	subs	r2, r2, r3
 8006166:	463b      	mov	r3, r7
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	619a      	str	r2, [r3, #24]
 800616c:	e008      	b.n	8006180 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 800616e:	463b      	mov	r3, r7
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006178:	463b      	mov	r3, r7
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2200      	movs	r2, #0
 800617e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006180:	463b      	mov	r3, r7
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	785b      	ldrb	r3, [r3, #1]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d16f      	bne.n	800626a <USB_EPStartXfer+0x1402>
 800618a:	1d3b      	adds	r3, r7, #4
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006192:	1d3b      	adds	r3, r7, #4
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800619a:	b29b      	uxth	r3, r3
 800619c:	461a      	mov	r2, r3
 800619e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80061a2:	4413      	add	r3, r2
 80061a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80061a8:	463b      	mov	r3, r7
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	011a      	lsls	r2, r3, #4
 80061b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80061b4:	4413      	add	r3, r2
 80061b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80061be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d116      	bne.n	80061f4 <USB_EPStartXfer+0x138c>
 80061c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80061ca:	881b      	ldrh	r3, [r3, #0]
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80061d8:	801a      	strh	r2, [r3, #0]
 80061da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80061de:	881b      	ldrh	r3, [r3, #0]
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80061f0:	801a      	strh	r2, [r3, #0]
 80061f2:	e05f      	b.n	80062b4 <USB_EPStartXfer+0x144c>
 80061f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061f8:	2b3e      	cmp	r3, #62	; 0x3e
 80061fa:	d818      	bhi.n	800622e <USB_EPStartXfer+0x13c6>
 80061fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006200:	085b      	lsrs	r3, r3, #1
 8006202:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006206:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800620a:	f003 0301 	and.w	r3, r3, #1
 800620e:	2b00      	cmp	r3, #0
 8006210:	d004      	beq.n	800621c <USB_EPStartXfer+0x13b4>
 8006212:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006216:	3301      	adds	r3, #1
 8006218:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800621c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006220:	b29b      	uxth	r3, r3
 8006222:	029b      	lsls	r3, r3, #10
 8006224:	b29a      	uxth	r2, r3
 8006226:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800622a:	801a      	strh	r2, [r3, #0]
 800622c:	e042      	b.n	80062b4 <USB_EPStartXfer+0x144c>
 800622e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006232:	095b      	lsrs	r3, r3, #5
 8006234:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006238:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800623c:	f003 031f 	and.w	r3, r3, #31
 8006240:	2b00      	cmp	r3, #0
 8006242:	d104      	bne.n	800624e <USB_EPStartXfer+0x13e6>
 8006244:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006248:	3b01      	subs	r3, #1
 800624a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800624e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006252:	b29b      	uxth	r3, r3
 8006254:	029b      	lsls	r3, r3, #10
 8006256:	b29b      	uxth	r3, r3
 8006258:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800625c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006260:	b29a      	uxth	r2, r3
 8006262:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006266:	801a      	strh	r2, [r3, #0]
 8006268:	e024      	b.n	80062b4 <USB_EPStartXfer+0x144c>
 800626a:	463b      	mov	r3, r7
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	785b      	ldrb	r3, [r3, #1]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d11f      	bne.n	80062b4 <USB_EPStartXfer+0x144c>
 8006274:	1d3b      	adds	r3, r7, #4
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800627c:	1d3b      	adds	r3, r7, #4
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006284:	b29b      	uxth	r3, r3
 8006286:	461a      	mov	r2, r3
 8006288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800628c:	4413      	add	r3, r2
 800628e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006292:	463b      	mov	r3, r7
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	011a      	lsls	r2, r3, #4
 800629a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800629e:	4413      	add	r3, r2
 80062a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062a4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80062a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80062b2:	801a      	strh	r2, [r3, #0]
 80062b4:	1d3b      	adds	r3, r7, #4
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80062bc:	463b      	mov	r3, r7
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	785b      	ldrb	r3, [r3, #1]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d16f      	bne.n	80063a6 <USB_EPStartXfer+0x153e>
 80062c6:	1d3b      	adds	r3, r7, #4
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80062ce:	1d3b      	adds	r3, r7, #4
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	461a      	mov	r2, r3
 80062da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062de:	4413      	add	r3, r2
 80062e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80062e4:	463b      	mov	r3, r7
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	011a      	lsls	r2, r3, #4
 80062ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062f0:	4413      	add	r3, r2
 80062f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80062fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d116      	bne.n	8006330 <USB_EPStartXfer+0x14c8>
 8006302:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006306:	881b      	ldrh	r3, [r3, #0]
 8006308:	b29b      	uxth	r3, r3
 800630a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800630e:	b29a      	uxth	r2, r3
 8006310:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006314:	801a      	strh	r2, [r3, #0]
 8006316:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800631a:	881b      	ldrh	r3, [r3, #0]
 800631c:	b29b      	uxth	r3, r3
 800631e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006322:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006326:	b29a      	uxth	r2, r3
 8006328:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800632c:	801a      	strh	r2, [r3, #0]
 800632e:	e05e      	b.n	80063ee <USB_EPStartXfer+0x1586>
 8006330:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006334:	2b3e      	cmp	r3, #62	; 0x3e
 8006336:	d818      	bhi.n	800636a <USB_EPStartXfer+0x1502>
 8006338:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800633c:	085b      	lsrs	r3, r3, #1
 800633e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006342:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006346:	f003 0301 	and.w	r3, r3, #1
 800634a:	2b00      	cmp	r3, #0
 800634c:	d004      	beq.n	8006358 <USB_EPStartXfer+0x14f0>
 800634e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006352:	3301      	adds	r3, #1
 8006354:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006358:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800635c:	b29b      	uxth	r3, r3
 800635e:	029b      	lsls	r3, r3, #10
 8006360:	b29a      	uxth	r2, r3
 8006362:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006366:	801a      	strh	r2, [r3, #0]
 8006368:	e041      	b.n	80063ee <USB_EPStartXfer+0x1586>
 800636a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800636e:	095b      	lsrs	r3, r3, #5
 8006370:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006374:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006378:	f003 031f 	and.w	r3, r3, #31
 800637c:	2b00      	cmp	r3, #0
 800637e:	d104      	bne.n	800638a <USB_EPStartXfer+0x1522>
 8006380:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006384:	3b01      	subs	r3, #1
 8006386:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800638a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800638e:	b29b      	uxth	r3, r3
 8006390:	029b      	lsls	r3, r3, #10
 8006392:	b29b      	uxth	r3, r3
 8006394:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006398:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800639c:	b29a      	uxth	r2, r3
 800639e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063a2:	801a      	strh	r2, [r3, #0]
 80063a4:	e023      	b.n	80063ee <USB_EPStartXfer+0x1586>
 80063a6:	463b      	mov	r3, r7
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	785b      	ldrb	r3, [r3, #1]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d11e      	bne.n	80063ee <USB_EPStartXfer+0x1586>
 80063b0:	1d3b      	adds	r3, r7, #4
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	461a      	mov	r2, r3
 80063bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063c0:	4413      	add	r3, r2
 80063c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063c6:	463b      	mov	r3, r7
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	011a      	lsls	r2, r3, #4
 80063ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063d2:	4413      	add	r3, r2
 80063d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80063dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063e0:	b29a      	uxth	r2, r3
 80063e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063e6:	801a      	strh	r2, [r3, #0]
 80063e8:	e001      	b.n	80063ee <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e02e      	b.n	800644c <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80063ee:	1d3b      	adds	r3, r7, #4
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	463b      	mov	r3, r7
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	4413      	add	r3, r2
 80063fc:	881b      	ldrh	r3, [r3, #0]
 80063fe:	b29b      	uxth	r3, r3
 8006400:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006408:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800640c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006410:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006414:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006418:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800641c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006420:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006424:	1d3b      	adds	r3, r7, #4
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	463b      	mov	r3, r7
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	441a      	add	r2, r3
 8006432:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006436:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800643a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800643e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006446:	b29b      	uxth	r3, r3
 8006448:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}

08006456 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006456:	b480      	push	{r7}
 8006458:	b085      	sub	sp, #20
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
 800645e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	785b      	ldrb	r3, [r3, #1]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d020      	beq.n	80064aa <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	4413      	add	r3, r2
 8006472:	881b      	ldrh	r3, [r3, #0]
 8006474:	b29b      	uxth	r3, r3
 8006476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800647a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800647e:	81bb      	strh	r3, [r7, #12]
 8006480:	89bb      	ldrh	r3, [r7, #12]
 8006482:	f083 0310 	eor.w	r3, r3, #16
 8006486:	81bb      	strh	r3, [r7, #12]
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	441a      	add	r2, r3
 8006492:	89bb      	ldrh	r3, [r7, #12]
 8006494:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006498:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800649c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	8013      	strh	r3, [r2, #0]
 80064a8:	e01f      	b.n	80064ea <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	4413      	add	r3, r2
 80064b4:	881b      	ldrh	r3, [r3, #0]
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064c0:	81fb      	strh	r3, [r7, #14]
 80064c2:	89fb      	ldrh	r3, [r7, #14]
 80064c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80064c8:	81fb      	strh	r3, [r7, #14]
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	441a      	add	r2, r3
 80064d4:	89fb      	ldrh	r3, [r7, #14]
 80064d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3714      	adds	r7, #20
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bc80      	pop	{r7}
 80064f4:	4770      	bx	lr

080064f6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80064f6:	b480      	push	{r7}
 80064f8:	b087      	sub	sp, #28
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
 80064fe:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	7b1b      	ldrb	r3, [r3, #12]
 8006504:	2b00      	cmp	r3, #0
 8006506:	f040 809d 	bne.w	8006644 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	785b      	ldrb	r3, [r3, #1]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d04c      	beq.n	80065ac <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	4413      	add	r3, r2
 800651c:	881b      	ldrh	r3, [r3, #0]
 800651e:	823b      	strh	r3, [r7, #16]
 8006520:	8a3b      	ldrh	r3, [r7, #16]
 8006522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006526:	2b00      	cmp	r3, #0
 8006528:	d01b      	beq.n	8006562 <USB_EPClearStall+0x6c>
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	4413      	add	r3, r2
 8006534:	881b      	ldrh	r3, [r3, #0]
 8006536:	b29b      	uxth	r3, r3
 8006538:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800653c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006540:	81fb      	strh	r3, [r7, #14]
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	441a      	add	r2, r3
 800654c:	89fb      	ldrh	r3, [r7, #14]
 800654e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006552:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006556:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800655a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800655e:	b29b      	uxth	r3, r3
 8006560:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	78db      	ldrb	r3, [r3, #3]
 8006566:	2b01      	cmp	r3, #1
 8006568:	d06c      	beq.n	8006644 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	4413      	add	r3, r2
 8006574:	881b      	ldrh	r3, [r3, #0]
 8006576:	b29b      	uxth	r3, r3
 8006578:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800657c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006580:	81bb      	strh	r3, [r7, #12]
 8006582:	89bb      	ldrh	r3, [r7, #12]
 8006584:	f083 0320 	eor.w	r3, r3, #32
 8006588:	81bb      	strh	r3, [r7, #12]
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	441a      	add	r2, r3
 8006594:	89bb      	ldrh	r3, [r7, #12]
 8006596:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800659a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800659e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	8013      	strh	r3, [r2, #0]
 80065aa:	e04b      	b.n	8006644 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	4413      	add	r3, r2
 80065b6:	881b      	ldrh	r3, [r3, #0]
 80065b8:	82fb      	strh	r3, [r7, #22]
 80065ba:	8afb      	ldrh	r3, [r7, #22]
 80065bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d01b      	beq.n	80065fc <USB_EPClearStall+0x106>
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	4413      	add	r3, r2
 80065ce:	881b      	ldrh	r3, [r3, #0]
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065da:	82bb      	strh	r3, [r7, #20]
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	441a      	add	r2, r3
 80065e6:	8abb      	ldrh	r3, [r7, #20]
 80065e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	4413      	add	r3, r2
 8006606:	881b      	ldrh	r3, [r3, #0]
 8006608:	b29b      	uxth	r3, r3
 800660a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800660e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006612:	827b      	strh	r3, [r7, #18]
 8006614:	8a7b      	ldrh	r3, [r7, #18]
 8006616:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800661a:	827b      	strh	r3, [r7, #18]
 800661c:	8a7b      	ldrh	r3, [r7, #18]
 800661e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006622:	827b      	strh	r3, [r7, #18]
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	441a      	add	r2, r3
 800662e:	8a7b      	ldrh	r3, [r7, #18]
 8006630:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006634:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006638:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800663c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006640:	b29b      	uxth	r3, r3
 8006642:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	371c      	adds	r7, #28
 800664a:	46bd      	mov	sp, r7
 800664c:	bc80      	pop	{r7}
 800664e:	4770      	bx	lr

08006650 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	460b      	mov	r3, r1
 800665a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800665c:	78fb      	ldrb	r3, [r7, #3]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d103      	bne.n	800666a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2280      	movs	r2, #128	; 0x80
 8006666:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	bc80      	pop	{r7}
 8006674:	4770      	bx	lr

08006676 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006676:	b480      	push	{r7}
 8006678:	b083      	sub	sp, #12
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	bc80      	pop	{r7}
 8006688:	4770      	bx	lr

0800668a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800668a:	b480      	push	{r7}
 800668c:	b083      	sub	sp, #12
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	bc80      	pop	{r7}
 800669c:	4770      	bx	lr

0800669e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800669e:	b480      	push	{r7}
 80066a0:	b085      	sub	sp, #20
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80066b0:	68fb      	ldr	r3, [r7, #12]
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3714      	adds	r7, #20
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bc80      	pop	{r7}
 80066ba:	4770      	bx	lr

080066bc <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bc80      	pop	{r7}
 80066d0:	4770      	bx	lr

080066d2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80066d2:	b480      	push	{r7}
 80066d4:	b08d      	sub	sp, #52	; 0x34
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	60f8      	str	r0, [r7, #12]
 80066da:	60b9      	str	r1, [r7, #8]
 80066dc:	4611      	mov	r1, r2
 80066de:	461a      	mov	r2, r3
 80066e0:	460b      	mov	r3, r1
 80066e2:	80fb      	strh	r3, [r7, #6]
 80066e4:	4613      	mov	r3, r2
 80066e6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80066e8:	88bb      	ldrh	r3, [r7, #4]
 80066ea:	3301      	adds	r3, #1
 80066ec:	085b      	lsrs	r3, r3, #1
 80066ee:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80066f8:	88fb      	ldrh	r3, [r7, #6]
 80066fa:	005a      	lsls	r2, r3, #1
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	4413      	add	r3, r2
 8006700:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006704:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006706:	6a3b      	ldr	r3, [r7, #32]
 8006708:	62fb      	str	r3, [r7, #44]	; 0x2c
 800670a:	e01e      	b.n	800674a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800670c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006714:	3301      	adds	r3, #1
 8006716:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	b29b      	uxth	r3, r3
 800671e:	021b      	lsls	r3, r3, #8
 8006720:	b29b      	uxth	r3, r3
 8006722:	461a      	mov	r2, r3
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	4313      	orrs	r3, r2
 8006728:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	b29a      	uxth	r2, r3
 800672e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006730:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006734:	3302      	adds	r3, #2
 8006736:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673a:	3302      	adds	r3, #2
 800673c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800673e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006740:	3301      	adds	r3, #1
 8006742:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006746:	3b01      	subs	r3, #1
 8006748:	62fb      	str	r3, [r7, #44]	; 0x2c
 800674a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1dd      	bne.n	800670c <USB_WritePMA+0x3a>
  }
}
 8006750:	bf00      	nop
 8006752:	bf00      	nop
 8006754:	3734      	adds	r7, #52	; 0x34
 8006756:	46bd      	mov	sp, r7
 8006758:	bc80      	pop	{r7}
 800675a:	4770      	bx	lr

0800675c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800675c:	b480      	push	{r7}
 800675e:	b08b      	sub	sp, #44	; 0x2c
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	4611      	mov	r1, r2
 8006768:	461a      	mov	r2, r3
 800676a:	460b      	mov	r3, r1
 800676c:	80fb      	strh	r3, [r7, #6]
 800676e:	4613      	mov	r3, r2
 8006770:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006772:	88bb      	ldrh	r3, [r7, #4]
 8006774:	085b      	lsrs	r3, r3, #1
 8006776:	b29b      	uxth	r3, r3
 8006778:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006782:	88fb      	ldrh	r3, [r7, #6]
 8006784:	005a      	lsls	r2, r3, #1
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	4413      	add	r3, r2
 800678a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800678e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	627b      	str	r3, [r7, #36]	; 0x24
 8006794:	e01b      	b.n	80067ce <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006796:	6a3b      	ldr	r3, [r7, #32]
 8006798:	881b      	ldrh	r3, [r3, #0]
 800679a:	b29b      	uxth	r3, r3
 800679c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800679e:	6a3b      	ldr	r3, [r7, #32]
 80067a0:	3302      	adds	r3, #2
 80067a2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	b2da      	uxtb	r2, r3
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	3301      	adds	r3, #1
 80067b0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	0a1b      	lsrs	r3, r3, #8
 80067b6:	b2da      	uxtb	r2, r3
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	3301      	adds	r3, #1
 80067c0:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80067c2:	6a3b      	ldr	r3, [r7, #32]
 80067c4:	3302      	adds	r3, #2
 80067c6:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80067c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ca:	3b01      	subs	r3, #1
 80067cc:	627b      	str	r3, [r7, #36]	; 0x24
 80067ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d1e0      	bne.n	8006796 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80067d4:	88bb      	ldrh	r3, [r7, #4]
 80067d6:	f003 0301 	and.w	r3, r3, #1
 80067da:	b29b      	uxth	r3, r3
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d007      	beq.n	80067f0 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80067e0:	6a3b      	ldr	r3, [r7, #32]
 80067e2:	881b      	ldrh	r3, [r3, #0]
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	b2da      	uxtb	r2, r3
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	701a      	strb	r2, [r3, #0]
  }
}
 80067f0:	bf00      	nop
 80067f2:	372c      	adds	r7, #44	; 0x2c
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bc80      	pop	{r7}
 80067f8:	4770      	bx	lr

080067fa <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b084      	sub	sp, #16
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
 8006802:	460b      	mov	r3, r1
 8006804:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006806:	2300      	movs	r3, #0
 8006808:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	7c1b      	ldrb	r3, [r3, #16]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d115      	bne.n	800683e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006812:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006816:	2202      	movs	r2, #2
 8006818:	2181      	movs	r1, #129	; 0x81
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f001 febd 	bl	800859a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006826:	f44f 7300 	mov.w	r3, #512	; 0x200
 800682a:	2202      	movs	r2, #2
 800682c:	2101      	movs	r1, #1
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f001 feb3 	bl	800859a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800683c:	e012      	b.n	8006864 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800683e:	2340      	movs	r3, #64	; 0x40
 8006840:	2202      	movs	r2, #2
 8006842:	2181      	movs	r1, #129	; 0x81
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f001 fea8 	bl	800859a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2201      	movs	r2, #1
 800684e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006850:	2340      	movs	r3, #64	; 0x40
 8006852:	2202      	movs	r2, #2
 8006854:	2101      	movs	r1, #1
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f001 fe9f 	bl	800859a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006864:	2308      	movs	r3, #8
 8006866:	2203      	movs	r2, #3
 8006868:	2182      	movs	r1, #130	; 0x82
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f001 fe95 	bl	800859a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006876:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800687a:	f001 ffb5 	bl	80087e8 <USBD_static_malloc>
 800687e:	4602      	mov	r2, r0
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800688c:	2b00      	cmp	r3, #0
 800688e:	d102      	bne.n	8006896 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006890:	2301      	movs	r3, #1
 8006892:	73fb      	strb	r3, [r7, #15]
 8006894:	e026      	b.n	80068e4 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800689c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	7c1b      	ldrb	r3, [r3, #16]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d109      	bne.n	80068d4 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068ca:	2101      	movs	r1, #1
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f001 ff55 	bl	800877c <USBD_LL_PrepareReceive>
 80068d2:	e007      	b.n	80068e4 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068da:	2340      	movs	r3, #64	; 0x40
 80068dc:	2101      	movs	r1, #1
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f001 ff4c 	bl	800877c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80068e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}

080068ee <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068ee:	b580      	push	{r7, lr}
 80068f0:	b084      	sub	sp, #16
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
 80068f6:	460b      	mov	r3, r1
 80068f8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80068fa:	2300      	movs	r3, #0
 80068fc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80068fe:	2181      	movs	r1, #129	; 0x81
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f001 fe70 	bl	80085e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800690c:	2101      	movs	r1, #1
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f001 fe69 	bl	80085e6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800691c:	2182      	movs	r1, #130	; 0x82
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f001 fe61 	bl	80085e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006930:	2b00      	cmp	r3, #0
 8006932:	d00e      	beq.n	8006952 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006944:	4618      	mov	r0, r3
 8006946:	f001 ff5b 	bl	8008800 <USBD_static_free>
    pdev->pClassData = NULL;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006952:	7bfb      	ldrb	r3, [r7, #15]
}
 8006954:	4618      	mov	r0, r3
 8006956:	3710      	adds	r7, #16
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b086      	sub	sp, #24
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800696c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800696e:	2300      	movs	r3, #0
 8006970:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006972:	2300      	movs	r3, #0
 8006974:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006976:	2300      	movs	r3, #0
 8006978:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006982:	2b00      	cmp	r3, #0
 8006984:	d039      	beq.n	80069fa <USBD_CDC_Setup+0x9e>
 8006986:	2b20      	cmp	r3, #32
 8006988:	d17f      	bne.n	8006a8a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	88db      	ldrh	r3, [r3, #6]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d029      	beq.n	80069e6 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	b25b      	sxtb	r3, r3
 8006998:	2b00      	cmp	r3, #0
 800699a:	da11      	bge.n	80069c0 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	683a      	ldr	r2, [r7, #0]
 80069a6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80069a8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80069aa:	683a      	ldr	r2, [r7, #0]
 80069ac:	88d2      	ldrh	r2, [r2, #6]
 80069ae:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80069b0:	6939      	ldr	r1, [r7, #16]
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	88db      	ldrh	r3, [r3, #6]
 80069b6:	461a      	mov	r2, r3
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f001 fa0a 	bl	8007dd2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80069be:	e06b      	b.n	8006a98 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	785a      	ldrb	r2, [r3, #1]
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	88db      	ldrh	r3, [r3, #6]
 80069ce:	b2da      	uxtb	r2, r3
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80069d6:	6939      	ldr	r1, [r7, #16]
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	88db      	ldrh	r3, [r3, #6]
 80069dc:	461a      	mov	r2, r3
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f001 fa25 	bl	8007e2e <USBD_CtlPrepareRx>
      break;
 80069e4:	e058      	b.n	8006a98 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	7850      	ldrb	r0, [r2, #1]
 80069f2:	2200      	movs	r2, #0
 80069f4:	6839      	ldr	r1, [r7, #0]
 80069f6:	4798      	blx	r3
      break;
 80069f8:	e04e      	b.n	8006a98 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	785b      	ldrb	r3, [r3, #1]
 80069fe:	2b0b      	cmp	r3, #11
 8006a00:	d02e      	beq.n	8006a60 <USBD_CDC_Setup+0x104>
 8006a02:	2b0b      	cmp	r3, #11
 8006a04:	dc38      	bgt.n	8006a78 <USBD_CDC_Setup+0x11c>
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d002      	beq.n	8006a10 <USBD_CDC_Setup+0xb4>
 8006a0a:	2b0a      	cmp	r3, #10
 8006a0c:	d014      	beq.n	8006a38 <USBD_CDC_Setup+0xdc>
 8006a0e:	e033      	b.n	8006a78 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a16:	2b03      	cmp	r3, #3
 8006a18:	d107      	bne.n	8006a2a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006a1a:	f107 030c 	add.w	r3, r7, #12
 8006a1e:	2202      	movs	r2, #2
 8006a20:	4619      	mov	r1, r3
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f001 f9d5 	bl	8007dd2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a28:	e02e      	b.n	8006a88 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006a2a:	6839      	ldr	r1, [r7, #0]
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f001 f966 	bl	8007cfe <USBD_CtlError>
            ret = USBD_FAIL;
 8006a32:	2302      	movs	r3, #2
 8006a34:	75fb      	strb	r3, [r7, #23]
          break;
 8006a36:	e027      	b.n	8006a88 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a3e:	2b03      	cmp	r3, #3
 8006a40:	d107      	bne.n	8006a52 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006a42:	f107 030f 	add.w	r3, r7, #15
 8006a46:	2201      	movs	r2, #1
 8006a48:	4619      	mov	r1, r3
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f001 f9c1 	bl	8007dd2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a50:	e01a      	b.n	8006a88 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006a52:	6839      	ldr	r1, [r7, #0]
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f001 f952 	bl	8007cfe <USBD_CtlError>
            ret = USBD_FAIL;
 8006a5a:	2302      	movs	r3, #2
 8006a5c:	75fb      	strb	r3, [r7, #23]
          break;
 8006a5e:	e013      	b.n	8006a88 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a66:	2b03      	cmp	r3, #3
 8006a68:	d00d      	beq.n	8006a86 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006a6a:	6839      	ldr	r1, [r7, #0]
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f001 f946 	bl	8007cfe <USBD_CtlError>
            ret = USBD_FAIL;
 8006a72:	2302      	movs	r3, #2
 8006a74:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006a76:	e006      	b.n	8006a86 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006a78:	6839      	ldr	r1, [r7, #0]
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f001 f93f 	bl	8007cfe <USBD_CtlError>
          ret = USBD_FAIL;
 8006a80:	2302      	movs	r3, #2
 8006a82:	75fb      	strb	r3, [r7, #23]
          break;
 8006a84:	e000      	b.n	8006a88 <USBD_CDC_Setup+0x12c>
          break;
 8006a86:	bf00      	nop
      }
      break;
 8006a88:	e006      	b.n	8006a98 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006a8a:	6839      	ldr	r1, [r7, #0]
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f001 f936 	bl	8007cfe <USBD_CtlError>
      ret = USBD_FAIL;
 8006a92:	2302      	movs	r3, #2
 8006a94:	75fb      	strb	r3, [r7, #23]
      break;
 8006a96:	bf00      	nop
  }

  return ret;
 8006a98:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3718      	adds	r7, #24
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b084      	sub	sp, #16
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
 8006aaa:	460b      	mov	r3, r1
 8006aac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ab4:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006abc:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d03a      	beq.n	8006b3e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006ac8:	78fa      	ldrb	r2, [r7, #3]
 8006aca:	6879      	ldr	r1, [r7, #4]
 8006acc:	4613      	mov	r3, r2
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	4413      	add	r3, r2
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	440b      	add	r3, r1
 8006ad6:	331c      	adds	r3, #28
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d029      	beq.n	8006b32 <USBD_CDC_DataIn+0x90>
 8006ade:	78fa      	ldrb	r2, [r7, #3]
 8006ae0:	6879      	ldr	r1, [r7, #4]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	4413      	add	r3, r2
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	440b      	add	r3, r1
 8006aec:	331c      	adds	r3, #28
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	78f9      	ldrb	r1, [r7, #3]
 8006af2:	68b8      	ldr	r0, [r7, #8]
 8006af4:	460b      	mov	r3, r1
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	440b      	add	r3, r1
 8006afa:	00db      	lsls	r3, r3, #3
 8006afc:	4403      	add	r3, r0
 8006afe:	3338      	adds	r3, #56	; 0x38
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	fbb2 f1f3 	udiv	r1, r2, r3
 8006b06:	fb03 f301 	mul.w	r3, r3, r1
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d110      	bne.n	8006b32 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006b10:	78fa      	ldrb	r2, [r7, #3]
 8006b12:	6879      	ldr	r1, [r7, #4]
 8006b14:	4613      	mov	r3, r2
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	4413      	add	r3, r2
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	440b      	add	r3, r1
 8006b1e:	331c      	adds	r3, #28
 8006b20:	2200      	movs	r2, #0
 8006b22:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006b24:	78f9      	ldrb	r1, [r7, #3]
 8006b26:	2300      	movs	r3, #0
 8006b28:	2200      	movs	r2, #0
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f001 fe03 	bl	8008736 <USBD_LL_Transmit>
 8006b30:	e003      	b.n	8006b3a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	e000      	b.n	8006b40 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006b3e:	2302      	movs	r3, #2
  }
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3710      	adds	r7, #16
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	460b      	mov	r3, r1
 8006b52:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b5a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006b5c:	78fb      	ldrb	r3, [r7, #3]
 8006b5e:	4619      	mov	r1, r3
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f001 fe2e 	bl	80087c2 <USBD_LL_GetRxDataSize>
 8006b66:	4602      	mov	r2, r0
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d00d      	beq.n	8006b94 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006b8c:	4611      	mov	r1, r2
 8006b8e:	4798      	blx	r3

    return USBD_OK;
 8006b90:	2300      	movs	r3, #0
 8006b92:	e000      	b.n	8006b96 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006b94:	2302      	movs	r3, #2
  }
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b084      	sub	sp, #16
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bac:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d015      	beq.n	8006be4 <USBD_CDC_EP0_RxReady+0x46>
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006bbe:	2bff      	cmp	r3, #255	; 0xff
 8006bc0:	d010      	beq.n	8006be4 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006bd0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006bd8:	b292      	uxth	r2, r2
 8006bda:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	22ff      	movs	r2, #255	; 0xff
 8006be0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
	...

08006bf0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2243      	movs	r2, #67	; 0x43
 8006bfc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006bfe:	4b03      	ldr	r3, [pc, #12]	; (8006c0c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bc80      	pop	{r7}
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	20000094 	.word	0x20000094

08006c10 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2243      	movs	r2, #67	; 0x43
 8006c1c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006c1e:	4b03      	ldr	r3, [pc, #12]	; (8006c2c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bc80      	pop	{r7}
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	20000050 	.word	0x20000050

08006c30 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2243      	movs	r2, #67	; 0x43
 8006c3c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006c3e:	4b03      	ldr	r3, [pc, #12]	; (8006c4c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bc80      	pop	{r7}
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	200000d8 	.word	0x200000d8

08006c50 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	220a      	movs	r2, #10
 8006c5c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006c5e:	4b03      	ldr	r3, [pc, #12]	; (8006c6c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bc80      	pop	{r7}
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop
 8006c6c:	2000000c 	.word	0x2000000c

08006c70 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006c7a:	2302      	movs	r3, #2
 8006c7c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d005      	beq.n	8006c90 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	683a      	ldr	r2, [r7, #0]
 8006c88:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3714      	adds	r7, #20
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bc80      	pop	{r7}
 8006c9a:	4770      	bx	lr

08006c9c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b087      	sub	sp, #28
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cb0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	68ba      	ldr	r2, [r7, #8]
 8006cb6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006cba:	88fa      	ldrh	r2, [r7, #6]
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	371c      	adds	r7, #28
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bc80      	pop	{r7}
 8006ccc:	4770      	bx	lr

08006cce <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006cce:	b480      	push	{r7}
 8006cd0:	b085      	sub	sp, #20
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
 8006cd6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cde:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	683a      	ldr	r2, [r7, #0]
 8006ce4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3714      	adds	r7, #20
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bc80      	pop	{r7}
 8006cf2:	4770      	bx	lr

08006cf4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d02:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d01c      	beq.n	8006d48 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d115      	bne.n	8006d44 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	2181      	movs	r1, #129	; 0x81
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f001 fcfb 	bl	8008736 <USBD_LL_Transmit>

      return USBD_OK;
 8006d40:	2300      	movs	r3, #0
 8006d42:	e002      	b.n	8006d4a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006d44:	2301      	movs	r3, #1
 8006d46:	e000      	b.n	8006d4a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006d48:	2302      	movs	r3, #2
  }
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3710      	adds	r7, #16
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}

08006d52 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b084      	sub	sp, #16
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d60:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d017      	beq.n	8006d9c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	7c1b      	ldrb	r3, [r3, #16]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d109      	bne.n	8006d88 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d7e:	2101      	movs	r1, #1
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f001 fcfb 	bl	800877c <USBD_LL_PrepareReceive>
 8006d86:	e007      	b.n	8006d98 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d8e:	2340      	movs	r3, #64	; 0x40
 8006d90:	2101      	movs	r1, #1
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f001 fcf2 	bl	800877c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	e000      	b.n	8006d9e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006d9c:	2302      	movs	r3, #2
  }
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b084      	sub	sp, #16
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	60f8      	str	r0, [r7, #12]
 8006dae:	60b9      	str	r1, [r7, #8]
 8006db0:	4613      	mov	r3, r2
 8006db2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d101      	bne.n	8006dbe <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006dba:	2302      	movs	r3, #2
 8006dbc:	e01a      	b.n	8006df4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d003      	beq.n	8006dd0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d003      	beq.n	8006dde <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	68ba      	ldr	r2, [r7, #8]
 8006dda:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2201      	movs	r2, #1
 8006de2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	79fa      	ldrb	r2, [r7, #7]
 8006dea:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f001 fb5f 	bl	80084b0 <USBD_LL_Init>

  return USBD_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3710      	adds	r7, #16
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b085      	sub	sp, #20
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006e06:	2300      	movs	r3, #0
 8006e08:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d006      	beq.n	8006e1e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	683a      	ldr	r2, [r7, #0]
 8006e14:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	73fb      	strb	r3, [r7, #15]
 8006e1c:	e001      	b.n	8006e22 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006e1e:	2302      	movs	r3, #2
 8006e20:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3714      	adds	r7, #20
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bc80      	pop	{r7}
 8006e2c:	4770      	bx	lr

08006e2e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006e2e:	b580      	push	{r7, lr}
 8006e30:	b082      	sub	sp, #8
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f001 fb94 	bl	8008564 <USBD_LL_Start>

  return USBD_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3708      	adds	r7, #8
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006e46:	b480      	push	{r7}
 8006e48:	b083      	sub	sp, #12
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bc80      	pop	{r7}
 8006e58:	4770      	bx	lr

08006e5a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006e5a:	b580      	push	{r7, lr}
 8006e5c:	b084      	sub	sp, #16
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
 8006e62:	460b      	mov	r3, r1
 8006e64:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006e66:	2302      	movs	r3, #2
 8006e68:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00c      	beq.n	8006e8e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	78fa      	ldrb	r2, [r7, #3]
 8006e7e:	4611      	mov	r1, r2
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	4798      	blx	r3
 8006e84:	4603      	mov	r3, r0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d101      	bne.n	8006e8e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	78fa      	ldrb	r2, [r7, #3]
 8006eae:	4611      	mov	r1, r2
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	4798      	blx	r3

  return USBD_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3708      	adds	r7, #8
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b082      	sub	sp, #8
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
 8006ec6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006ece:	6839      	ldr	r1, [r7, #0]
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f000 fed8 	bl	8007c86 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006ef2:	f003 031f 	and.w	r3, r3, #31
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	d016      	beq.n	8006f28 <USBD_LL_SetupStage+0x6a>
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d81c      	bhi.n	8006f38 <USBD_LL_SetupStage+0x7a>
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d002      	beq.n	8006f08 <USBD_LL_SetupStage+0x4a>
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d008      	beq.n	8006f18 <USBD_LL_SetupStage+0x5a>
 8006f06:	e017      	b.n	8006f38 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006f0e:	4619      	mov	r1, r3
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 f9cb 	bl	80072ac <USBD_StdDevReq>
      break;
 8006f16:	e01a      	b.n	8006f4e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006f1e:	4619      	mov	r1, r3
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 fa2d 	bl	8007380 <USBD_StdItfReq>
      break;
 8006f26:	e012      	b.n	8006f4e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006f2e:	4619      	mov	r1, r3
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 fa6d 	bl	8007410 <USBD_StdEPReq>
      break;
 8006f36:	e00a      	b.n	8006f4e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006f3e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	4619      	mov	r1, r3
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f001 fb6c 	bl	8008624 <USBD_LL_StallEP>
      break;
 8006f4c:	bf00      	nop
  }

  return USBD_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3708      	adds	r7, #8
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b086      	sub	sp, #24
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	460b      	mov	r3, r1
 8006f62:	607a      	str	r2, [r7, #4]
 8006f64:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006f66:	7afb      	ldrb	r3, [r7, #11]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d14b      	bne.n	8007004 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006f72:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f7a:	2b03      	cmp	r3, #3
 8006f7c:	d134      	bne.n	8006fe8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	68da      	ldr	r2, [r3, #12]
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d919      	bls.n	8006fbe <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	68da      	ldr	r2, [r3, #12]
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	1ad2      	subs	r2, r2, r3
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	68da      	ldr	r2, [r3, #12]
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d203      	bcs.n	8006fac <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	e002      	b.n	8006fb2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	6879      	ldr	r1, [r7, #4]
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	f000 ff57 	bl	8007e6a <USBD_CtlContinueRx>
 8006fbc:	e038      	b.n	8007030 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00a      	beq.n	8006fe0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006fd0:	2b03      	cmp	r3, #3
 8006fd2:	d105      	bne.n	8006fe0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	f000 ff54 	bl	8007e8e <USBD_CtlSendStatus>
 8006fe6:	e023      	b.n	8007030 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006fee:	2b05      	cmp	r3, #5
 8006ff0:	d11e      	bne.n	8007030 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006ffa:	2100      	movs	r1, #0
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f001 fb11 	bl	8008624 <USBD_LL_StallEP>
 8007002:	e015      	b.n	8007030 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800700a:	699b      	ldr	r3, [r3, #24]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d00d      	beq.n	800702c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007016:	2b03      	cmp	r3, #3
 8007018:	d108      	bne.n	800702c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007020:	699b      	ldr	r3, [r3, #24]
 8007022:	7afa      	ldrb	r2, [r7, #11]
 8007024:	4611      	mov	r1, r2
 8007026:	68f8      	ldr	r0, [r7, #12]
 8007028:	4798      	blx	r3
 800702a:	e001      	b.n	8007030 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800702c:	2302      	movs	r3, #2
 800702e:	e000      	b.n	8007032 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	3718      	adds	r7, #24
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}

0800703a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b086      	sub	sp, #24
 800703e:	af00      	add	r7, sp, #0
 8007040:	60f8      	str	r0, [r7, #12]
 8007042:	460b      	mov	r3, r1
 8007044:	607a      	str	r2, [r7, #4]
 8007046:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007048:	7afb      	ldrb	r3, [r7, #11]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d17f      	bne.n	800714e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	3314      	adds	r3, #20
 8007052:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800705a:	2b02      	cmp	r3, #2
 800705c:	d15c      	bne.n	8007118 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	68da      	ldr	r2, [r3, #12]
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	691b      	ldr	r3, [r3, #16]
 8007066:	429a      	cmp	r2, r3
 8007068:	d915      	bls.n	8007096 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	68da      	ldr	r2, [r3, #12]
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	1ad2      	subs	r2, r2, r3
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	b29b      	uxth	r3, r3
 800707e:	461a      	mov	r2, r3
 8007080:	6879      	ldr	r1, [r7, #4]
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	f000 fec1 	bl	8007e0a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007088:	2300      	movs	r3, #0
 800708a:	2200      	movs	r2, #0
 800708c:	2100      	movs	r1, #0
 800708e:	68f8      	ldr	r0, [r7, #12]
 8007090:	f001 fb74 	bl	800877c <USBD_LL_PrepareReceive>
 8007094:	e04e      	b.n	8007134 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	697a      	ldr	r2, [r7, #20]
 800709c:	6912      	ldr	r2, [r2, #16]
 800709e:	fbb3 f1f2 	udiv	r1, r3, r2
 80070a2:	fb02 f201 	mul.w	r2, r2, r1
 80070a6:	1a9b      	subs	r3, r3, r2
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d11c      	bne.n	80070e6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	689a      	ldr	r2, [r3, #8]
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d316      	bcc.n	80070e6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	689a      	ldr	r2, [r3, #8]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d20f      	bcs.n	80070e6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80070c6:	2200      	movs	r2, #0
 80070c8:	2100      	movs	r1, #0
 80070ca:	68f8      	ldr	r0, [r7, #12]
 80070cc:	f000 fe9d 	bl	8007e0a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070d8:	2300      	movs	r3, #0
 80070da:	2200      	movs	r2, #0
 80070dc:	2100      	movs	r1, #0
 80070de:	68f8      	ldr	r0, [r7, #12]
 80070e0:	f001 fb4c 	bl	800877c <USBD_LL_PrepareReceive>
 80070e4:	e026      	b.n	8007134 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00a      	beq.n	8007108 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80070f8:	2b03      	cmp	r3, #3
 80070fa:	d105      	bne.n	8007108 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	68f8      	ldr	r0, [r7, #12]
 8007106:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007108:	2180      	movs	r1, #128	; 0x80
 800710a:	68f8      	ldr	r0, [r7, #12]
 800710c:	f001 fa8a 	bl	8008624 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f000 fecf 	bl	8007eb4 <USBD_CtlReceiveStatus>
 8007116:	e00d      	b.n	8007134 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800711e:	2b04      	cmp	r3, #4
 8007120:	d004      	beq.n	800712c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007128:	2b00      	cmp	r3, #0
 800712a:	d103      	bne.n	8007134 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800712c:	2180      	movs	r1, #128	; 0x80
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f001 fa78 	bl	8008624 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800713a:	2b01      	cmp	r3, #1
 800713c:	d11d      	bne.n	800717a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f7ff fe81 	bl	8006e46 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800714c:	e015      	b.n	800717a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007154:	695b      	ldr	r3, [r3, #20]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00d      	beq.n	8007176 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007160:	2b03      	cmp	r3, #3
 8007162:	d108      	bne.n	8007176 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800716a:	695b      	ldr	r3, [r3, #20]
 800716c:	7afa      	ldrb	r2, [r7, #11]
 800716e:	4611      	mov	r1, r2
 8007170:	68f8      	ldr	r0, [r7, #12]
 8007172:	4798      	blx	r3
 8007174:	e001      	b.n	800717a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007176:	2302      	movs	r3, #2
 8007178:	e000      	b.n	800717c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	3718      	adds	r7, #24
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800718c:	2340      	movs	r3, #64	; 0x40
 800718e:	2200      	movs	r2, #0
 8007190:	2100      	movs	r1, #0
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f001 fa01 	bl	800859a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2240      	movs	r2, #64	; 0x40
 80071a4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80071a8:	2340      	movs	r3, #64	; 0x40
 80071aa:	2200      	movs	r2, #0
 80071ac:	2180      	movs	r1, #128	; 0x80
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f001 f9f3 	bl	800859a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2240      	movs	r2, #64	; 0x40
 80071be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d009      	beq.n	80071fc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	6852      	ldr	r2, [r2, #4]
 80071f4:	b2d2      	uxtb	r2, r2
 80071f6:	4611      	mov	r1, r2
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	4798      	blx	r3
  }

  return USBD_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3708      	adds	r7, #8
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}

08007206 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007206:	b480      	push	{r7}
 8007208:	b083      	sub	sp, #12
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
 800720e:	460b      	mov	r3, r1
 8007210:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	78fa      	ldrb	r2, [r7, #3]
 8007216:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	370c      	adds	r7, #12
 800721e:	46bd      	mov	sp, r7
 8007220:	bc80      	pop	{r7}
 8007222:	4770      	bx	lr

08007224 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2204      	movs	r2, #4
 800723c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	370c      	adds	r7, #12
 8007246:	46bd      	mov	sp, r7
 8007248:	bc80      	pop	{r7}
 800724a:	4770      	bx	lr

0800724c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800725a:	2b04      	cmp	r3, #4
 800725c:	d105      	bne.n	800726a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	bc80      	pop	{r7}
 8007274:	4770      	bx	lr

08007276 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007276:	b580      	push	{r7, lr}
 8007278:	b082      	sub	sp, #8
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007284:	2b03      	cmp	r3, #3
 8007286:	d10b      	bne.n	80072a0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800728e:	69db      	ldr	r3, [r3, #28]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d005      	beq.n	80072a0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800729a:	69db      	ldr	r3, [r3, #28]
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3708      	adds	r7, #8
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
	...

080072ac <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072b6:	2300      	movs	r3, #0
 80072b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072c2:	2b40      	cmp	r3, #64	; 0x40
 80072c4:	d005      	beq.n	80072d2 <USBD_StdDevReq+0x26>
 80072c6:	2b40      	cmp	r3, #64	; 0x40
 80072c8:	d84f      	bhi.n	800736a <USBD_StdDevReq+0xbe>
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d009      	beq.n	80072e2 <USBD_StdDevReq+0x36>
 80072ce:	2b20      	cmp	r3, #32
 80072d0:	d14b      	bne.n	800736a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	6839      	ldr	r1, [r7, #0]
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	4798      	blx	r3
      break;
 80072e0:	e048      	b.n	8007374 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	785b      	ldrb	r3, [r3, #1]
 80072e6:	2b09      	cmp	r3, #9
 80072e8:	d839      	bhi.n	800735e <USBD_StdDevReq+0xb2>
 80072ea:	a201      	add	r2, pc, #4	; (adr r2, 80072f0 <USBD_StdDevReq+0x44>)
 80072ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f0:	08007341 	.word	0x08007341
 80072f4:	08007355 	.word	0x08007355
 80072f8:	0800735f 	.word	0x0800735f
 80072fc:	0800734b 	.word	0x0800734b
 8007300:	0800735f 	.word	0x0800735f
 8007304:	08007323 	.word	0x08007323
 8007308:	08007319 	.word	0x08007319
 800730c:	0800735f 	.word	0x0800735f
 8007310:	08007337 	.word	0x08007337
 8007314:	0800732d 	.word	0x0800732d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007318:	6839      	ldr	r1, [r7, #0]
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 f9dc 	bl	80076d8 <USBD_GetDescriptor>
          break;
 8007320:	e022      	b.n	8007368 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007322:	6839      	ldr	r1, [r7, #0]
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 fb3f 	bl	80079a8 <USBD_SetAddress>
          break;
 800732a:	e01d      	b.n	8007368 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800732c:	6839      	ldr	r1, [r7, #0]
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 fb7e 	bl	8007a30 <USBD_SetConfig>
          break;
 8007334:	e018      	b.n	8007368 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007336:	6839      	ldr	r1, [r7, #0]
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 fc07 	bl	8007b4c <USBD_GetConfig>
          break;
 800733e:	e013      	b.n	8007368 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007340:	6839      	ldr	r1, [r7, #0]
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 fc37 	bl	8007bb6 <USBD_GetStatus>
          break;
 8007348:	e00e      	b.n	8007368 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800734a:	6839      	ldr	r1, [r7, #0]
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 fc65 	bl	8007c1c <USBD_SetFeature>
          break;
 8007352:	e009      	b.n	8007368 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007354:	6839      	ldr	r1, [r7, #0]
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 fc74 	bl	8007c44 <USBD_ClrFeature>
          break;
 800735c:	e004      	b.n	8007368 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800735e:	6839      	ldr	r1, [r7, #0]
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 fccc 	bl	8007cfe <USBD_CtlError>
          break;
 8007366:	bf00      	nop
      }
      break;
 8007368:	e004      	b.n	8007374 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800736a:	6839      	ldr	r1, [r7, #0]
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 fcc6 	bl	8007cfe <USBD_CtlError>
      break;
 8007372:	bf00      	nop
  }

  return ret;
 8007374:	7bfb      	ldrb	r3, [r7, #15]
}
 8007376:	4618      	mov	r0, r3
 8007378:	3710      	adds	r7, #16
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop

08007380 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800738a:	2300      	movs	r3, #0
 800738c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007396:	2b40      	cmp	r3, #64	; 0x40
 8007398:	d005      	beq.n	80073a6 <USBD_StdItfReq+0x26>
 800739a:	2b40      	cmp	r3, #64	; 0x40
 800739c:	d82e      	bhi.n	80073fc <USBD_StdItfReq+0x7c>
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d001      	beq.n	80073a6 <USBD_StdItfReq+0x26>
 80073a2:	2b20      	cmp	r3, #32
 80073a4:	d12a      	bne.n	80073fc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073ac:	3b01      	subs	r3, #1
 80073ae:	2b02      	cmp	r3, #2
 80073b0:	d81d      	bhi.n	80073ee <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	889b      	ldrh	r3, [r3, #4]
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d813      	bhi.n	80073e4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	6839      	ldr	r1, [r7, #0]
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	4798      	blx	r3
 80073ca:	4603      	mov	r3, r0
 80073cc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	88db      	ldrh	r3, [r3, #6]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d110      	bne.n	80073f8 <USBD_StdItfReq+0x78>
 80073d6:	7bfb      	ldrb	r3, [r7, #15]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d10d      	bne.n	80073f8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 fd56 	bl	8007e8e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80073e2:	e009      	b.n	80073f8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80073e4:	6839      	ldr	r1, [r7, #0]
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 fc89 	bl	8007cfe <USBD_CtlError>
          break;
 80073ec:	e004      	b.n	80073f8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80073ee:	6839      	ldr	r1, [r7, #0]
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 fc84 	bl	8007cfe <USBD_CtlError>
          break;
 80073f6:	e000      	b.n	80073fa <USBD_StdItfReq+0x7a>
          break;
 80073f8:	bf00      	nop
      }
      break;
 80073fa:	e004      	b.n	8007406 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80073fc:	6839      	ldr	r1, [r7, #0]
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 fc7d 	bl	8007cfe <USBD_CtlError>
      break;
 8007404:	bf00      	nop
  }

  return USBD_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	3710      	adds	r7, #16
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800741a:	2300      	movs	r3, #0
 800741c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	889b      	ldrh	r3, [r3, #4]
 8007422:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800742c:	2b40      	cmp	r3, #64	; 0x40
 800742e:	d007      	beq.n	8007440 <USBD_StdEPReq+0x30>
 8007430:	2b40      	cmp	r3, #64	; 0x40
 8007432:	f200 8146 	bhi.w	80076c2 <USBD_StdEPReq+0x2b2>
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00a      	beq.n	8007450 <USBD_StdEPReq+0x40>
 800743a:	2b20      	cmp	r3, #32
 800743c:	f040 8141 	bne.w	80076c2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	6839      	ldr	r1, [r7, #0]
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	4798      	blx	r3
      break;
 800744e:	e13d      	b.n	80076cc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007458:	2b20      	cmp	r3, #32
 800745a:	d10a      	bne.n	8007472 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	6839      	ldr	r1, [r7, #0]
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	4798      	blx	r3
 800746a:	4603      	mov	r3, r0
 800746c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800746e:	7bfb      	ldrb	r3, [r7, #15]
 8007470:	e12d      	b.n	80076ce <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	785b      	ldrb	r3, [r3, #1]
 8007476:	2b03      	cmp	r3, #3
 8007478:	d007      	beq.n	800748a <USBD_StdEPReq+0x7a>
 800747a:	2b03      	cmp	r3, #3
 800747c:	f300 811b 	bgt.w	80076b6 <USBD_StdEPReq+0x2a6>
 8007480:	2b00      	cmp	r3, #0
 8007482:	d072      	beq.n	800756a <USBD_StdEPReq+0x15a>
 8007484:	2b01      	cmp	r3, #1
 8007486:	d03a      	beq.n	80074fe <USBD_StdEPReq+0xee>
 8007488:	e115      	b.n	80076b6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007490:	2b02      	cmp	r3, #2
 8007492:	d002      	beq.n	800749a <USBD_StdEPReq+0x8a>
 8007494:	2b03      	cmp	r3, #3
 8007496:	d015      	beq.n	80074c4 <USBD_StdEPReq+0xb4>
 8007498:	e02b      	b.n	80074f2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800749a:	7bbb      	ldrb	r3, [r7, #14]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d00c      	beq.n	80074ba <USBD_StdEPReq+0xaa>
 80074a0:	7bbb      	ldrb	r3, [r7, #14]
 80074a2:	2b80      	cmp	r3, #128	; 0x80
 80074a4:	d009      	beq.n	80074ba <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80074a6:	7bbb      	ldrb	r3, [r7, #14]
 80074a8:	4619      	mov	r1, r3
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f001 f8ba 	bl	8008624 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80074b0:	2180      	movs	r1, #128	; 0x80
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f001 f8b6 	bl	8008624 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80074b8:	e020      	b.n	80074fc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80074ba:	6839      	ldr	r1, [r7, #0]
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 fc1e 	bl	8007cfe <USBD_CtlError>
              break;
 80074c2:	e01b      	b.n	80074fc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	885b      	ldrh	r3, [r3, #2]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d10e      	bne.n	80074ea <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80074cc:	7bbb      	ldrb	r3, [r7, #14]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00b      	beq.n	80074ea <USBD_StdEPReq+0xda>
 80074d2:	7bbb      	ldrb	r3, [r7, #14]
 80074d4:	2b80      	cmp	r3, #128	; 0x80
 80074d6:	d008      	beq.n	80074ea <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	88db      	ldrh	r3, [r3, #6]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d104      	bne.n	80074ea <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80074e0:	7bbb      	ldrb	r3, [r7, #14]
 80074e2:	4619      	mov	r1, r3
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f001 f89d 	bl	8008624 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 fccf 	bl	8007e8e <USBD_CtlSendStatus>

              break;
 80074f0:	e004      	b.n	80074fc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80074f2:	6839      	ldr	r1, [r7, #0]
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 fc02 	bl	8007cfe <USBD_CtlError>
              break;
 80074fa:	bf00      	nop
          }
          break;
 80074fc:	e0e0      	b.n	80076c0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007504:	2b02      	cmp	r3, #2
 8007506:	d002      	beq.n	800750e <USBD_StdEPReq+0xfe>
 8007508:	2b03      	cmp	r3, #3
 800750a:	d015      	beq.n	8007538 <USBD_StdEPReq+0x128>
 800750c:	e026      	b.n	800755c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800750e:	7bbb      	ldrb	r3, [r7, #14]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00c      	beq.n	800752e <USBD_StdEPReq+0x11e>
 8007514:	7bbb      	ldrb	r3, [r7, #14]
 8007516:	2b80      	cmp	r3, #128	; 0x80
 8007518:	d009      	beq.n	800752e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800751a:	7bbb      	ldrb	r3, [r7, #14]
 800751c:	4619      	mov	r1, r3
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f001 f880 	bl	8008624 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007524:	2180      	movs	r1, #128	; 0x80
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f001 f87c 	bl	8008624 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800752c:	e01c      	b.n	8007568 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800752e:	6839      	ldr	r1, [r7, #0]
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 fbe4 	bl	8007cfe <USBD_CtlError>
              break;
 8007536:	e017      	b.n	8007568 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	885b      	ldrh	r3, [r3, #2]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d112      	bne.n	8007566 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007540:	7bbb      	ldrb	r3, [r7, #14]
 8007542:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007546:	2b00      	cmp	r3, #0
 8007548:	d004      	beq.n	8007554 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800754a:	7bbb      	ldrb	r3, [r7, #14]
 800754c:	4619      	mov	r1, r3
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f001 f887 	bl	8008662 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 fc9a 	bl	8007e8e <USBD_CtlSendStatus>
              }
              break;
 800755a:	e004      	b.n	8007566 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800755c:	6839      	ldr	r1, [r7, #0]
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 fbcd 	bl	8007cfe <USBD_CtlError>
              break;
 8007564:	e000      	b.n	8007568 <USBD_StdEPReq+0x158>
              break;
 8007566:	bf00      	nop
          }
          break;
 8007568:	e0aa      	b.n	80076c0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007570:	2b02      	cmp	r3, #2
 8007572:	d002      	beq.n	800757a <USBD_StdEPReq+0x16a>
 8007574:	2b03      	cmp	r3, #3
 8007576:	d032      	beq.n	80075de <USBD_StdEPReq+0x1ce>
 8007578:	e097      	b.n	80076aa <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800757a:	7bbb      	ldrb	r3, [r7, #14]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d007      	beq.n	8007590 <USBD_StdEPReq+0x180>
 8007580:	7bbb      	ldrb	r3, [r7, #14]
 8007582:	2b80      	cmp	r3, #128	; 0x80
 8007584:	d004      	beq.n	8007590 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007586:	6839      	ldr	r1, [r7, #0]
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 fbb8 	bl	8007cfe <USBD_CtlError>
                break;
 800758e:	e091      	b.n	80076b4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007590:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007594:	2b00      	cmp	r3, #0
 8007596:	da0b      	bge.n	80075b0 <USBD_StdEPReq+0x1a0>
 8007598:	7bbb      	ldrb	r3, [r7, #14]
 800759a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800759e:	4613      	mov	r3, r2
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	4413      	add	r3, r2
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	3310      	adds	r3, #16
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	4413      	add	r3, r2
 80075ac:	3304      	adds	r3, #4
 80075ae:	e00b      	b.n	80075c8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80075b0:	7bbb      	ldrb	r3, [r7, #14]
 80075b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075b6:	4613      	mov	r3, r2
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	4413      	add	r3, r2
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	4413      	add	r3, r2
 80075c6:	3304      	adds	r3, #4
 80075c8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	2200      	movs	r2, #0
 80075ce:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	2202      	movs	r2, #2
 80075d4:	4619      	mov	r1, r3
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 fbfb 	bl	8007dd2 <USBD_CtlSendData>
              break;
 80075dc:	e06a      	b.n	80076b4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80075de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	da11      	bge.n	800760a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80075e6:	7bbb      	ldrb	r3, [r7, #14]
 80075e8:	f003 020f 	and.w	r2, r3, #15
 80075ec:	6879      	ldr	r1, [r7, #4]
 80075ee:	4613      	mov	r3, r2
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	4413      	add	r3, r2
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	440b      	add	r3, r1
 80075f8:	3318      	adds	r3, #24
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d117      	bne.n	8007630 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007600:	6839      	ldr	r1, [r7, #0]
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 fb7b 	bl	8007cfe <USBD_CtlError>
                  break;
 8007608:	e054      	b.n	80076b4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800760a:	7bbb      	ldrb	r3, [r7, #14]
 800760c:	f003 020f 	and.w	r2, r3, #15
 8007610:	6879      	ldr	r1, [r7, #4]
 8007612:	4613      	mov	r3, r2
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	4413      	add	r3, r2
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	440b      	add	r3, r1
 800761c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d104      	bne.n	8007630 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007626:	6839      	ldr	r1, [r7, #0]
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 fb68 	bl	8007cfe <USBD_CtlError>
                  break;
 800762e:	e041      	b.n	80076b4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007630:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007634:	2b00      	cmp	r3, #0
 8007636:	da0b      	bge.n	8007650 <USBD_StdEPReq+0x240>
 8007638:	7bbb      	ldrb	r3, [r7, #14]
 800763a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800763e:	4613      	mov	r3, r2
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	4413      	add	r3, r2
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	3310      	adds	r3, #16
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	4413      	add	r3, r2
 800764c:	3304      	adds	r3, #4
 800764e:	e00b      	b.n	8007668 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007650:	7bbb      	ldrb	r3, [r7, #14]
 8007652:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007656:	4613      	mov	r3, r2
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	4413      	add	r3, r2
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	4413      	add	r3, r2
 8007666:	3304      	adds	r3, #4
 8007668:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800766a:	7bbb      	ldrb	r3, [r7, #14]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d002      	beq.n	8007676 <USBD_StdEPReq+0x266>
 8007670:	7bbb      	ldrb	r3, [r7, #14]
 8007672:	2b80      	cmp	r3, #128	; 0x80
 8007674:	d103      	bne.n	800767e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	2200      	movs	r2, #0
 800767a:	601a      	str	r2, [r3, #0]
 800767c:	e00e      	b.n	800769c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800767e:	7bbb      	ldrb	r3, [r7, #14]
 8007680:	4619      	mov	r1, r3
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f001 f80c 	bl	80086a0 <USBD_LL_IsStallEP>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d003      	beq.n	8007696 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	2201      	movs	r2, #1
 8007692:	601a      	str	r2, [r3, #0]
 8007694:	e002      	b.n	800769c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	2200      	movs	r2, #0
 800769a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	2202      	movs	r2, #2
 80076a0:	4619      	mov	r1, r3
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 fb95 	bl	8007dd2 <USBD_CtlSendData>
              break;
 80076a8:	e004      	b.n	80076b4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80076aa:	6839      	ldr	r1, [r7, #0]
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 fb26 	bl	8007cfe <USBD_CtlError>
              break;
 80076b2:	bf00      	nop
          }
          break;
 80076b4:	e004      	b.n	80076c0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80076b6:	6839      	ldr	r1, [r7, #0]
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 fb20 	bl	8007cfe <USBD_CtlError>
          break;
 80076be:	bf00      	nop
      }
      break;
 80076c0:	e004      	b.n	80076cc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80076c2:	6839      	ldr	r1, [r7, #0]
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 fb1a 	bl	8007cfe <USBD_CtlError>
      break;
 80076ca:	bf00      	nop
  }

  return ret;
 80076cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3710      	adds	r7, #16
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
	...

080076d8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80076e2:	2300      	movs	r3, #0
 80076e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80076e6:	2300      	movs	r3, #0
 80076e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80076ea:	2300      	movs	r3, #0
 80076ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	885b      	ldrh	r3, [r3, #2]
 80076f2:	0a1b      	lsrs	r3, r3, #8
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	3b01      	subs	r3, #1
 80076f8:	2b06      	cmp	r3, #6
 80076fa:	f200 8128 	bhi.w	800794e <USBD_GetDescriptor+0x276>
 80076fe:	a201      	add	r2, pc, #4	; (adr r2, 8007704 <USBD_GetDescriptor+0x2c>)
 8007700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007704:	08007721 	.word	0x08007721
 8007708:	08007739 	.word	0x08007739
 800770c:	08007779 	.word	0x08007779
 8007710:	0800794f 	.word	0x0800794f
 8007714:	0800794f 	.word	0x0800794f
 8007718:	080078ef 	.word	0x080078ef
 800771c:	0800791b 	.word	0x0800791b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	7c12      	ldrb	r2, [r2, #16]
 800772c:	f107 0108 	add.w	r1, r7, #8
 8007730:	4610      	mov	r0, r2
 8007732:	4798      	blx	r3
 8007734:	60f8      	str	r0, [r7, #12]
      break;
 8007736:	e112      	b.n	800795e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	7c1b      	ldrb	r3, [r3, #16]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d10d      	bne.n	800775c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007748:	f107 0208 	add.w	r2, r7, #8
 800774c:	4610      	mov	r0, r2
 800774e:	4798      	blx	r3
 8007750:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	3301      	adds	r3, #1
 8007756:	2202      	movs	r2, #2
 8007758:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800775a:	e100      	b.n	800795e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007764:	f107 0208 	add.w	r2, r7, #8
 8007768:	4610      	mov	r0, r2
 800776a:	4798      	blx	r3
 800776c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	3301      	adds	r3, #1
 8007772:	2202      	movs	r2, #2
 8007774:	701a      	strb	r2, [r3, #0]
      break;
 8007776:	e0f2      	b.n	800795e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	885b      	ldrh	r3, [r3, #2]
 800777c:	b2db      	uxtb	r3, r3
 800777e:	2b05      	cmp	r3, #5
 8007780:	f200 80ac 	bhi.w	80078dc <USBD_GetDescriptor+0x204>
 8007784:	a201      	add	r2, pc, #4	; (adr r2, 800778c <USBD_GetDescriptor+0xb4>)
 8007786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800778a:	bf00      	nop
 800778c:	080077a5 	.word	0x080077a5
 8007790:	080077d9 	.word	0x080077d9
 8007794:	0800780d 	.word	0x0800780d
 8007798:	08007841 	.word	0x08007841
 800779c:	08007875 	.word	0x08007875
 80077a0:	080078a9 	.word	0x080078a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d00b      	beq.n	80077c8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	7c12      	ldrb	r2, [r2, #16]
 80077bc:	f107 0108 	add.w	r1, r7, #8
 80077c0:	4610      	mov	r0, r2
 80077c2:	4798      	blx	r3
 80077c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077c6:	e091      	b.n	80078ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077c8:	6839      	ldr	r1, [r7, #0]
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 fa97 	bl	8007cfe <USBD_CtlError>
            err++;
 80077d0:	7afb      	ldrb	r3, [r7, #11]
 80077d2:	3301      	adds	r3, #1
 80077d4:	72fb      	strb	r3, [r7, #11]
          break;
 80077d6:	e089      	b.n	80078ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00b      	beq.n	80077fc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	7c12      	ldrb	r2, [r2, #16]
 80077f0:	f107 0108 	add.w	r1, r7, #8
 80077f4:	4610      	mov	r0, r2
 80077f6:	4798      	blx	r3
 80077f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077fa:	e077      	b.n	80078ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077fc:	6839      	ldr	r1, [r7, #0]
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 fa7d 	bl	8007cfe <USBD_CtlError>
            err++;
 8007804:	7afb      	ldrb	r3, [r7, #11]
 8007806:	3301      	adds	r3, #1
 8007808:	72fb      	strb	r3, [r7, #11]
          break;
 800780a:	e06f      	b.n	80078ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007812:	68db      	ldr	r3, [r3, #12]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00b      	beq.n	8007830 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	7c12      	ldrb	r2, [r2, #16]
 8007824:	f107 0108 	add.w	r1, r7, #8
 8007828:	4610      	mov	r0, r2
 800782a:	4798      	blx	r3
 800782c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800782e:	e05d      	b.n	80078ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007830:	6839      	ldr	r1, [r7, #0]
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 fa63 	bl	8007cfe <USBD_CtlError>
            err++;
 8007838:	7afb      	ldrb	r3, [r7, #11]
 800783a:	3301      	adds	r3, #1
 800783c:	72fb      	strb	r3, [r7, #11]
          break;
 800783e:	e055      	b.n	80078ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007846:	691b      	ldr	r3, [r3, #16]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00b      	beq.n	8007864 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007852:	691b      	ldr	r3, [r3, #16]
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	7c12      	ldrb	r2, [r2, #16]
 8007858:	f107 0108 	add.w	r1, r7, #8
 800785c:	4610      	mov	r0, r2
 800785e:	4798      	blx	r3
 8007860:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007862:	e043      	b.n	80078ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007864:	6839      	ldr	r1, [r7, #0]
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 fa49 	bl	8007cfe <USBD_CtlError>
            err++;
 800786c:	7afb      	ldrb	r3, [r7, #11]
 800786e:	3301      	adds	r3, #1
 8007870:	72fb      	strb	r3, [r7, #11]
          break;
 8007872:	e03b      	b.n	80078ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800787a:	695b      	ldr	r3, [r3, #20]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00b      	beq.n	8007898 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007886:	695b      	ldr	r3, [r3, #20]
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	7c12      	ldrb	r2, [r2, #16]
 800788c:	f107 0108 	add.w	r1, r7, #8
 8007890:	4610      	mov	r0, r2
 8007892:	4798      	blx	r3
 8007894:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007896:	e029      	b.n	80078ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007898:	6839      	ldr	r1, [r7, #0]
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fa2f 	bl	8007cfe <USBD_CtlError>
            err++;
 80078a0:	7afb      	ldrb	r3, [r7, #11]
 80078a2:	3301      	adds	r3, #1
 80078a4:	72fb      	strb	r3, [r7, #11]
          break;
 80078a6:	e021      	b.n	80078ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078ae:	699b      	ldr	r3, [r3, #24]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d00b      	beq.n	80078cc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078ba:	699b      	ldr	r3, [r3, #24]
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	7c12      	ldrb	r2, [r2, #16]
 80078c0:	f107 0108 	add.w	r1, r7, #8
 80078c4:	4610      	mov	r0, r2
 80078c6:	4798      	blx	r3
 80078c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078ca:	e00f      	b.n	80078ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078cc:	6839      	ldr	r1, [r7, #0]
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 fa15 	bl	8007cfe <USBD_CtlError>
            err++;
 80078d4:	7afb      	ldrb	r3, [r7, #11]
 80078d6:	3301      	adds	r3, #1
 80078d8:	72fb      	strb	r3, [r7, #11]
          break;
 80078da:	e007      	b.n	80078ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80078dc:	6839      	ldr	r1, [r7, #0]
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 fa0d 	bl	8007cfe <USBD_CtlError>
          err++;
 80078e4:	7afb      	ldrb	r3, [r7, #11]
 80078e6:	3301      	adds	r3, #1
 80078e8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80078ea:	e038      	b.n	800795e <USBD_GetDescriptor+0x286>
 80078ec:	e037      	b.n	800795e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	7c1b      	ldrb	r3, [r3, #16]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d109      	bne.n	800790a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078fe:	f107 0208 	add.w	r2, r7, #8
 8007902:	4610      	mov	r0, r2
 8007904:	4798      	blx	r3
 8007906:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007908:	e029      	b.n	800795e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800790a:	6839      	ldr	r1, [r7, #0]
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 f9f6 	bl	8007cfe <USBD_CtlError>
        err++;
 8007912:	7afb      	ldrb	r3, [r7, #11]
 8007914:	3301      	adds	r3, #1
 8007916:	72fb      	strb	r3, [r7, #11]
      break;
 8007918:	e021      	b.n	800795e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	7c1b      	ldrb	r3, [r3, #16]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d10d      	bne.n	800793e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800792a:	f107 0208 	add.w	r2, r7, #8
 800792e:	4610      	mov	r0, r2
 8007930:	4798      	blx	r3
 8007932:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	3301      	adds	r3, #1
 8007938:	2207      	movs	r2, #7
 800793a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800793c:	e00f      	b.n	800795e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800793e:	6839      	ldr	r1, [r7, #0]
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 f9dc 	bl	8007cfe <USBD_CtlError>
        err++;
 8007946:	7afb      	ldrb	r3, [r7, #11]
 8007948:	3301      	adds	r3, #1
 800794a:	72fb      	strb	r3, [r7, #11]
      break;
 800794c:	e007      	b.n	800795e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800794e:	6839      	ldr	r1, [r7, #0]
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 f9d4 	bl	8007cfe <USBD_CtlError>
      err++;
 8007956:	7afb      	ldrb	r3, [r7, #11]
 8007958:	3301      	adds	r3, #1
 800795a:	72fb      	strb	r3, [r7, #11]
      break;
 800795c:	bf00      	nop
  }

  if (err != 0U)
 800795e:	7afb      	ldrb	r3, [r7, #11]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d11c      	bne.n	800799e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007964:	893b      	ldrh	r3, [r7, #8]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d011      	beq.n	800798e <USBD_GetDescriptor+0x2b6>
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	88db      	ldrh	r3, [r3, #6]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00d      	beq.n	800798e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	88da      	ldrh	r2, [r3, #6]
 8007976:	893b      	ldrh	r3, [r7, #8]
 8007978:	4293      	cmp	r3, r2
 800797a:	bf28      	it	cs
 800797c:	4613      	movcs	r3, r2
 800797e:	b29b      	uxth	r3, r3
 8007980:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007982:	893b      	ldrh	r3, [r7, #8]
 8007984:	461a      	mov	r2, r3
 8007986:	68f9      	ldr	r1, [r7, #12]
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 fa22 	bl	8007dd2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	88db      	ldrh	r3, [r3, #6]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d104      	bne.n	80079a0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 fa79 	bl	8007e8e <USBD_CtlSendStatus>
 800799c:	e000      	b.n	80079a0 <USBD_GetDescriptor+0x2c8>
    return;
 800799e:	bf00      	nop
    }
  }
}
 80079a0:	3710      	adds	r7, #16
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop

080079a8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	889b      	ldrh	r3, [r3, #4]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d130      	bne.n	8007a1c <USBD_SetAddress+0x74>
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	88db      	ldrh	r3, [r3, #6]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d12c      	bne.n	8007a1c <USBD_SetAddress+0x74>
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	885b      	ldrh	r3, [r3, #2]
 80079c6:	2b7f      	cmp	r3, #127	; 0x7f
 80079c8:	d828      	bhi.n	8007a1c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	885b      	ldrh	r3, [r3, #2]
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079dc:	2b03      	cmp	r3, #3
 80079de:	d104      	bne.n	80079ea <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80079e0:	6839      	ldr	r1, [r7, #0]
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 f98b 	bl	8007cfe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079e8:	e01d      	b.n	8007a26 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	7bfa      	ldrb	r2, [r7, #15]
 80079ee:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80079f2:	7bfb      	ldrb	r3, [r7, #15]
 80079f4:	4619      	mov	r1, r3
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 fe7e 	bl	80086f8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 fa46 	bl	8007e8e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007a02:	7bfb      	ldrb	r3, [r7, #15]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d004      	beq.n	8007a12 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2202      	movs	r2, #2
 8007a0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a10:	e009      	b.n	8007a26 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2201      	movs	r2, #1
 8007a16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a1a:	e004      	b.n	8007a26 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007a1c:	6839      	ldr	r1, [r7, #0]
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 f96d 	bl	8007cfe <USBD_CtlError>
  }
}
 8007a24:	bf00      	nop
 8007a26:	bf00      	nop
 8007a28:	3710      	adds	r7, #16
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
	...

08007a30 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	885b      	ldrh	r3, [r3, #2]
 8007a3e:	b2da      	uxtb	r2, r3
 8007a40:	4b41      	ldr	r3, [pc, #260]	; (8007b48 <USBD_SetConfig+0x118>)
 8007a42:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007a44:	4b40      	ldr	r3, [pc, #256]	; (8007b48 <USBD_SetConfig+0x118>)
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d904      	bls.n	8007a56 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007a4c:	6839      	ldr	r1, [r7, #0]
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 f955 	bl	8007cfe <USBD_CtlError>
 8007a54:	e075      	b.n	8007b42 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a5c:	2b02      	cmp	r3, #2
 8007a5e:	d002      	beq.n	8007a66 <USBD_SetConfig+0x36>
 8007a60:	2b03      	cmp	r3, #3
 8007a62:	d023      	beq.n	8007aac <USBD_SetConfig+0x7c>
 8007a64:	e062      	b.n	8007b2c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007a66:	4b38      	ldr	r3, [pc, #224]	; (8007b48 <USBD_SetConfig+0x118>)
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d01a      	beq.n	8007aa4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007a6e:	4b36      	ldr	r3, [pc, #216]	; (8007b48 <USBD_SetConfig+0x118>)
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	461a      	mov	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2203      	movs	r2, #3
 8007a7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007a80:	4b31      	ldr	r3, [pc, #196]	; (8007b48 <USBD_SetConfig+0x118>)
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	4619      	mov	r1, r3
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f7ff f9e7 	bl	8006e5a <USBD_SetClassConfig>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b02      	cmp	r3, #2
 8007a90:	d104      	bne.n	8007a9c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007a92:	6839      	ldr	r1, [r7, #0]
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 f932 	bl	8007cfe <USBD_CtlError>
            return;
 8007a9a:	e052      	b.n	8007b42 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 f9f6 	bl	8007e8e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007aa2:	e04e      	b.n	8007b42 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 f9f2 	bl	8007e8e <USBD_CtlSendStatus>
        break;
 8007aaa:	e04a      	b.n	8007b42 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007aac:	4b26      	ldr	r3, [pc, #152]	; (8007b48 <USBD_SetConfig+0x118>)
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d112      	bne.n	8007ada <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2202      	movs	r2, #2
 8007ab8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007abc:	4b22      	ldr	r3, [pc, #136]	; (8007b48 <USBD_SetConfig+0x118>)
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007ac6:	4b20      	ldr	r3, [pc, #128]	; (8007b48 <USBD_SetConfig+0x118>)
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	4619      	mov	r1, r3
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f7ff f9e3 	bl	8006e98 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 f9db 	bl	8007e8e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007ad8:	e033      	b.n	8007b42 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007ada:	4b1b      	ldr	r3, [pc, #108]	; (8007b48 <USBD_SetConfig+0x118>)
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	461a      	mov	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d01d      	beq.n	8007b24 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	4619      	mov	r1, r3
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f7ff f9d1 	bl	8006e98 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007af6:	4b14      	ldr	r3, [pc, #80]	; (8007b48 <USBD_SetConfig+0x118>)
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	461a      	mov	r2, r3
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007b00:	4b11      	ldr	r3, [pc, #68]	; (8007b48 <USBD_SetConfig+0x118>)
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	4619      	mov	r1, r3
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f7ff f9a7 	bl	8006e5a <USBD_SetClassConfig>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b02      	cmp	r3, #2
 8007b10:	d104      	bne.n	8007b1c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007b12:	6839      	ldr	r1, [r7, #0]
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 f8f2 	bl	8007cfe <USBD_CtlError>
            return;
 8007b1a:	e012      	b.n	8007b42 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 f9b6 	bl	8007e8e <USBD_CtlSendStatus>
        break;
 8007b22:	e00e      	b.n	8007b42 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 f9b2 	bl	8007e8e <USBD_CtlSendStatus>
        break;
 8007b2a:	e00a      	b.n	8007b42 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007b2c:	6839      	ldr	r1, [r7, #0]
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f8e5 	bl	8007cfe <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007b34:	4b04      	ldr	r3, [pc, #16]	; (8007b48 <USBD_SetConfig+0x118>)
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	4619      	mov	r1, r3
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f7ff f9ac 	bl	8006e98 <USBD_ClrClassConfig>
        break;
 8007b40:	bf00      	nop
    }
  }
}
 8007b42:	3708      	adds	r7, #8
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}
 8007b48:	20000294 	.word	0x20000294

08007b4c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	88db      	ldrh	r3, [r3, #6]
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d004      	beq.n	8007b68 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007b5e:	6839      	ldr	r1, [r7, #0]
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 f8cc 	bl	8007cfe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007b66:	e022      	b.n	8007bae <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	dc02      	bgt.n	8007b78 <USBD_GetConfig+0x2c>
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	dc03      	bgt.n	8007b7e <USBD_GetConfig+0x32>
 8007b76:	e015      	b.n	8007ba4 <USBD_GetConfig+0x58>
 8007b78:	2b03      	cmp	r3, #3
 8007b7a:	d00b      	beq.n	8007b94 <USBD_GetConfig+0x48>
 8007b7c:	e012      	b.n	8007ba4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	3308      	adds	r3, #8
 8007b88:	2201      	movs	r2, #1
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 f920 	bl	8007dd2 <USBD_CtlSendData>
        break;
 8007b92:	e00c      	b.n	8007bae <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	3304      	adds	r3, #4
 8007b98:	2201      	movs	r2, #1
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 f918 	bl	8007dd2 <USBD_CtlSendData>
        break;
 8007ba2:	e004      	b.n	8007bae <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007ba4:	6839      	ldr	r1, [r7, #0]
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 f8a9 	bl	8007cfe <USBD_CtlError>
        break;
 8007bac:	bf00      	nop
}
 8007bae:	bf00      	nop
 8007bb0:	3708      	adds	r7, #8
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}

08007bb6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bb6:	b580      	push	{r7, lr}
 8007bb8:	b082      	sub	sp, #8
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
 8007bbe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bc6:	3b01      	subs	r3, #1
 8007bc8:	2b02      	cmp	r3, #2
 8007bca:	d81e      	bhi.n	8007c0a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	88db      	ldrh	r3, [r3, #6]
 8007bd0:	2b02      	cmp	r3, #2
 8007bd2:	d004      	beq.n	8007bde <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007bd4:	6839      	ldr	r1, [r7, #0]
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 f891 	bl	8007cfe <USBD_CtlError>
        break;
 8007bdc:	e01a      	b.n	8007c14 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2201      	movs	r2, #1
 8007be2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d005      	beq.n	8007bfa <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	f043 0202 	orr.w	r2, r3, #2
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	330c      	adds	r3, #12
 8007bfe:	2202      	movs	r2, #2
 8007c00:	4619      	mov	r1, r3
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 f8e5 	bl	8007dd2 <USBD_CtlSendData>
      break;
 8007c08:	e004      	b.n	8007c14 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007c0a:	6839      	ldr	r1, [r7, #0]
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 f876 	bl	8007cfe <USBD_CtlError>
      break;
 8007c12:	bf00      	nop
  }
}
 8007c14:	bf00      	nop
 8007c16:	3708      	adds	r7, #8
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	885b      	ldrh	r3, [r3, #2]
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d106      	bne.n	8007c3c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2201      	movs	r2, #1
 8007c32:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 f929 	bl	8007e8e <USBD_CtlSendStatus>
  }
}
 8007c3c:	bf00      	nop
 8007c3e:	3708      	adds	r7, #8
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c54:	3b01      	subs	r3, #1
 8007c56:	2b02      	cmp	r3, #2
 8007c58:	d80b      	bhi.n	8007c72 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	885b      	ldrh	r3, [r3, #2]
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d10c      	bne.n	8007c7c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 f90f 	bl	8007e8e <USBD_CtlSendStatus>
      }
      break;
 8007c70:	e004      	b.n	8007c7c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007c72:	6839      	ldr	r1, [r7, #0]
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 f842 	bl	8007cfe <USBD_CtlError>
      break;
 8007c7a:	e000      	b.n	8007c7e <USBD_ClrFeature+0x3a>
      break;
 8007c7c:	bf00      	nop
  }
}
 8007c7e:	bf00      	nop
 8007c80:	3708      	adds	r7, #8
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007c86:	b480      	push	{r7}
 8007c88:	b083      	sub	sp, #12
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
 8007c8e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	781a      	ldrb	r2, [r3, #0]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	785a      	ldrb	r2, [r3, #1]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	3302      	adds	r3, #2
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	b29a      	uxth	r2, r3
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	3303      	adds	r3, #3
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	021b      	lsls	r3, r3, #8
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	4413      	add	r3, r2
 8007cb6:	b29a      	uxth	r2, r3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	3304      	adds	r3, #4
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	b29a      	uxth	r2, r3
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	3305      	adds	r3, #5
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	021b      	lsls	r3, r3, #8
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	4413      	add	r3, r2
 8007cd2:	b29a      	uxth	r2, r3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	3306      	adds	r3, #6
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	3307      	adds	r3, #7
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	021b      	lsls	r3, r3, #8
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	4413      	add	r3, r2
 8007cee:	b29a      	uxth	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	80da      	strh	r2, [r3, #6]

}
 8007cf4:	bf00      	nop
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bc80      	pop	{r7}
 8007cfc:	4770      	bx	lr

08007cfe <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007cfe:	b580      	push	{r7, lr}
 8007d00:	b082      	sub	sp, #8
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
 8007d06:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007d08:	2180      	movs	r1, #128	; 0x80
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 fc8a 	bl	8008624 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007d10:	2100      	movs	r1, #0
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 fc86 	bl	8008624 <USBD_LL_StallEP>
}
 8007d18:	bf00      	nop
 8007d1a:	3708      	adds	r7, #8
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b086      	sub	sp, #24
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d032      	beq.n	8007d9c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	f000 f834 	bl	8007da4 <USBD_GetLen>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	3301      	adds	r3, #1
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	005b      	lsls	r3, r3, #1
 8007d44:	b29a      	uxth	r2, r3
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007d4a:	7dfb      	ldrb	r3, [r7, #23]
 8007d4c:	1c5a      	adds	r2, r3, #1
 8007d4e:	75fa      	strb	r2, [r7, #23]
 8007d50:	461a      	mov	r2, r3
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	4413      	add	r3, r2
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	7812      	ldrb	r2, [r2, #0]
 8007d5a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007d5c:	7dfb      	ldrb	r3, [r7, #23]
 8007d5e:	1c5a      	adds	r2, r3, #1
 8007d60:	75fa      	strb	r2, [r7, #23]
 8007d62:	461a      	mov	r2, r3
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	4413      	add	r3, r2
 8007d68:	2203      	movs	r2, #3
 8007d6a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007d6c:	e012      	b.n	8007d94 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	1c5a      	adds	r2, r3, #1
 8007d72:	60fa      	str	r2, [r7, #12]
 8007d74:	7dfa      	ldrb	r2, [r7, #23]
 8007d76:	1c51      	adds	r1, r2, #1
 8007d78:	75f9      	strb	r1, [r7, #23]
 8007d7a:	4611      	mov	r1, r2
 8007d7c:	68ba      	ldr	r2, [r7, #8]
 8007d7e:	440a      	add	r2, r1
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007d84:	7dfb      	ldrb	r3, [r7, #23]
 8007d86:	1c5a      	adds	r2, r3, #1
 8007d88:	75fa      	strb	r2, [r7, #23]
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	4413      	add	r3, r2
 8007d90:	2200      	movs	r2, #0
 8007d92:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d1e8      	bne.n	8007d6e <USBD_GetString+0x4e>
    }
  }
}
 8007d9c:	bf00      	nop
 8007d9e:	3718      	adds	r7, #24
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b085      	sub	sp, #20
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007dac:	2300      	movs	r3, #0
 8007dae:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007db0:	e005      	b.n	8007dbe <USBD_GetLen+0x1a>
  {
    len++;
 8007db2:	7bfb      	ldrb	r3, [r7, #15]
 8007db4:	3301      	adds	r3, #1
 8007db6:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	3301      	adds	r3, #1
 8007dbc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d1f5      	bne.n	8007db2 <USBD_GetLen+0xe>
  }

  return len;
 8007dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3714      	adds	r7, #20
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bc80      	pop	{r7}
 8007dd0:	4770      	bx	lr

08007dd2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b084      	sub	sp, #16
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	60f8      	str	r0, [r7, #12]
 8007dda:	60b9      	str	r1, [r7, #8]
 8007ddc:	4613      	mov	r3, r2
 8007dde:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2202      	movs	r2, #2
 8007de4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007de8:	88fa      	ldrh	r2, [r7, #6]
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007dee:	88fa      	ldrh	r2, [r7, #6]
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007df4:	88fb      	ldrh	r3, [r7, #6]
 8007df6:	68ba      	ldr	r2, [r7, #8]
 8007df8:	2100      	movs	r1, #0
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	f000 fc9b 	bl	8008736 <USBD_LL_Transmit>

  return USBD_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b084      	sub	sp, #16
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	60f8      	str	r0, [r7, #12]
 8007e12:	60b9      	str	r1, [r7, #8]
 8007e14:	4613      	mov	r3, r2
 8007e16:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e18:	88fb      	ldrh	r3, [r7, #6]
 8007e1a:	68ba      	ldr	r2, [r7, #8]
 8007e1c:	2100      	movs	r1, #0
 8007e1e:	68f8      	ldr	r0, [r7, #12]
 8007e20:	f000 fc89 	bl	8008736 <USBD_LL_Transmit>

  return USBD_OK;
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3710      	adds	r7, #16
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b084      	sub	sp, #16
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	60f8      	str	r0, [r7, #12]
 8007e36:	60b9      	str	r1, [r7, #8]
 8007e38:	4613      	mov	r3, r2
 8007e3a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2203      	movs	r2, #3
 8007e40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007e44:	88fa      	ldrh	r2, [r7, #6]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007e4c:	88fa      	ldrh	r2, [r7, #6]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e54:	88fb      	ldrh	r3, [r7, #6]
 8007e56:	68ba      	ldr	r2, [r7, #8]
 8007e58:	2100      	movs	r1, #0
 8007e5a:	68f8      	ldr	r0, [r7, #12]
 8007e5c:	f000 fc8e 	bl	800877c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b084      	sub	sp, #16
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	60f8      	str	r0, [r7, #12]
 8007e72:	60b9      	str	r1, [r7, #8]
 8007e74:	4613      	mov	r3, r2
 8007e76:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e78:	88fb      	ldrh	r3, [r7, #6]
 8007e7a:	68ba      	ldr	r2, [r7, #8]
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	68f8      	ldr	r0, [r7, #12]
 8007e80:	f000 fc7c 	bl	800877c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e84:	2300      	movs	r3, #0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b082      	sub	sp, #8
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2204      	movs	r2, #4
 8007e9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	2100      	movs	r1, #0
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 fc46 	bl	8008736 <USBD_LL_Transmit>

  return USBD_OK;
 8007eaa:	2300      	movs	r3, #0
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3708      	adds	r7, #8
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2205      	movs	r2, #5
 8007ec0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	2100      	movs	r1, #0
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 fc56 	bl	800877c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ed0:	2300      	movs	r3, #0
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3708      	adds	r7, #8
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
	...

08007edc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	4912      	ldr	r1, [pc, #72]	; (8007f2c <MX_USB_DEVICE_Init+0x50>)
 8007ee4:	4812      	ldr	r0, [pc, #72]	; (8007f30 <MX_USB_DEVICE_Init+0x54>)
 8007ee6:	f7fe ff5e 	bl	8006da6 <USBD_Init>
 8007eea:	4603      	mov	r3, r0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d001      	beq.n	8007ef4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007ef0:	f7f8 fb6c 	bl	80005cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007ef4:	490f      	ldr	r1, [pc, #60]	; (8007f34 <MX_USB_DEVICE_Init+0x58>)
 8007ef6:	480e      	ldr	r0, [pc, #56]	; (8007f30 <MX_USB_DEVICE_Init+0x54>)
 8007ef8:	f7fe ff80 	bl	8006dfc <USBD_RegisterClass>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d001      	beq.n	8007f06 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007f02:	f7f8 fb63 	bl	80005cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007f06:	490c      	ldr	r1, [pc, #48]	; (8007f38 <MX_USB_DEVICE_Init+0x5c>)
 8007f08:	4809      	ldr	r0, [pc, #36]	; (8007f30 <MX_USB_DEVICE_Init+0x54>)
 8007f0a:	f7fe feb1 	bl	8006c70 <USBD_CDC_RegisterInterface>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d001      	beq.n	8007f18 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007f14:	f7f8 fb5a 	bl	80005cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007f18:	4805      	ldr	r0, [pc, #20]	; (8007f30 <MX_USB_DEVICE_Init+0x54>)
 8007f1a:	f7fe ff88 	bl	8006e2e <USBD_Start>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d001      	beq.n	8007f28 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007f24:	f7f8 fb52 	bl	80005cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007f28:	bf00      	nop
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	2000012c 	.word	0x2000012c
 8007f30:	20000564 	.word	0x20000564
 8007f34:	20000018 	.word	0x20000018
 8007f38:	2000011c 	.word	0x2000011c

08007f3c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007f40:	2200      	movs	r2, #0
 8007f42:	4905      	ldr	r1, [pc, #20]	; (8007f58 <CDC_Init_FS+0x1c>)
 8007f44:	4805      	ldr	r0, [pc, #20]	; (8007f5c <CDC_Init_FS+0x20>)
 8007f46:	f7fe fea9 	bl	8006c9c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007f4a:	4905      	ldr	r1, [pc, #20]	; (8007f60 <CDC_Init_FS+0x24>)
 8007f4c:	4803      	ldr	r0, [pc, #12]	; (8007f5c <CDC_Init_FS+0x20>)
 8007f4e:	f7fe febe 	bl	8006cce <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007f52:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	20000c10 	.word	0x20000c10
 8007f5c:	20000564 	.word	0x20000564
 8007f60:	20000828 	.word	0x20000828

08007f64 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007f64:	b480      	push	{r7}
 8007f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007f68:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bc80      	pop	{r7}
 8007f70:	4770      	bx	lr
	...

08007f74 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	6039      	str	r1, [r7, #0]
 8007f7e:	71fb      	strb	r3, [r7, #7]
 8007f80:	4613      	mov	r3, r2
 8007f82:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007f84:	79fb      	ldrb	r3, [r7, #7]
 8007f86:	2b23      	cmp	r3, #35	; 0x23
 8007f88:	d84a      	bhi.n	8008020 <CDC_Control_FS+0xac>
 8007f8a:	a201      	add	r2, pc, #4	; (adr r2, 8007f90 <CDC_Control_FS+0x1c>)
 8007f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f90:	08008021 	.word	0x08008021
 8007f94:	08008021 	.word	0x08008021
 8007f98:	08008021 	.word	0x08008021
 8007f9c:	08008021 	.word	0x08008021
 8007fa0:	08008021 	.word	0x08008021
 8007fa4:	08008021 	.word	0x08008021
 8007fa8:	08008021 	.word	0x08008021
 8007fac:	08008021 	.word	0x08008021
 8007fb0:	08008021 	.word	0x08008021
 8007fb4:	08008021 	.word	0x08008021
 8007fb8:	08008021 	.word	0x08008021
 8007fbc:	08008021 	.word	0x08008021
 8007fc0:	08008021 	.word	0x08008021
 8007fc4:	08008021 	.word	0x08008021
 8007fc8:	08008021 	.word	0x08008021
 8007fcc:	08008021 	.word	0x08008021
 8007fd0:	08008021 	.word	0x08008021
 8007fd4:	08008021 	.word	0x08008021
 8007fd8:	08008021 	.word	0x08008021
 8007fdc:	08008021 	.word	0x08008021
 8007fe0:	08008021 	.word	0x08008021
 8007fe4:	08008021 	.word	0x08008021
 8007fe8:	08008021 	.word	0x08008021
 8007fec:	08008021 	.word	0x08008021
 8007ff0:	08008021 	.word	0x08008021
 8007ff4:	08008021 	.word	0x08008021
 8007ff8:	08008021 	.word	0x08008021
 8007ffc:	08008021 	.word	0x08008021
 8008000:	08008021 	.word	0x08008021
 8008004:	08008021 	.word	0x08008021
 8008008:	08008021 	.word	0x08008021
 800800c:	08008021 	.word	0x08008021
 8008010:	08008021 	.word	0x08008021
 8008014:	08008021 	.word	0x08008021
 8008018:	08008021 	.word	0x08008021
 800801c:	08008021 	.word	0x08008021
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008020:	bf00      	nop
  }

  return (USBD_OK);
 8008022:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008024:	4618      	mov	r0, r3
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	bc80      	pop	{r7}
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop

08008030 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	uint32_t num_bytes;
	uint8_t res;
	uint8_t tmp_byte;

	switch(Buf[0])
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	2b56      	cmp	r3, #86	; 0x56
 8008040:	d002      	beq.n	8008048 <CDC_Receive_FS+0x18>
 8008042:	2b76      	cmp	r3, #118	; 0x76
 8008044:	d007      	beq.n	8008056 <CDC_Receive_FS+0x26>
 8008046:	e00d      	b.n	8008064 <CDC_Receive_FS+0x34>
	{
	case 'V':
	num_bytes = sprintf((char*)UserTxBufferFS,"V0101\r");
 8008048:	4918      	ldr	r1, [pc, #96]	; (80080ac <CDC_Receive_FS+0x7c>)
 800804a:	4819      	ldr	r0, [pc, #100]	; (80080b0 <CDC_Receive_FS+0x80>)
 800804c:	f000 fc7e 	bl	800894c <siprintf>
 8008050:	4603      	mov	r3, r0
 8008052:	60fb      	str	r3, [r7, #12]
	break;
 8008054:	e00d      	b.n	8008072 <CDC_Receive_FS+0x42>

	case 'v':
	num_bytes = sprintf((char*)UserTxBufferFS,"vSTM32\r");
 8008056:	4917      	ldr	r1, [pc, #92]	; (80080b4 <CDC_Receive_FS+0x84>)
 8008058:	4815      	ldr	r0, [pc, #84]	; (80080b0 <CDC_Receive_FS+0x80>)
 800805a:	f000 fc77 	bl	800894c <siprintf>
 800805e:	4603      	mov	r3, r0
 8008060:	60fb      	str	r3, [r7, #12]
	break;
 8008062:	e006      	b.n	8008072 <CDC_Receive_FS+0x42>

	default:
	num_bytes = sprintf((char*)UserTxBufferFS,"\r");
 8008064:	4914      	ldr	r1, [pc, #80]	; (80080b8 <CDC_Receive_FS+0x88>)
 8008066:	4812      	ldr	r0, [pc, #72]	; (80080b0 <CDC_Receive_FS+0x80>)
 8008068:	f000 fc70 	bl	800894c <siprintf>
 800806c:	4603      	mov	r3, r0
 800806e:	60fb      	str	r3, [r7, #12]
	break;
 8008070:	bf00      	nop
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserRxBufferFS, num_bytes);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	b29b      	uxth	r3, r3
 8008076:	461a      	mov	r2, r3
 8008078:	4910      	ldr	r1, [pc, #64]	; (80080bc <CDC_Receive_FS+0x8c>)
 800807a:	4811      	ldr	r0, [pc, #68]	; (80080c0 <CDC_Receive_FS+0x90>)
 800807c:	f7fe fe0e 	bl	8006c9c <USBD_CDC_SetTxBuffer>
	USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008080:	480f      	ldr	r0, [pc, #60]	; (80080c0 <CDC_Receive_FS+0x90>)
 8008082:	f7fe fe37 	bl	8006cf4 <USBD_CDC_TransmitPacket>

  CDC_Transmit_FS(Buf, *Len);
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	b29b      	uxth	r3, r3
 800808c:	4619      	mov	r1, r3
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 f818 	bl	80080c4 <CDC_Transmit_FS>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008094:	6879      	ldr	r1, [r7, #4]
 8008096:	480a      	ldr	r0, [pc, #40]	; (80080c0 <CDC_Receive_FS+0x90>)
 8008098:	f7fe fe19 	bl	8006cce <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800809c:	4808      	ldr	r0, [pc, #32]	; (80080c0 <CDC_Receive_FS+0x90>)
 800809e:	f7fe fe58 	bl	8006d52 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80080a2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3710      	adds	r7, #16
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	08009220 	.word	0x08009220
 80080b0:	20000c10 	.word	0x20000c10
 80080b4:	08009228 	.word	0x08009228
 80080b8:	08009230 	.word	0x08009230
 80080bc:	20000828 	.word	0x20000828
 80080c0:	20000564 	.word	0x20000564

080080c4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	460b      	mov	r3, r1
 80080ce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80080d0:	2300      	movs	r3, #0
 80080d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80080d4:	4b0d      	ldr	r3, [pc, #52]	; (800810c <CDC_Transmit_FS+0x48>)
 80080d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080da:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d001      	beq.n	80080ea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80080e6:	2301      	movs	r3, #1
 80080e8:	e00b      	b.n	8008102 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80080ea:	887b      	ldrh	r3, [r7, #2]
 80080ec:	461a      	mov	r2, r3
 80080ee:	6879      	ldr	r1, [r7, #4]
 80080f0:	4806      	ldr	r0, [pc, #24]	; (800810c <CDC_Transmit_FS+0x48>)
 80080f2:	f7fe fdd3 	bl	8006c9c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80080f6:	4805      	ldr	r0, [pc, #20]	; (800810c <CDC_Transmit_FS+0x48>)
 80080f8:	f7fe fdfc 	bl	8006cf4 <USBD_CDC_TransmitPacket>
 80080fc:	4603      	mov	r3, r0
 80080fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008100:	7bfb      	ldrb	r3, [r7, #15]
}
 8008102:	4618      	mov	r0, r3
 8008104:	3710      	adds	r7, #16
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	20000564 	.word	0x20000564

08008110 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
 8008116:	4603      	mov	r3, r0
 8008118:	6039      	str	r1, [r7, #0]
 800811a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	2212      	movs	r2, #18
 8008120:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008122:	4b03      	ldr	r3, [pc, #12]	; (8008130 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008124:	4618      	mov	r0, r3
 8008126:	370c      	adds	r7, #12
 8008128:	46bd      	mov	sp, r7
 800812a:	bc80      	pop	{r7}
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop
 8008130:	20000148 	.word	0x20000148

08008134 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	4603      	mov	r3, r0
 800813c:	6039      	str	r1, [r7, #0]
 800813e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	2204      	movs	r2, #4
 8008144:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008146:	4b03      	ldr	r3, [pc, #12]	; (8008154 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008148:	4618      	mov	r0, r3
 800814a:	370c      	adds	r7, #12
 800814c:	46bd      	mov	sp, r7
 800814e:	bc80      	pop	{r7}
 8008150:	4770      	bx	lr
 8008152:	bf00      	nop
 8008154:	2000015c 	.word	0x2000015c

08008158 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	4603      	mov	r3, r0
 8008160:	6039      	str	r1, [r7, #0]
 8008162:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008164:	79fb      	ldrb	r3, [r7, #7]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d105      	bne.n	8008176 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800816a:	683a      	ldr	r2, [r7, #0]
 800816c:	4907      	ldr	r1, [pc, #28]	; (800818c <USBD_FS_ProductStrDescriptor+0x34>)
 800816e:	4808      	ldr	r0, [pc, #32]	; (8008190 <USBD_FS_ProductStrDescriptor+0x38>)
 8008170:	f7ff fdd6 	bl	8007d20 <USBD_GetString>
 8008174:	e004      	b.n	8008180 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008176:	683a      	ldr	r2, [r7, #0]
 8008178:	4904      	ldr	r1, [pc, #16]	; (800818c <USBD_FS_ProductStrDescriptor+0x34>)
 800817a:	4805      	ldr	r0, [pc, #20]	; (8008190 <USBD_FS_ProductStrDescriptor+0x38>)
 800817c:	f7ff fdd0 	bl	8007d20 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008180:	4b02      	ldr	r3, [pc, #8]	; (800818c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008182:	4618      	mov	r0, r3
 8008184:	3708      	adds	r7, #8
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	20000ff8 	.word	0x20000ff8
 8008190:	08009234 	.word	0x08009234

08008194 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	4603      	mov	r3, r0
 800819c:	6039      	str	r1, [r7, #0]
 800819e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80081a0:	683a      	ldr	r2, [r7, #0]
 80081a2:	4904      	ldr	r1, [pc, #16]	; (80081b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80081a4:	4804      	ldr	r0, [pc, #16]	; (80081b8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80081a6:	f7ff fdbb 	bl	8007d20 <USBD_GetString>
  return USBD_StrDesc;
 80081aa:	4b02      	ldr	r3, [pc, #8]	; (80081b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3708      	adds	r7, #8
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	20000ff8 	.word	0x20000ff8
 80081b8:	0800924c 	.word	0x0800924c

080081bc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	4603      	mov	r3, r0
 80081c4:	6039      	str	r1, [r7, #0]
 80081c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	221a      	movs	r2, #26
 80081cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80081ce:	f000 f843 	bl	8008258 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80081d2:	4b02      	ldr	r3, [pc, #8]	; (80081dc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3708      	adds	r7, #8
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	20000160 	.word	0x20000160

080081e0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	4603      	mov	r3, r0
 80081e8:	6039      	str	r1, [r7, #0]
 80081ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80081ec:	79fb      	ldrb	r3, [r7, #7]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d105      	bne.n	80081fe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80081f2:	683a      	ldr	r2, [r7, #0]
 80081f4:	4907      	ldr	r1, [pc, #28]	; (8008214 <USBD_FS_ConfigStrDescriptor+0x34>)
 80081f6:	4808      	ldr	r0, [pc, #32]	; (8008218 <USBD_FS_ConfigStrDescriptor+0x38>)
 80081f8:	f7ff fd92 	bl	8007d20 <USBD_GetString>
 80081fc:	e004      	b.n	8008208 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80081fe:	683a      	ldr	r2, [r7, #0]
 8008200:	4904      	ldr	r1, [pc, #16]	; (8008214 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008202:	4805      	ldr	r0, [pc, #20]	; (8008218 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008204:	f7ff fd8c 	bl	8007d20 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008208:	4b02      	ldr	r3, [pc, #8]	; (8008214 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800820a:	4618      	mov	r0, r3
 800820c:	3708      	adds	r7, #8
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	20000ff8 	.word	0x20000ff8
 8008218:	08009260 	.word	0x08009260

0800821c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af00      	add	r7, sp, #0
 8008222:	4603      	mov	r3, r0
 8008224:	6039      	str	r1, [r7, #0]
 8008226:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008228:	79fb      	ldrb	r3, [r7, #7]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d105      	bne.n	800823a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800822e:	683a      	ldr	r2, [r7, #0]
 8008230:	4907      	ldr	r1, [pc, #28]	; (8008250 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008232:	4808      	ldr	r0, [pc, #32]	; (8008254 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008234:	f7ff fd74 	bl	8007d20 <USBD_GetString>
 8008238:	e004      	b.n	8008244 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800823a:	683a      	ldr	r2, [r7, #0]
 800823c:	4904      	ldr	r1, [pc, #16]	; (8008250 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800823e:	4805      	ldr	r0, [pc, #20]	; (8008254 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008240:	f7ff fd6e 	bl	8007d20 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008244:	4b02      	ldr	r3, [pc, #8]	; (8008250 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008246:	4618      	mov	r0, r3
 8008248:	3708      	adds	r7, #8
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	20000ff8 	.word	0x20000ff8
 8008254:	0800926c 	.word	0x0800926c

08008258 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b084      	sub	sp, #16
 800825c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800825e:	4b0f      	ldr	r3, [pc, #60]	; (800829c <Get_SerialNum+0x44>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008264:	4b0e      	ldr	r3, [pc, #56]	; (80082a0 <Get_SerialNum+0x48>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800826a:	4b0e      	ldr	r3, [pc, #56]	; (80082a4 <Get_SerialNum+0x4c>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008270:	68fa      	ldr	r2, [r7, #12]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4413      	add	r3, r2
 8008276:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d009      	beq.n	8008292 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800827e:	2208      	movs	r2, #8
 8008280:	4909      	ldr	r1, [pc, #36]	; (80082a8 <Get_SerialNum+0x50>)
 8008282:	68f8      	ldr	r0, [r7, #12]
 8008284:	f000 f814 	bl	80082b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008288:	2204      	movs	r2, #4
 800828a:	4908      	ldr	r1, [pc, #32]	; (80082ac <Get_SerialNum+0x54>)
 800828c:	68b8      	ldr	r0, [r7, #8]
 800828e:	f000 f80f 	bl	80082b0 <IntToUnicode>
  }
}
 8008292:	bf00      	nop
 8008294:	3710      	adds	r7, #16
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	1ffff7e8 	.word	0x1ffff7e8
 80082a0:	1ffff7ec 	.word	0x1ffff7ec
 80082a4:	1ffff7f0 	.word	0x1ffff7f0
 80082a8:	20000162 	.word	0x20000162
 80082ac:	20000172 	.word	0x20000172

080082b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b087      	sub	sp, #28
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	4613      	mov	r3, r2
 80082bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80082be:	2300      	movs	r3, #0
 80082c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80082c2:	2300      	movs	r3, #0
 80082c4:	75fb      	strb	r3, [r7, #23]
 80082c6:	e027      	b.n	8008318 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	0f1b      	lsrs	r3, r3, #28
 80082cc:	2b09      	cmp	r3, #9
 80082ce:	d80b      	bhi.n	80082e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	0f1b      	lsrs	r3, r3, #28
 80082d4:	b2da      	uxtb	r2, r3
 80082d6:	7dfb      	ldrb	r3, [r7, #23]
 80082d8:	005b      	lsls	r3, r3, #1
 80082da:	4619      	mov	r1, r3
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	440b      	add	r3, r1
 80082e0:	3230      	adds	r2, #48	; 0x30
 80082e2:	b2d2      	uxtb	r2, r2
 80082e4:	701a      	strb	r2, [r3, #0]
 80082e6:	e00a      	b.n	80082fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	0f1b      	lsrs	r3, r3, #28
 80082ec:	b2da      	uxtb	r2, r3
 80082ee:	7dfb      	ldrb	r3, [r7, #23]
 80082f0:	005b      	lsls	r3, r3, #1
 80082f2:	4619      	mov	r1, r3
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	440b      	add	r3, r1
 80082f8:	3237      	adds	r2, #55	; 0x37
 80082fa:	b2d2      	uxtb	r2, r2
 80082fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	011b      	lsls	r3, r3, #4
 8008302:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008304:	7dfb      	ldrb	r3, [r7, #23]
 8008306:	005b      	lsls	r3, r3, #1
 8008308:	3301      	adds	r3, #1
 800830a:	68ba      	ldr	r2, [r7, #8]
 800830c:	4413      	add	r3, r2
 800830e:	2200      	movs	r2, #0
 8008310:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008312:	7dfb      	ldrb	r3, [r7, #23]
 8008314:	3301      	adds	r3, #1
 8008316:	75fb      	strb	r3, [r7, #23]
 8008318:	7dfa      	ldrb	r2, [r7, #23]
 800831a:	79fb      	ldrb	r3, [r7, #7]
 800831c:	429a      	cmp	r2, r3
 800831e:	d3d3      	bcc.n	80082c8 <IntToUnicode+0x18>
  }
}
 8008320:	bf00      	nop
 8008322:	bf00      	nop
 8008324:	371c      	adds	r7, #28
 8008326:	46bd      	mov	sp, r7
 8008328:	bc80      	pop	{r7}
 800832a:	4770      	bx	lr

0800832c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a0d      	ldr	r2, [pc, #52]	; (8008370 <HAL_PCD_MspInit+0x44>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d113      	bne.n	8008366 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800833e:	4b0d      	ldr	r3, [pc, #52]	; (8008374 <HAL_PCD_MspInit+0x48>)
 8008340:	69db      	ldr	r3, [r3, #28]
 8008342:	4a0c      	ldr	r2, [pc, #48]	; (8008374 <HAL_PCD_MspInit+0x48>)
 8008344:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008348:	61d3      	str	r3, [r2, #28]
 800834a:	4b0a      	ldr	r3, [pc, #40]	; (8008374 <HAL_PCD_MspInit+0x48>)
 800834c:	69db      	ldr	r3, [r3, #28]
 800834e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008352:	60fb      	str	r3, [r7, #12]
 8008354:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008356:	2200      	movs	r2, #0
 8008358:	2100      	movs	r1, #0
 800835a:	2014      	movs	r0, #20
 800835c:	f7f9 fa89 	bl	8001872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008360:	2014      	movs	r0, #20
 8008362:	f7f9 faa2 	bl	80018aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008366:	bf00      	nop
 8008368:	3710      	adds	r7, #16
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	40005c00 	.word	0x40005c00
 8008374:	40021000 	.word	0x40021000

08008378 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800838c:	4619      	mov	r1, r3
 800838e:	4610      	mov	r0, r2
 8008390:	f7fe fd95 	bl	8006ebe <USBD_LL_SetupStage>
}
 8008394:	bf00      	nop
 8008396:	3708      	adds	r7, #8
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}

0800839c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b082      	sub	sp, #8
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	460b      	mov	r3, r1
 80083a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80083ae:	78fa      	ldrb	r2, [r7, #3]
 80083b0:	6879      	ldr	r1, [r7, #4]
 80083b2:	4613      	mov	r3, r2
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	4413      	add	r3, r2
 80083b8:	00db      	lsls	r3, r3, #3
 80083ba:	440b      	add	r3, r1
 80083bc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	78fb      	ldrb	r3, [r7, #3]
 80083c4:	4619      	mov	r1, r3
 80083c6:	f7fe fdc7 	bl	8006f58 <USBD_LL_DataOutStage>
}
 80083ca:	bf00      	nop
 80083cc:	3708      	adds	r7, #8
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083d2:	b580      	push	{r7, lr}
 80083d4:	b082      	sub	sp, #8
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
 80083da:	460b      	mov	r3, r1
 80083dc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80083e4:	78fa      	ldrb	r2, [r7, #3]
 80083e6:	6879      	ldr	r1, [r7, #4]
 80083e8:	4613      	mov	r3, r2
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	4413      	add	r3, r2
 80083ee:	00db      	lsls	r3, r3, #3
 80083f0:	440b      	add	r3, r1
 80083f2:	333c      	adds	r3, #60	; 0x3c
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	78fb      	ldrb	r3, [r7, #3]
 80083f8:	4619      	mov	r1, r3
 80083fa:	f7fe fe1e 	bl	800703a <USBD_LL_DataInStage>
}
 80083fe:	bf00      	nop
 8008400:	3708      	adds	r7, #8
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008406:	b580      	push	{r7, lr}
 8008408:	b082      	sub	sp, #8
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008414:	4618      	mov	r0, r3
 8008416:	f7fe ff2e 	bl	8007276 <USBD_LL_SOF>
}
 800841a:	bf00      	nop
 800841c:	3708      	adds	r7, #8
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b084      	sub	sp, #16
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800842a:	2301      	movs	r3, #1
 800842c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	2b02      	cmp	r3, #2
 8008434:	d001      	beq.n	800843a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008436:	f7f8 f8c9 	bl	80005cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008440:	7bfa      	ldrb	r2, [r7, #15]
 8008442:	4611      	mov	r1, r2
 8008444:	4618      	mov	r0, r3
 8008446:	f7fe fede 	bl	8007206 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008450:	4618      	mov	r0, r3
 8008452:	f7fe fe97 	bl	8007184 <USBD_LL_Reset>
}
 8008456:	bf00      	nop
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
	...

08008460 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800846e:	4618      	mov	r0, r3
 8008470:	f7fe fed8 	bl	8007224 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	699b      	ldr	r3, [r3, #24]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d005      	beq.n	8008488 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800847c:	4b04      	ldr	r3, [pc, #16]	; (8008490 <HAL_PCD_SuspendCallback+0x30>)
 800847e:	691b      	ldr	r3, [r3, #16]
 8008480:	4a03      	ldr	r2, [pc, #12]	; (8008490 <HAL_PCD_SuspendCallback+0x30>)
 8008482:	f043 0306 	orr.w	r3, r3, #6
 8008486:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008488:	bf00      	nop
 800848a:	3708      	adds	r7, #8
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}
 8008490:	e000ed00 	.word	0xe000ed00

08008494 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80084a2:	4618      	mov	r0, r3
 80084a4:	f7fe fed2 	bl	800724c <USBD_LL_Resume>
}
 80084a8:	bf00      	nop
 80084aa:	3708      	adds	r7, #8
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80084b8:	4a28      	ldr	r2, [pc, #160]	; (800855c <USBD_LL_Init+0xac>)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	4a26      	ldr	r2, [pc, #152]	; (800855c <USBD_LL_Init+0xac>)
 80084c4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80084c8:	4b24      	ldr	r3, [pc, #144]	; (800855c <USBD_LL_Init+0xac>)
 80084ca:	4a25      	ldr	r2, [pc, #148]	; (8008560 <USBD_LL_Init+0xb0>)
 80084cc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80084ce:	4b23      	ldr	r3, [pc, #140]	; (800855c <USBD_LL_Init+0xac>)
 80084d0:	2208      	movs	r2, #8
 80084d2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80084d4:	4b21      	ldr	r3, [pc, #132]	; (800855c <USBD_LL_Init+0xac>)
 80084d6:	2202      	movs	r2, #2
 80084d8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80084da:	4b20      	ldr	r3, [pc, #128]	; (800855c <USBD_LL_Init+0xac>)
 80084dc:	2200      	movs	r2, #0
 80084de:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80084e0:	4b1e      	ldr	r3, [pc, #120]	; (800855c <USBD_LL_Init+0xac>)
 80084e2:	2200      	movs	r2, #0
 80084e4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80084e6:	4b1d      	ldr	r3, [pc, #116]	; (800855c <USBD_LL_Init+0xac>)
 80084e8:	2200      	movs	r2, #0
 80084ea:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80084ec:	481b      	ldr	r0, [pc, #108]	; (800855c <USBD_LL_Init+0xac>)
 80084ee:	f7f9 fbac 	bl	8001c4a <HAL_PCD_Init>
 80084f2:	4603      	mov	r3, r0
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d001      	beq.n	80084fc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80084f8:	f7f8 f868 	bl	80005cc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008502:	2318      	movs	r3, #24
 8008504:	2200      	movs	r2, #0
 8008506:	2100      	movs	r1, #0
 8008508:	f7fb f822 	bl	8003550 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008512:	2358      	movs	r3, #88	; 0x58
 8008514:	2200      	movs	r2, #0
 8008516:	2180      	movs	r1, #128	; 0x80
 8008518:	f7fb f81a 	bl	8003550 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008522:	23c0      	movs	r3, #192	; 0xc0
 8008524:	2200      	movs	r2, #0
 8008526:	2181      	movs	r1, #129	; 0x81
 8008528:	f7fb f812 	bl	8003550 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008532:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008536:	2200      	movs	r2, #0
 8008538:	2101      	movs	r1, #1
 800853a:	f7fb f809 	bl	8003550 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008544:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008548:	2200      	movs	r2, #0
 800854a:	2182      	movs	r1, #130	; 0x82
 800854c:	f7fb f800 	bl	8003550 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008550:	2300      	movs	r3, #0
}
 8008552:	4618      	mov	r0, r3
 8008554:	3708      	adds	r7, #8
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	200011f8 	.word	0x200011f8
 8008560:	40005c00 	.word	0x40005c00

08008564 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b084      	sub	sp, #16
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800856c:	2300      	movs	r3, #0
 800856e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008570:	2300      	movs	r3, #0
 8008572:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800857a:	4618      	mov	r0, r3
 800857c:	f7f9 fc70 	bl	8001e60 <HAL_PCD_Start>
 8008580:	4603      	mov	r3, r0
 8008582:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008584:	7bfb      	ldrb	r3, [r7, #15]
 8008586:	4618      	mov	r0, r3
 8008588:	f000 f94e 	bl	8008828 <USBD_Get_USB_Status>
 800858c:	4603      	mov	r3, r0
 800858e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008590:	7bbb      	ldrb	r3, [r7, #14]
}
 8008592:	4618      	mov	r0, r3
 8008594:	3710      	adds	r7, #16
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}

0800859a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800859a:	b580      	push	{r7, lr}
 800859c:	b084      	sub	sp, #16
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
 80085a2:	4608      	mov	r0, r1
 80085a4:	4611      	mov	r1, r2
 80085a6:	461a      	mov	r2, r3
 80085a8:	4603      	mov	r3, r0
 80085aa:	70fb      	strb	r3, [r7, #3]
 80085ac:	460b      	mov	r3, r1
 80085ae:	70bb      	strb	r3, [r7, #2]
 80085b0:	4613      	mov	r3, r2
 80085b2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085b4:	2300      	movs	r3, #0
 80085b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085b8:	2300      	movs	r3, #0
 80085ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80085c2:	78bb      	ldrb	r3, [r7, #2]
 80085c4:	883a      	ldrh	r2, [r7, #0]
 80085c6:	78f9      	ldrb	r1, [r7, #3]
 80085c8:	f7f9 fdea 	bl	80021a0 <HAL_PCD_EP_Open>
 80085cc:	4603      	mov	r3, r0
 80085ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085d0:	7bfb      	ldrb	r3, [r7, #15]
 80085d2:	4618      	mov	r0, r3
 80085d4:	f000 f928 	bl	8008828 <USBD_Get_USB_Status>
 80085d8:	4603      	mov	r3, r0
 80085da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3710      	adds	r7, #16
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}

080085e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085e6:	b580      	push	{r7, lr}
 80085e8:	b084      	sub	sp, #16
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
 80085ee:	460b      	mov	r3, r1
 80085f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085f2:	2300      	movs	r3, #0
 80085f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085f6:	2300      	movs	r3, #0
 80085f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008600:	78fa      	ldrb	r2, [r7, #3]
 8008602:	4611      	mov	r1, r2
 8008604:	4618      	mov	r0, r3
 8008606:	f7f9 fe31 	bl	800226c <HAL_PCD_EP_Close>
 800860a:	4603      	mov	r3, r0
 800860c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800860e:	7bfb      	ldrb	r3, [r7, #15]
 8008610:	4618      	mov	r0, r3
 8008612:	f000 f909 	bl	8008828 <USBD_Get_USB_Status>
 8008616:	4603      	mov	r3, r0
 8008618:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800861a:	7bbb      	ldrb	r3, [r7, #14]
}
 800861c:	4618      	mov	r0, r3
 800861e:	3710      	adds	r7, #16
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	460b      	mov	r3, r1
 800862e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008630:	2300      	movs	r3, #0
 8008632:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008634:	2300      	movs	r3, #0
 8008636:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800863e:	78fa      	ldrb	r2, [r7, #3]
 8008640:	4611      	mov	r1, r2
 8008642:	4618      	mov	r0, r3
 8008644:	f7f9 fef1 	bl	800242a <HAL_PCD_EP_SetStall>
 8008648:	4603      	mov	r3, r0
 800864a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800864c:	7bfb      	ldrb	r3, [r7, #15]
 800864e:	4618      	mov	r0, r3
 8008650:	f000 f8ea 	bl	8008828 <USBD_Get_USB_Status>
 8008654:	4603      	mov	r3, r0
 8008656:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008658:	7bbb      	ldrb	r3, [r7, #14]
}
 800865a:	4618      	mov	r0, r3
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}

08008662 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008662:	b580      	push	{r7, lr}
 8008664:	b084      	sub	sp, #16
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
 800866a:	460b      	mov	r3, r1
 800866c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800866e:	2300      	movs	r3, #0
 8008670:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008672:	2300      	movs	r3, #0
 8008674:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800867c:	78fa      	ldrb	r2, [r7, #3]
 800867e:	4611      	mov	r1, r2
 8008680:	4618      	mov	r0, r3
 8008682:	f7f9 ff32 	bl	80024ea <HAL_PCD_EP_ClrStall>
 8008686:	4603      	mov	r3, r0
 8008688:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800868a:	7bfb      	ldrb	r3, [r7, #15]
 800868c:	4618      	mov	r0, r3
 800868e:	f000 f8cb 	bl	8008828 <USBD_Get_USB_Status>
 8008692:	4603      	mov	r3, r0
 8008694:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008696:	7bbb      	ldrb	r3, [r7, #14]
}
 8008698:	4618      	mov	r0, r3
 800869a:	3710      	adds	r7, #16
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b085      	sub	sp, #20
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	460b      	mov	r3, r1
 80086aa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086b2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80086b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	da0c      	bge.n	80086d6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80086bc:	78fb      	ldrb	r3, [r7, #3]
 80086be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086c2:	68f9      	ldr	r1, [r7, #12]
 80086c4:	1c5a      	adds	r2, r3, #1
 80086c6:	4613      	mov	r3, r2
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	4413      	add	r3, r2
 80086cc:	00db      	lsls	r3, r3, #3
 80086ce:	440b      	add	r3, r1
 80086d0:	3302      	adds	r3, #2
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	e00b      	b.n	80086ee <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80086d6:	78fb      	ldrb	r3, [r7, #3]
 80086d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086dc:	68f9      	ldr	r1, [r7, #12]
 80086de:	4613      	mov	r3, r2
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	4413      	add	r3, r2
 80086e4:	00db      	lsls	r3, r3, #3
 80086e6:	440b      	add	r3, r1
 80086e8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80086ec:	781b      	ldrb	r3, [r3, #0]
  }
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3714      	adds	r7, #20
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bc80      	pop	{r7}
 80086f6:	4770      	bx	lr

080086f8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	460b      	mov	r3, r1
 8008702:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008704:	2300      	movs	r3, #0
 8008706:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008708:	2300      	movs	r3, #0
 800870a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008712:	78fa      	ldrb	r2, [r7, #3]
 8008714:	4611      	mov	r1, r2
 8008716:	4618      	mov	r0, r3
 8008718:	f7f9 fd1d 	bl	8002156 <HAL_PCD_SetAddress>
 800871c:	4603      	mov	r3, r0
 800871e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008720:	7bfb      	ldrb	r3, [r7, #15]
 8008722:	4618      	mov	r0, r3
 8008724:	f000 f880 	bl	8008828 <USBD_Get_USB_Status>
 8008728:	4603      	mov	r3, r0
 800872a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800872c:	7bbb      	ldrb	r3, [r7, #14]
}
 800872e:	4618      	mov	r0, r3
 8008730:	3710      	adds	r7, #16
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008736:	b580      	push	{r7, lr}
 8008738:	b086      	sub	sp, #24
 800873a:	af00      	add	r7, sp, #0
 800873c:	60f8      	str	r0, [r7, #12]
 800873e:	607a      	str	r2, [r7, #4]
 8008740:	461a      	mov	r2, r3
 8008742:	460b      	mov	r3, r1
 8008744:	72fb      	strb	r3, [r7, #11]
 8008746:	4613      	mov	r3, r2
 8008748:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800874a:	2300      	movs	r3, #0
 800874c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800874e:	2300      	movs	r3, #0
 8008750:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008758:	893b      	ldrh	r3, [r7, #8]
 800875a:	7af9      	ldrb	r1, [r7, #11]
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	f7f9 fe21 	bl	80023a4 <HAL_PCD_EP_Transmit>
 8008762:	4603      	mov	r3, r0
 8008764:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008766:	7dfb      	ldrb	r3, [r7, #23]
 8008768:	4618      	mov	r0, r3
 800876a:	f000 f85d 	bl	8008828 <USBD_Get_USB_Status>
 800876e:	4603      	mov	r3, r0
 8008770:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008772:	7dbb      	ldrb	r3, [r7, #22]
}
 8008774:	4618      	mov	r0, r3
 8008776:	3718      	adds	r7, #24
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b086      	sub	sp, #24
 8008780:	af00      	add	r7, sp, #0
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	607a      	str	r2, [r7, #4]
 8008786:	461a      	mov	r2, r3
 8008788:	460b      	mov	r3, r1
 800878a:	72fb      	strb	r3, [r7, #11]
 800878c:	4613      	mov	r3, r2
 800878e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008790:	2300      	movs	r3, #0
 8008792:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008794:	2300      	movs	r3, #0
 8008796:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800879e:	893b      	ldrh	r3, [r7, #8]
 80087a0:	7af9      	ldrb	r1, [r7, #11]
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	f7f9 fdaa 	bl	80022fc <HAL_PCD_EP_Receive>
 80087a8:	4603      	mov	r3, r0
 80087aa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087ac:	7dfb      	ldrb	r3, [r7, #23]
 80087ae:	4618      	mov	r0, r3
 80087b0:	f000 f83a 	bl	8008828 <USBD_Get_USB_Status>
 80087b4:	4603      	mov	r3, r0
 80087b6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80087b8:	7dbb      	ldrb	r3, [r7, #22]
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3718      	adds	r7, #24
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}

080087c2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087c2:	b580      	push	{r7, lr}
 80087c4:	b082      	sub	sp, #8
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
 80087ca:	460b      	mov	r3, r1
 80087cc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80087d4:	78fa      	ldrb	r2, [r7, #3]
 80087d6:	4611      	mov	r1, r2
 80087d8:	4618      	mov	r0, r3
 80087da:	f7f9 fdcc 	bl	8002376 <HAL_PCD_EP_GetRxCount>
 80087de:	4603      	mov	r3, r0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3708      	adds	r7, #8
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b083      	sub	sp, #12
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80087f0:	4b02      	ldr	r3, [pc, #8]	; (80087fc <USBD_static_malloc+0x14>)
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	370c      	adds	r7, #12
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bc80      	pop	{r7}
 80087fa:	4770      	bx	lr
 80087fc:	20000298 	.word	0x20000298

08008800 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]

}
 8008808:	bf00      	nop
 800880a:	370c      	adds	r7, #12
 800880c:	46bd      	mov	sp, r7
 800880e:	bc80      	pop	{r7}
 8008810:	4770      	bx	lr

08008812 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008812:	b480      	push	{r7}
 8008814:	b083      	sub	sp, #12
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
 800881a:	460b      	mov	r3, r1
 800881c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800881e:	bf00      	nop
 8008820:	370c      	adds	r7, #12
 8008822:	46bd      	mov	sp, r7
 8008824:	bc80      	pop	{r7}
 8008826:	4770      	bx	lr

08008828 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008828:	b480      	push	{r7}
 800882a:	b085      	sub	sp, #20
 800882c:	af00      	add	r7, sp, #0
 800882e:	4603      	mov	r3, r0
 8008830:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008832:	2300      	movs	r3, #0
 8008834:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008836:	79fb      	ldrb	r3, [r7, #7]
 8008838:	2b03      	cmp	r3, #3
 800883a:	d817      	bhi.n	800886c <USBD_Get_USB_Status+0x44>
 800883c:	a201      	add	r2, pc, #4	; (adr r2, 8008844 <USBD_Get_USB_Status+0x1c>)
 800883e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008842:	bf00      	nop
 8008844:	08008855 	.word	0x08008855
 8008848:	0800885b 	.word	0x0800885b
 800884c:	08008861 	.word	0x08008861
 8008850:	08008867 	.word	0x08008867
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008854:	2300      	movs	r3, #0
 8008856:	73fb      	strb	r3, [r7, #15]
    break;
 8008858:	e00b      	b.n	8008872 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800885a:	2302      	movs	r3, #2
 800885c:	73fb      	strb	r3, [r7, #15]
    break;
 800885e:	e008      	b.n	8008872 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008860:	2301      	movs	r3, #1
 8008862:	73fb      	strb	r3, [r7, #15]
    break;
 8008864:	e005      	b.n	8008872 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008866:	2302      	movs	r3, #2
 8008868:	73fb      	strb	r3, [r7, #15]
    break;
 800886a:	e002      	b.n	8008872 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800886c:	2302      	movs	r3, #2
 800886e:	73fb      	strb	r3, [r7, #15]
    break;
 8008870:	bf00      	nop
  }
  return usb_status;
 8008872:	7bfb      	ldrb	r3, [r7, #15]
}
 8008874:	4618      	mov	r0, r3
 8008876:	3714      	adds	r7, #20
 8008878:	46bd      	mov	sp, r7
 800887a:	bc80      	pop	{r7}
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop

08008880 <__errno>:
 8008880:	4b01      	ldr	r3, [pc, #4]	; (8008888 <__errno+0x8>)
 8008882:	6818      	ldr	r0, [r3, #0]
 8008884:	4770      	bx	lr
 8008886:	bf00      	nop
 8008888:	2000017c 	.word	0x2000017c

0800888c <__libc_init_array>:
 800888c:	b570      	push	{r4, r5, r6, lr}
 800888e:	2600      	movs	r6, #0
 8008890:	4d0c      	ldr	r5, [pc, #48]	; (80088c4 <__libc_init_array+0x38>)
 8008892:	4c0d      	ldr	r4, [pc, #52]	; (80088c8 <__libc_init_array+0x3c>)
 8008894:	1b64      	subs	r4, r4, r5
 8008896:	10a4      	asrs	r4, r4, #2
 8008898:	42a6      	cmp	r6, r4
 800889a:	d109      	bne.n	80088b0 <__libc_init_array+0x24>
 800889c:	f000 fc90 	bl	80091c0 <_init>
 80088a0:	2600      	movs	r6, #0
 80088a2:	4d0a      	ldr	r5, [pc, #40]	; (80088cc <__libc_init_array+0x40>)
 80088a4:	4c0a      	ldr	r4, [pc, #40]	; (80088d0 <__libc_init_array+0x44>)
 80088a6:	1b64      	subs	r4, r4, r5
 80088a8:	10a4      	asrs	r4, r4, #2
 80088aa:	42a6      	cmp	r6, r4
 80088ac:	d105      	bne.n	80088ba <__libc_init_array+0x2e>
 80088ae:	bd70      	pop	{r4, r5, r6, pc}
 80088b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80088b4:	4798      	blx	r3
 80088b6:	3601      	adds	r6, #1
 80088b8:	e7ee      	b.n	8008898 <__libc_init_array+0xc>
 80088ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80088be:	4798      	blx	r3
 80088c0:	3601      	adds	r6, #1
 80088c2:	e7f2      	b.n	80088aa <__libc_init_array+0x1e>
 80088c4:	080092c8 	.word	0x080092c8
 80088c8:	080092c8 	.word	0x080092c8
 80088cc:	080092c8 	.word	0x080092c8
 80088d0:	080092cc 	.word	0x080092cc

080088d4 <memset>:
 80088d4:	4603      	mov	r3, r0
 80088d6:	4402      	add	r2, r0
 80088d8:	4293      	cmp	r3, r2
 80088da:	d100      	bne.n	80088de <memset+0xa>
 80088dc:	4770      	bx	lr
 80088de:	f803 1b01 	strb.w	r1, [r3], #1
 80088e2:	e7f9      	b.n	80088d8 <memset+0x4>

080088e4 <sniprintf>:
 80088e4:	b40c      	push	{r2, r3}
 80088e6:	b530      	push	{r4, r5, lr}
 80088e8:	4b17      	ldr	r3, [pc, #92]	; (8008948 <sniprintf+0x64>)
 80088ea:	1e0c      	subs	r4, r1, #0
 80088ec:	681d      	ldr	r5, [r3, #0]
 80088ee:	b09d      	sub	sp, #116	; 0x74
 80088f0:	da08      	bge.n	8008904 <sniprintf+0x20>
 80088f2:	238b      	movs	r3, #139	; 0x8b
 80088f4:	f04f 30ff 	mov.w	r0, #4294967295
 80088f8:	602b      	str	r3, [r5, #0]
 80088fa:	b01d      	add	sp, #116	; 0x74
 80088fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008900:	b002      	add	sp, #8
 8008902:	4770      	bx	lr
 8008904:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008908:	f8ad 3014 	strh.w	r3, [sp, #20]
 800890c:	bf0c      	ite	eq
 800890e:	4623      	moveq	r3, r4
 8008910:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008914:	9304      	str	r3, [sp, #16]
 8008916:	9307      	str	r3, [sp, #28]
 8008918:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800891c:	9002      	str	r0, [sp, #8]
 800891e:	9006      	str	r0, [sp, #24]
 8008920:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008924:	4628      	mov	r0, r5
 8008926:	ab21      	add	r3, sp, #132	; 0x84
 8008928:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800892a:	a902      	add	r1, sp, #8
 800892c:	9301      	str	r3, [sp, #4]
 800892e:	f000 f889 	bl	8008a44 <_svfiprintf_r>
 8008932:	1c43      	adds	r3, r0, #1
 8008934:	bfbc      	itt	lt
 8008936:	238b      	movlt	r3, #139	; 0x8b
 8008938:	602b      	strlt	r3, [r5, #0]
 800893a:	2c00      	cmp	r4, #0
 800893c:	d0dd      	beq.n	80088fa <sniprintf+0x16>
 800893e:	2200      	movs	r2, #0
 8008940:	9b02      	ldr	r3, [sp, #8]
 8008942:	701a      	strb	r2, [r3, #0]
 8008944:	e7d9      	b.n	80088fa <sniprintf+0x16>
 8008946:	bf00      	nop
 8008948:	2000017c 	.word	0x2000017c

0800894c <siprintf>:
 800894c:	b40e      	push	{r1, r2, r3}
 800894e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008952:	b500      	push	{lr}
 8008954:	b09c      	sub	sp, #112	; 0x70
 8008956:	ab1d      	add	r3, sp, #116	; 0x74
 8008958:	9002      	str	r0, [sp, #8]
 800895a:	9006      	str	r0, [sp, #24]
 800895c:	9107      	str	r1, [sp, #28]
 800895e:	9104      	str	r1, [sp, #16]
 8008960:	4808      	ldr	r0, [pc, #32]	; (8008984 <siprintf+0x38>)
 8008962:	4909      	ldr	r1, [pc, #36]	; (8008988 <siprintf+0x3c>)
 8008964:	f853 2b04 	ldr.w	r2, [r3], #4
 8008968:	9105      	str	r1, [sp, #20]
 800896a:	6800      	ldr	r0, [r0, #0]
 800896c:	a902      	add	r1, sp, #8
 800896e:	9301      	str	r3, [sp, #4]
 8008970:	f000 f868 	bl	8008a44 <_svfiprintf_r>
 8008974:	2200      	movs	r2, #0
 8008976:	9b02      	ldr	r3, [sp, #8]
 8008978:	701a      	strb	r2, [r3, #0]
 800897a:	b01c      	add	sp, #112	; 0x70
 800897c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008980:	b003      	add	sp, #12
 8008982:	4770      	bx	lr
 8008984:	2000017c 	.word	0x2000017c
 8008988:	ffff0208 	.word	0xffff0208

0800898c <__ssputs_r>:
 800898c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008990:	688e      	ldr	r6, [r1, #8]
 8008992:	4682      	mov	sl, r0
 8008994:	429e      	cmp	r6, r3
 8008996:	460c      	mov	r4, r1
 8008998:	4690      	mov	r8, r2
 800899a:	461f      	mov	r7, r3
 800899c:	d838      	bhi.n	8008a10 <__ssputs_r+0x84>
 800899e:	898a      	ldrh	r2, [r1, #12]
 80089a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80089a4:	d032      	beq.n	8008a0c <__ssputs_r+0x80>
 80089a6:	6825      	ldr	r5, [r4, #0]
 80089a8:	6909      	ldr	r1, [r1, #16]
 80089aa:	3301      	adds	r3, #1
 80089ac:	eba5 0901 	sub.w	r9, r5, r1
 80089b0:	6965      	ldr	r5, [r4, #20]
 80089b2:	444b      	add	r3, r9
 80089b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80089bc:	106d      	asrs	r5, r5, #1
 80089be:	429d      	cmp	r5, r3
 80089c0:	bf38      	it	cc
 80089c2:	461d      	movcc	r5, r3
 80089c4:	0553      	lsls	r3, r2, #21
 80089c6:	d531      	bpl.n	8008a2c <__ssputs_r+0xa0>
 80089c8:	4629      	mov	r1, r5
 80089ca:	f000 fb53 	bl	8009074 <_malloc_r>
 80089ce:	4606      	mov	r6, r0
 80089d0:	b950      	cbnz	r0, 80089e8 <__ssputs_r+0x5c>
 80089d2:	230c      	movs	r3, #12
 80089d4:	f04f 30ff 	mov.w	r0, #4294967295
 80089d8:	f8ca 3000 	str.w	r3, [sl]
 80089dc:	89a3      	ldrh	r3, [r4, #12]
 80089de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089e2:	81a3      	strh	r3, [r4, #12]
 80089e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089e8:	464a      	mov	r2, r9
 80089ea:	6921      	ldr	r1, [r4, #16]
 80089ec:	f000 face 	bl	8008f8c <memcpy>
 80089f0:	89a3      	ldrh	r3, [r4, #12]
 80089f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80089f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089fa:	81a3      	strh	r3, [r4, #12]
 80089fc:	6126      	str	r6, [r4, #16]
 80089fe:	444e      	add	r6, r9
 8008a00:	6026      	str	r6, [r4, #0]
 8008a02:	463e      	mov	r6, r7
 8008a04:	6165      	str	r5, [r4, #20]
 8008a06:	eba5 0509 	sub.w	r5, r5, r9
 8008a0a:	60a5      	str	r5, [r4, #8]
 8008a0c:	42be      	cmp	r6, r7
 8008a0e:	d900      	bls.n	8008a12 <__ssputs_r+0x86>
 8008a10:	463e      	mov	r6, r7
 8008a12:	4632      	mov	r2, r6
 8008a14:	4641      	mov	r1, r8
 8008a16:	6820      	ldr	r0, [r4, #0]
 8008a18:	f000 fac6 	bl	8008fa8 <memmove>
 8008a1c:	68a3      	ldr	r3, [r4, #8]
 8008a1e:	6822      	ldr	r2, [r4, #0]
 8008a20:	1b9b      	subs	r3, r3, r6
 8008a22:	4432      	add	r2, r6
 8008a24:	2000      	movs	r0, #0
 8008a26:	60a3      	str	r3, [r4, #8]
 8008a28:	6022      	str	r2, [r4, #0]
 8008a2a:	e7db      	b.n	80089e4 <__ssputs_r+0x58>
 8008a2c:	462a      	mov	r2, r5
 8008a2e:	f000 fb7b 	bl	8009128 <_realloc_r>
 8008a32:	4606      	mov	r6, r0
 8008a34:	2800      	cmp	r0, #0
 8008a36:	d1e1      	bne.n	80089fc <__ssputs_r+0x70>
 8008a38:	4650      	mov	r0, sl
 8008a3a:	6921      	ldr	r1, [r4, #16]
 8008a3c:	f000 face 	bl	8008fdc <_free_r>
 8008a40:	e7c7      	b.n	80089d2 <__ssputs_r+0x46>
	...

08008a44 <_svfiprintf_r>:
 8008a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a48:	4698      	mov	r8, r3
 8008a4a:	898b      	ldrh	r3, [r1, #12]
 8008a4c:	4607      	mov	r7, r0
 8008a4e:	061b      	lsls	r3, r3, #24
 8008a50:	460d      	mov	r5, r1
 8008a52:	4614      	mov	r4, r2
 8008a54:	b09d      	sub	sp, #116	; 0x74
 8008a56:	d50e      	bpl.n	8008a76 <_svfiprintf_r+0x32>
 8008a58:	690b      	ldr	r3, [r1, #16]
 8008a5a:	b963      	cbnz	r3, 8008a76 <_svfiprintf_r+0x32>
 8008a5c:	2140      	movs	r1, #64	; 0x40
 8008a5e:	f000 fb09 	bl	8009074 <_malloc_r>
 8008a62:	6028      	str	r0, [r5, #0]
 8008a64:	6128      	str	r0, [r5, #16]
 8008a66:	b920      	cbnz	r0, 8008a72 <_svfiprintf_r+0x2e>
 8008a68:	230c      	movs	r3, #12
 8008a6a:	603b      	str	r3, [r7, #0]
 8008a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a70:	e0d1      	b.n	8008c16 <_svfiprintf_r+0x1d2>
 8008a72:	2340      	movs	r3, #64	; 0x40
 8008a74:	616b      	str	r3, [r5, #20]
 8008a76:	2300      	movs	r3, #0
 8008a78:	9309      	str	r3, [sp, #36]	; 0x24
 8008a7a:	2320      	movs	r3, #32
 8008a7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a80:	2330      	movs	r3, #48	; 0x30
 8008a82:	f04f 0901 	mov.w	r9, #1
 8008a86:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a8a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008c30 <_svfiprintf_r+0x1ec>
 8008a8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a92:	4623      	mov	r3, r4
 8008a94:	469a      	mov	sl, r3
 8008a96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a9a:	b10a      	cbz	r2, 8008aa0 <_svfiprintf_r+0x5c>
 8008a9c:	2a25      	cmp	r2, #37	; 0x25
 8008a9e:	d1f9      	bne.n	8008a94 <_svfiprintf_r+0x50>
 8008aa0:	ebba 0b04 	subs.w	fp, sl, r4
 8008aa4:	d00b      	beq.n	8008abe <_svfiprintf_r+0x7a>
 8008aa6:	465b      	mov	r3, fp
 8008aa8:	4622      	mov	r2, r4
 8008aaa:	4629      	mov	r1, r5
 8008aac:	4638      	mov	r0, r7
 8008aae:	f7ff ff6d 	bl	800898c <__ssputs_r>
 8008ab2:	3001      	adds	r0, #1
 8008ab4:	f000 80aa 	beq.w	8008c0c <_svfiprintf_r+0x1c8>
 8008ab8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008aba:	445a      	add	r2, fp
 8008abc:	9209      	str	r2, [sp, #36]	; 0x24
 8008abe:	f89a 3000 	ldrb.w	r3, [sl]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	f000 80a2 	beq.w	8008c0c <_svfiprintf_r+0x1c8>
 8008ac8:	2300      	movs	r3, #0
 8008aca:	f04f 32ff 	mov.w	r2, #4294967295
 8008ace:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ad2:	f10a 0a01 	add.w	sl, sl, #1
 8008ad6:	9304      	str	r3, [sp, #16]
 8008ad8:	9307      	str	r3, [sp, #28]
 8008ada:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ade:	931a      	str	r3, [sp, #104]	; 0x68
 8008ae0:	4654      	mov	r4, sl
 8008ae2:	2205      	movs	r2, #5
 8008ae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ae8:	4851      	ldr	r0, [pc, #324]	; (8008c30 <_svfiprintf_r+0x1ec>)
 8008aea:	f000 fa41 	bl	8008f70 <memchr>
 8008aee:	9a04      	ldr	r2, [sp, #16]
 8008af0:	b9d8      	cbnz	r0, 8008b2a <_svfiprintf_r+0xe6>
 8008af2:	06d0      	lsls	r0, r2, #27
 8008af4:	bf44      	itt	mi
 8008af6:	2320      	movmi	r3, #32
 8008af8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008afc:	0711      	lsls	r1, r2, #28
 8008afe:	bf44      	itt	mi
 8008b00:	232b      	movmi	r3, #43	; 0x2b
 8008b02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b06:	f89a 3000 	ldrb.w	r3, [sl]
 8008b0a:	2b2a      	cmp	r3, #42	; 0x2a
 8008b0c:	d015      	beq.n	8008b3a <_svfiprintf_r+0xf6>
 8008b0e:	4654      	mov	r4, sl
 8008b10:	2000      	movs	r0, #0
 8008b12:	f04f 0c0a 	mov.w	ip, #10
 8008b16:	9a07      	ldr	r2, [sp, #28]
 8008b18:	4621      	mov	r1, r4
 8008b1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b1e:	3b30      	subs	r3, #48	; 0x30
 8008b20:	2b09      	cmp	r3, #9
 8008b22:	d94e      	bls.n	8008bc2 <_svfiprintf_r+0x17e>
 8008b24:	b1b0      	cbz	r0, 8008b54 <_svfiprintf_r+0x110>
 8008b26:	9207      	str	r2, [sp, #28]
 8008b28:	e014      	b.n	8008b54 <_svfiprintf_r+0x110>
 8008b2a:	eba0 0308 	sub.w	r3, r0, r8
 8008b2e:	fa09 f303 	lsl.w	r3, r9, r3
 8008b32:	4313      	orrs	r3, r2
 8008b34:	46a2      	mov	sl, r4
 8008b36:	9304      	str	r3, [sp, #16]
 8008b38:	e7d2      	b.n	8008ae0 <_svfiprintf_r+0x9c>
 8008b3a:	9b03      	ldr	r3, [sp, #12]
 8008b3c:	1d19      	adds	r1, r3, #4
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	9103      	str	r1, [sp, #12]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	bfbb      	ittet	lt
 8008b46:	425b      	neglt	r3, r3
 8008b48:	f042 0202 	orrlt.w	r2, r2, #2
 8008b4c:	9307      	strge	r3, [sp, #28]
 8008b4e:	9307      	strlt	r3, [sp, #28]
 8008b50:	bfb8      	it	lt
 8008b52:	9204      	strlt	r2, [sp, #16]
 8008b54:	7823      	ldrb	r3, [r4, #0]
 8008b56:	2b2e      	cmp	r3, #46	; 0x2e
 8008b58:	d10c      	bne.n	8008b74 <_svfiprintf_r+0x130>
 8008b5a:	7863      	ldrb	r3, [r4, #1]
 8008b5c:	2b2a      	cmp	r3, #42	; 0x2a
 8008b5e:	d135      	bne.n	8008bcc <_svfiprintf_r+0x188>
 8008b60:	9b03      	ldr	r3, [sp, #12]
 8008b62:	3402      	adds	r4, #2
 8008b64:	1d1a      	adds	r2, r3, #4
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	9203      	str	r2, [sp, #12]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	bfb8      	it	lt
 8008b6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b72:	9305      	str	r3, [sp, #20]
 8008b74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008c40 <_svfiprintf_r+0x1fc>
 8008b78:	2203      	movs	r2, #3
 8008b7a:	4650      	mov	r0, sl
 8008b7c:	7821      	ldrb	r1, [r4, #0]
 8008b7e:	f000 f9f7 	bl	8008f70 <memchr>
 8008b82:	b140      	cbz	r0, 8008b96 <_svfiprintf_r+0x152>
 8008b84:	2340      	movs	r3, #64	; 0x40
 8008b86:	eba0 000a 	sub.w	r0, r0, sl
 8008b8a:	fa03 f000 	lsl.w	r0, r3, r0
 8008b8e:	9b04      	ldr	r3, [sp, #16]
 8008b90:	3401      	adds	r4, #1
 8008b92:	4303      	orrs	r3, r0
 8008b94:	9304      	str	r3, [sp, #16]
 8008b96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b9a:	2206      	movs	r2, #6
 8008b9c:	4825      	ldr	r0, [pc, #148]	; (8008c34 <_svfiprintf_r+0x1f0>)
 8008b9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ba2:	f000 f9e5 	bl	8008f70 <memchr>
 8008ba6:	2800      	cmp	r0, #0
 8008ba8:	d038      	beq.n	8008c1c <_svfiprintf_r+0x1d8>
 8008baa:	4b23      	ldr	r3, [pc, #140]	; (8008c38 <_svfiprintf_r+0x1f4>)
 8008bac:	bb1b      	cbnz	r3, 8008bf6 <_svfiprintf_r+0x1b2>
 8008bae:	9b03      	ldr	r3, [sp, #12]
 8008bb0:	3307      	adds	r3, #7
 8008bb2:	f023 0307 	bic.w	r3, r3, #7
 8008bb6:	3308      	adds	r3, #8
 8008bb8:	9303      	str	r3, [sp, #12]
 8008bba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bbc:	4433      	add	r3, r6
 8008bbe:	9309      	str	r3, [sp, #36]	; 0x24
 8008bc0:	e767      	b.n	8008a92 <_svfiprintf_r+0x4e>
 8008bc2:	460c      	mov	r4, r1
 8008bc4:	2001      	movs	r0, #1
 8008bc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bca:	e7a5      	b.n	8008b18 <_svfiprintf_r+0xd4>
 8008bcc:	2300      	movs	r3, #0
 8008bce:	f04f 0c0a 	mov.w	ip, #10
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	3401      	adds	r4, #1
 8008bd6:	9305      	str	r3, [sp, #20]
 8008bd8:	4620      	mov	r0, r4
 8008bda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bde:	3a30      	subs	r2, #48	; 0x30
 8008be0:	2a09      	cmp	r2, #9
 8008be2:	d903      	bls.n	8008bec <_svfiprintf_r+0x1a8>
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d0c5      	beq.n	8008b74 <_svfiprintf_r+0x130>
 8008be8:	9105      	str	r1, [sp, #20]
 8008bea:	e7c3      	b.n	8008b74 <_svfiprintf_r+0x130>
 8008bec:	4604      	mov	r4, r0
 8008bee:	2301      	movs	r3, #1
 8008bf0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bf4:	e7f0      	b.n	8008bd8 <_svfiprintf_r+0x194>
 8008bf6:	ab03      	add	r3, sp, #12
 8008bf8:	9300      	str	r3, [sp, #0]
 8008bfa:	462a      	mov	r2, r5
 8008bfc:	4638      	mov	r0, r7
 8008bfe:	4b0f      	ldr	r3, [pc, #60]	; (8008c3c <_svfiprintf_r+0x1f8>)
 8008c00:	a904      	add	r1, sp, #16
 8008c02:	f3af 8000 	nop.w
 8008c06:	1c42      	adds	r2, r0, #1
 8008c08:	4606      	mov	r6, r0
 8008c0a:	d1d6      	bne.n	8008bba <_svfiprintf_r+0x176>
 8008c0c:	89ab      	ldrh	r3, [r5, #12]
 8008c0e:	065b      	lsls	r3, r3, #25
 8008c10:	f53f af2c 	bmi.w	8008a6c <_svfiprintf_r+0x28>
 8008c14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c16:	b01d      	add	sp, #116	; 0x74
 8008c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c1c:	ab03      	add	r3, sp, #12
 8008c1e:	9300      	str	r3, [sp, #0]
 8008c20:	462a      	mov	r2, r5
 8008c22:	4638      	mov	r0, r7
 8008c24:	4b05      	ldr	r3, [pc, #20]	; (8008c3c <_svfiprintf_r+0x1f8>)
 8008c26:	a904      	add	r1, sp, #16
 8008c28:	f000 f87c 	bl	8008d24 <_printf_i>
 8008c2c:	e7eb      	b.n	8008c06 <_svfiprintf_r+0x1c2>
 8008c2e:	bf00      	nop
 8008c30:	08009294 	.word	0x08009294
 8008c34:	0800929e 	.word	0x0800929e
 8008c38:	00000000 	.word	0x00000000
 8008c3c:	0800898d 	.word	0x0800898d
 8008c40:	0800929a 	.word	0x0800929a

08008c44 <_printf_common>:
 8008c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c48:	4616      	mov	r6, r2
 8008c4a:	4699      	mov	r9, r3
 8008c4c:	688a      	ldr	r2, [r1, #8]
 8008c4e:	690b      	ldr	r3, [r1, #16]
 8008c50:	4607      	mov	r7, r0
 8008c52:	4293      	cmp	r3, r2
 8008c54:	bfb8      	it	lt
 8008c56:	4613      	movlt	r3, r2
 8008c58:	6033      	str	r3, [r6, #0]
 8008c5a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c5e:	460c      	mov	r4, r1
 8008c60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c64:	b10a      	cbz	r2, 8008c6a <_printf_common+0x26>
 8008c66:	3301      	adds	r3, #1
 8008c68:	6033      	str	r3, [r6, #0]
 8008c6a:	6823      	ldr	r3, [r4, #0]
 8008c6c:	0699      	lsls	r1, r3, #26
 8008c6e:	bf42      	ittt	mi
 8008c70:	6833      	ldrmi	r3, [r6, #0]
 8008c72:	3302      	addmi	r3, #2
 8008c74:	6033      	strmi	r3, [r6, #0]
 8008c76:	6825      	ldr	r5, [r4, #0]
 8008c78:	f015 0506 	ands.w	r5, r5, #6
 8008c7c:	d106      	bne.n	8008c8c <_printf_common+0x48>
 8008c7e:	f104 0a19 	add.w	sl, r4, #25
 8008c82:	68e3      	ldr	r3, [r4, #12]
 8008c84:	6832      	ldr	r2, [r6, #0]
 8008c86:	1a9b      	subs	r3, r3, r2
 8008c88:	42ab      	cmp	r3, r5
 8008c8a:	dc28      	bgt.n	8008cde <_printf_common+0x9a>
 8008c8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c90:	1e13      	subs	r3, r2, #0
 8008c92:	6822      	ldr	r2, [r4, #0]
 8008c94:	bf18      	it	ne
 8008c96:	2301      	movne	r3, #1
 8008c98:	0692      	lsls	r2, r2, #26
 8008c9a:	d42d      	bmi.n	8008cf8 <_printf_common+0xb4>
 8008c9c:	4649      	mov	r1, r9
 8008c9e:	4638      	mov	r0, r7
 8008ca0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ca4:	47c0      	blx	r8
 8008ca6:	3001      	adds	r0, #1
 8008ca8:	d020      	beq.n	8008cec <_printf_common+0xa8>
 8008caa:	6823      	ldr	r3, [r4, #0]
 8008cac:	68e5      	ldr	r5, [r4, #12]
 8008cae:	f003 0306 	and.w	r3, r3, #6
 8008cb2:	2b04      	cmp	r3, #4
 8008cb4:	bf18      	it	ne
 8008cb6:	2500      	movne	r5, #0
 8008cb8:	6832      	ldr	r2, [r6, #0]
 8008cba:	f04f 0600 	mov.w	r6, #0
 8008cbe:	68a3      	ldr	r3, [r4, #8]
 8008cc0:	bf08      	it	eq
 8008cc2:	1aad      	subeq	r5, r5, r2
 8008cc4:	6922      	ldr	r2, [r4, #16]
 8008cc6:	bf08      	it	eq
 8008cc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	bfc4      	itt	gt
 8008cd0:	1a9b      	subgt	r3, r3, r2
 8008cd2:	18ed      	addgt	r5, r5, r3
 8008cd4:	341a      	adds	r4, #26
 8008cd6:	42b5      	cmp	r5, r6
 8008cd8:	d11a      	bne.n	8008d10 <_printf_common+0xcc>
 8008cda:	2000      	movs	r0, #0
 8008cdc:	e008      	b.n	8008cf0 <_printf_common+0xac>
 8008cde:	2301      	movs	r3, #1
 8008ce0:	4652      	mov	r2, sl
 8008ce2:	4649      	mov	r1, r9
 8008ce4:	4638      	mov	r0, r7
 8008ce6:	47c0      	blx	r8
 8008ce8:	3001      	adds	r0, #1
 8008cea:	d103      	bne.n	8008cf4 <_printf_common+0xb0>
 8008cec:	f04f 30ff 	mov.w	r0, #4294967295
 8008cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cf4:	3501      	adds	r5, #1
 8008cf6:	e7c4      	b.n	8008c82 <_printf_common+0x3e>
 8008cf8:	2030      	movs	r0, #48	; 0x30
 8008cfa:	18e1      	adds	r1, r4, r3
 8008cfc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d00:	1c5a      	adds	r2, r3, #1
 8008d02:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d06:	4422      	add	r2, r4
 8008d08:	3302      	adds	r3, #2
 8008d0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d0e:	e7c5      	b.n	8008c9c <_printf_common+0x58>
 8008d10:	2301      	movs	r3, #1
 8008d12:	4622      	mov	r2, r4
 8008d14:	4649      	mov	r1, r9
 8008d16:	4638      	mov	r0, r7
 8008d18:	47c0      	blx	r8
 8008d1a:	3001      	adds	r0, #1
 8008d1c:	d0e6      	beq.n	8008cec <_printf_common+0xa8>
 8008d1e:	3601      	adds	r6, #1
 8008d20:	e7d9      	b.n	8008cd6 <_printf_common+0x92>
	...

08008d24 <_printf_i>:
 8008d24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d28:	460c      	mov	r4, r1
 8008d2a:	7e27      	ldrb	r7, [r4, #24]
 8008d2c:	4691      	mov	r9, r2
 8008d2e:	2f78      	cmp	r7, #120	; 0x78
 8008d30:	4680      	mov	r8, r0
 8008d32:	469a      	mov	sl, r3
 8008d34:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008d36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d3a:	d807      	bhi.n	8008d4c <_printf_i+0x28>
 8008d3c:	2f62      	cmp	r7, #98	; 0x62
 8008d3e:	d80a      	bhi.n	8008d56 <_printf_i+0x32>
 8008d40:	2f00      	cmp	r7, #0
 8008d42:	f000 80d9 	beq.w	8008ef8 <_printf_i+0x1d4>
 8008d46:	2f58      	cmp	r7, #88	; 0x58
 8008d48:	f000 80a4 	beq.w	8008e94 <_printf_i+0x170>
 8008d4c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008d50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d54:	e03a      	b.n	8008dcc <_printf_i+0xa8>
 8008d56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d5a:	2b15      	cmp	r3, #21
 8008d5c:	d8f6      	bhi.n	8008d4c <_printf_i+0x28>
 8008d5e:	a001      	add	r0, pc, #4	; (adr r0, 8008d64 <_printf_i+0x40>)
 8008d60:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008d64:	08008dbd 	.word	0x08008dbd
 8008d68:	08008dd1 	.word	0x08008dd1
 8008d6c:	08008d4d 	.word	0x08008d4d
 8008d70:	08008d4d 	.word	0x08008d4d
 8008d74:	08008d4d 	.word	0x08008d4d
 8008d78:	08008d4d 	.word	0x08008d4d
 8008d7c:	08008dd1 	.word	0x08008dd1
 8008d80:	08008d4d 	.word	0x08008d4d
 8008d84:	08008d4d 	.word	0x08008d4d
 8008d88:	08008d4d 	.word	0x08008d4d
 8008d8c:	08008d4d 	.word	0x08008d4d
 8008d90:	08008edf 	.word	0x08008edf
 8008d94:	08008e01 	.word	0x08008e01
 8008d98:	08008ec1 	.word	0x08008ec1
 8008d9c:	08008d4d 	.word	0x08008d4d
 8008da0:	08008d4d 	.word	0x08008d4d
 8008da4:	08008f01 	.word	0x08008f01
 8008da8:	08008d4d 	.word	0x08008d4d
 8008dac:	08008e01 	.word	0x08008e01
 8008db0:	08008d4d 	.word	0x08008d4d
 8008db4:	08008d4d 	.word	0x08008d4d
 8008db8:	08008ec9 	.word	0x08008ec9
 8008dbc:	680b      	ldr	r3, [r1, #0]
 8008dbe:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008dc2:	1d1a      	adds	r2, r3, #4
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	600a      	str	r2, [r1, #0]
 8008dc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008dcc:	2301      	movs	r3, #1
 8008dce:	e0a4      	b.n	8008f1a <_printf_i+0x1f6>
 8008dd0:	6825      	ldr	r5, [r4, #0]
 8008dd2:	6808      	ldr	r0, [r1, #0]
 8008dd4:	062e      	lsls	r6, r5, #24
 8008dd6:	f100 0304 	add.w	r3, r0, #4
 8008dda:	d50a      	bpl.n	8008df2 <_printf_i+0xce>
 8008ddc:	6805      	ldr	r5, [r0, #0]
 8008dde:	600b      	str	r3, [r1, #0]
 8008de0:	2d00      	cmp	r5, #0
 8008de2:	da03      	bge.n	8008dec <_printf_i+0xc8>
 8008de4:	232d      	movs	r3, #45	; 0x2d
 8008de6:	426d      	negs	r5, r5
 8008de8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008dec:	230a      	movs	r3, #10
 8008dee:	485e      	ldr	r0, [pc, #376]	; (8008f68 <_printf_i+0x244>)
 8008df0:	e019      	b.n	8008e26 <_printf_i+0x102>
 8008df2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008df6:	6805      	ldr	r5, [r0, #0]
 8008df8:	600b      	str	r3, [r1, #0]
 8008dfa:	bf18      	it	ne
 8008dfc:	b22d      	sxthne	r5, r5
 8008dfe:	e7ef      	b.n	8008de0 <_printf_i+0xbc>
 8008e00:	680b      	ldr	r3, [r1, #0]
 8008e02:	6825      	ldr	r5, [r4, #0]
 8008e04:	1d18      	adds	r0, r3, #4
 8008e06:	6008      	str	r0, [r1, #0]
 8008e08:	0628      	lsls	r0, r5, #24
 8008e0a:	d501      	bpl.n	8008e10 <_printf_i+0xec>
 8008e0c:	681d      	ldr	r5, [r3, #0]
 8008e0e:	e002      	b.n	8008e16 <_printf_i+0xf2>
 8008e10:	0669      	lsls	r1, r5, #25
 8008e12:	d5fb      	bpl.n	8008e0c <_printf_i+0xe8>
 8008e14:	881d      	ldrh	r5, [r3, #0]
 8008e16:	2f6f      	cmp	r7, #111	; 0x6f
 8008e18:	bf0c      	ite	eq
 8008e1a:	2308      	moveq	r3, #8
 8008e1c:	230a      	movne	r3, #10
 8008e1e:	4852      	ldr	r0, [pc, #328]	; (8008f68 <_printf_i+0x244>)
 8008e20:	2100      	movs	r1, #0
 8008e22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e26:	6866      	ldr	r6, [r4, #4]
 8008e28:	2e00      	cmp	r6, #0
 8008e2a:	bfa8      	it	ge
 8008e2c:	6821      	ldrge	r1, [r4, #0]
 8008e2e:	60a6      	str	r6, [r4, #8]
 8008e30:	bfa4      	itt	ge
 8008e32:	f021 0104 	bicge.w	r1, r1, #4
 8008e36:	6021      	strge	r1, [r4, #0]
 8008e38:	b90d      	cbnz	r5, 8008e3e <_printf_i+0x11a>
 8008e3a:	2e00      	cmp	r6, #0
 8008e3c:	d04d      	beq.n	8008eda <_printf_i+0x1b6>
 8008e3e:	4616      	mov	r6, r2
 8008e40:	fbb5 f1f3 	udiv	r1, r5, r3
 8008e44:	fb03 5711 	mls	r7, r3, r1, r5
 8008e48:	5dc7      	ldrb	r7, [r0, r7]
 8008e4a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008e4e:	462f      	mov	r7, r5
 8008e50:	42bb      	cmp	r3, r7
 8008e52:	460d      	mov	r5, r1
 8008e54:	d9f4      	bls.n	8008e40 <_printf_i+0x11c>
 8008e56:	2b08      	cmp	r3, #8
 8008e58:	d10b      	bne.n	8008e72 <_printf_i+0x14e>
 8008e5a:	6823      	ldr	r3, [r4, #0]
 8008e5c:	07df      	lsls	r7, r3, #31
 8008e5e:	d508      	bpl.n	8008e72 <_printf_i+0x14e>
 8008e60:	6923      	ldr	r3, [r4, #16]
 8008e62:	6861      	ldr	r1, [r4, #4]
 8008e64:	4299      	cmp	r1, r3
 8008e66:	bfde      	ittt	le
 8008e68:	2330      	movle	r3, #48	; 0x30
 8008e6a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008e6e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008e72:	1b92      	subs	r2, r2, r6
 8008e74:	6122      	str	r2, [r4, #16]
 8008e76:	464b      	mov	r3, r9
 8008e78:	4621      	mov	r1, r4
 8008e7a:	4640      	mov	r0, r8
 8008e7c:	f8cd a000 	str.w	sl, [sp]
 8008e80:	aa03      	add	r2, sp, #12
 8008e82:	f7ff fedf 	bl	8008c44 <_printf_common>
 8008e86:	3001      	adds	r0, #1
 8008e88:	d14c      	bne.n	8008f24 <_printf_i+0x200>
 8008e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e8e:	b004      	add	sp, #16
 8008e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e94:	4834      	ldr	r0, [pc, #208]	; (8008f68 <_printf_i+0x244>)
 8008e96:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008e9a:	680e      	ldr	r6, [r1, #0]
 8008e9c:	6823      	ldr	r3, [r4, #0]
 8008e9e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008ea2:	061f      	lsls	r7, r3, #24
 8008ea4:	600e      	str	r6, [r1, #0]
 8008ea6:	d514      	bpl.n	8008ed2 <_printf_i+0x1ae>
 8008ea8:	07d9      	lsls	r1, r3, #31
 8008eaa:	bf44      	itt	mi
 8008eac:	f043 0320 	orrmi.w	r3, r3, #32
 8008eb0:	6023      	strmi	r3, [r4, #0]
 8008eb2:	b91d      	cbnz	r5, 8008ebc <_printf_i+0x198>
 8008eb4:	6823      	ldr	r3, [r4, #0]
 8008eb6:	f023 0320 	bic.w	r3, r3, #32
 8008eba:	6023      	str	r3, [r4, #0]
 8008ebc:	2310      	movs	r3, #16
 8008ebe:	e7af      	b.n	8008e20 <_printf_i+0xfc>
 8008ec0:	6823      	ldr	r3, [r4, #0]
 8008ec2:	f043 0320 	orr.w	r3, r3, #32
 8008ec6:	6023      	str	r3, [r4, #0]
 8008ec8:	2378      	movs	r3, #120	; 0x78
 8008eca:	4828      	ldr	r0, [pc, #160]	; (8008f6c <_printf_i+0x248>)
 8008ecc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008ed0:	e7e3      	b.n	8008e9a <_printf_i+0x176>
 8008ed2:	065e      	lsls	r6, r3, #25
 8008ed4:	bf48      	it	mi
 8008ed6:	b2ad      	uxthmi	r5, r5
 8008ed8:	e7e6      	b.n	8008ea8 <_printf_i+0x184>
 8008eda:	4616      	mov	r6, r2
 8008edc:	e7bb      	b.n	8008e56 <_printf_i+0x132>
 8008ede:	680b      	ldr	r3, [r1, #0]
 8008ee0:	6826      	ldr	r6, [r4, #0]
 8008ee2:	1d1d      	adds	r5, r3, #4
 8008ee4:	6960      	ldr	r0, [r4, #20]
 8008ee6:	600d      	str	r5, [r1, #0]
 8008ee8:	0635      	lsls	r5, r6, #24
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	d501      	bpl.n	8008ef2 <_printf_i+0x1ce>
 8008eee:	6018      	str	r0, [r3, #0]
 8008ef0:	e002      	b.n	8008ef8 <_printf_i+0x1d4>
 8008ef2:	0671      	lsls	r1, r6, #25
 8008ef4:	d5fb      	bpl.n	8008eee <_printf_i+0x1ca>
 8008ef6:	8018      	strh	r0, [r3, #0]
 8008ef8:	2300      	movs	r3, #0
 8008efa:	4616      	mov	r6, r2
 8008efc:	6123      	str	r3, [r4, #16]
 8008efe:	e7ba      	b.n	8008e76 <_printf_i+0x152>
 8008f00:	680b      	ldr	r3, [r1, #0]
 8008f02:	1d1a      	adds	r2, r3, #4
 8008f04:	600a      	str	r2, [r1, #0]
 8008f06:	681e      	ldr	r6, [r3, #0]
 8008f08:	2100      	movs	r1, #0
 8008f0a:	4630      	mov	r0, r6
 8008f0c:	6862      	ldr	r2, [r4, #4]
 8008f0e:	f000 f82f 	bl	8008f70 <memchr>
 8008f12:	b108      	cbz	r0, 8008f18 <_printf_i+0x1f4>
 8008f14:	1b80      	subs	r0, r0, r6
 8008f16:	6060      	str	r0, [r4, #4]
 8008f18:	6863      	ldr	r3, [r4, #4]
 8008f1a:	6123      	str	r3, [r4, #16]
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f22:	e7a8      	b.n	8008e76 <_printf_i+0x152>
 8008f24:	4632      	mov	r2, r6
 8008f26:	4649      	mov	r1, r9
 8008f28:	4640      	mov	r0, r8
 8008f2a:	6923      	ldr	r3, [r4, #16]
 8008f2c:	47d0      	blx	sl
 8008f2e:	3001      	adds	r0, #1
 8008f30:	d0ab      	beq.n	8008e8a <_printf_i+0x166>
 8008f32:	6823      	ldr	r3, [r4, #0]
 8008f34:	079b      	lsls	r3, r3, #30
 8008f36:	d413      	bmi.n	8008f60 <_printf_i+0x23c>
 8008f38:	68e0      	ldr	r0, [r4, #12]
 8008f3a:	9b03      	ldr	r3, [sp, #12]
 8008f3c:	4298      	cmp	r0, r3
 8008f3e:	bfb8      	it	lt
 8008f40:	4618      	movlt	r0, r3
 8008f42:	e7a4      	b.n	8008e8e <_printf_i+0x16a>
 8008f44:	2301      	movs	r3, #1
 8008f46:	4632      	mov	r2, r6
 8008f48:	4649      	mov	r1, r9
 8008f4a:	4640      	mov	r0, r8
 8008f4c:	47d0      	blx	sl
 8008f4e:	3001      	adds	r0, #1
 8008f50:	d09b      	beq.n	8008e8a <_printf_i+0x166>
 8008f52:	3501      	adds	r5, #1
 8008f54:	68e3      	ldr	r3, [r4, #12]
 8008f56:	9903      	ldr	r1, [sp, #12]
 8008f58:	1a5b      	subs	r3, r3, r1
 8008f5a:	42ab      	cmp	r3, r5
 8008f5c:	dcf2      	bgt.n	8008f44 <_printf_i+0x220>
 8008f5e:	e7eb      	b.n	8008f38 <_printf_i+0x214>
 8008f60:	2500      	movs	r5, #0
 8008f62:	f104 0619 	add.w	r6, r4, #25
 8008f66:	e7f5      	b.n	8008f54 <_printf_i+0x230>
 8008f68:	080092a5 	.word	0x080092a5
 8008f6c:	080092b6 	.word	0x080092b6

08008f70 <memchr>:
 8008f70:	4603      	mov	r3, r0
 8008f72:	b510      	push	{r4, lr}
 8008f74:	b2c9      	uxtb	r1, r1
 8008f76:	4402      	add	r2, r0
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	d101      	bne.n	8008f82 <memchr+0x12>
 8008f7e:	2000      	movs	r0, #0
 8008f80:	e003      	b.n	8008f8a <memchr+0x1a>
 8008f82:	7804      	ldrb	r4, [r0, #0]
 8008f84:	3301      	adds	r3, #1
 8008f86:	428c      	cmp	r4, r1
 8008f88:	d1f6      	bne.n	8008f78 <memchr+0x8>
 8008f8a:	bd10      	pop	{r4, pc}

08008f8c <memcpy>:
 8008f8c:	440a      	add	r2, r1
 8008f8e:	4291      	cmp	r1, r2
 8008f90:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f94:	d100      	bne.n	8008f98 <memcpy+0xc>
 8008f96:	4770      	bx	lr
 8008f98:	b510      	push	{r4, lr}
 8008f9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f9e:	4291      	cmp	r1, r2
 8008fa0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fa4:	d1f9      	bne.n	8008f9a <memcpy+0xe>
 8008fa6:	bd10      	pop	{r4, pc}

08008fa8 <memmove>:
 8008fa8:	4288      	cmp	r0, r1
 8008faa:	b510      	push	{r4, lr}
 8008fac:	eb01 0402 	add.w	r4, r1, r2
 8008fb0:	d902      	bls.n	8008fb8 <memmove+0x10>
 8008fb2:	4284      	cmp	r4, r0
 8008fb4:	4623      	mov	r3, r4
 8008fb6:	d807      	bhi.n	8008fc8 <memmove+0x20>
 8008fb8:	1e43      	subs	r3, r0, #1
 8008fba:	42a1      	cmp	r1, r4
 8008fbc:	d008      	beq.n	8008fd0 <memmove+0x28>
 8008fbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008fc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008fc6:	e7f8      	b.n	8008fba <memmove+0x12>
 8008fc8:	4601      	mov	r1, r0
 8008fca:	4402      	add	r2, r0
 8008fcc:	428a      	cmp	r2, r1
 8008fce:	d100      	bne.n	8008fd2 <memmove+0x2a>
 8008fd0:	bd10      	pop	{r4, pc}
 8008fd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008fd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008fda:	e7f7      	b.n	8008fcc <memmove+0x24>

08008fdc <_free_r>:
 8008fdc:	b538      	push	{r3, r4, r5, lr}
 8008fde:	4605      	mov	r5, r0
 8008fe0:	2900      	cmp	r1, #0
 8008fe2:	d043      	beq.n	800906c <_free_r+0x90>
 8008fe4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fe8:	1f0c      	subs	r4, r1, #4
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	bfb8      	it	lt
 8008fee:	18e4      	addlt	r4, r4, r3
 8008ff0:	f000 f8d0 	bl	8009194 <__malloc_lock>
 8008ff4:	4a1e      	ldr	r2, [pc, #120]	; (8009070 <_free_r+0x94>)
 8008ff6:	6813      	ldr	r3, [r2, #0]
 8008ff8:	4610      	mov	r0, r2
 8008ffa:	b933      	cbnz	r3, 800900a <_free_r+0x2e>
 8008ffc:	6063      	str	r3, [r4, #4]
 8008ffe:	6014      	str	r4, [r2, #0]
 8009000:	4628      	mov	r0, r5
 8009002:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009006:	f000 b8cb 	b.w	80091a0 <__malloc_unlock>
 800900a:	42a3      	cmp	r3, r4
 800900c:	d90a      	bls.n	8009024 <_free_r+0x48>
 800900e:	6821      	ldr	r1, [r4, #0]
 8009010:	1862      	adds	r2, r4, r1
 8009012:	4293      	cmp	r3, r2
 8009014:	bf01      	itttt	eq
 8009016:	681a      	ldreq	r2, [r3, #0]
 8009018:	685b      	ldreq	r3, [r3, #4]
 800901a:	1852      	addeq	r2, r2, r1
 800901c:	6022      	streq	r2, [r4, #0]
 800901e:	6063      	str	r3, [r4, #4]
 8009020:	6004      	str	r4, [r0, #0]
 8009022:	e7ed      	b.n	8009000 <_free_r+0x24>
 8009024:	461a      	mov	r2, r3
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	b10b      	cbz	r3, 800902e <_free_r+0x52>
 800902a:	42a3      	cmp	r3, r4
 800902c:	d9fa      	bls.n	8009024 <_free_r+0x48>
 800902e:	6811      	ldr	r1, [r2, #0]
 8009030:	1850      	adds	r0, r2, r1
 8009032:	42a0      	cmp	r0, r4
 8009034:	d10b      	bne.n	800904e <_free_r+0x72>
 8009036:	6820      	ldr	r0, [r4, #0]
 8009038:	4401      	add	r1, r0
 800903a:	1850      	adds	r0, r2, r1
 800903c:	4283      	cmp	r3, r0
 800903e:	6011      	str	r1, [r2, #0]
 8009040:	d1de      	bne.n	8009000 <_free_r+0x24>
 8009042:	6818      	ldr	r0, [r3, #0]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	4401      	add	r1, r0
 8009048:	6011      	str	r1, [r2, #0]
 800904a:	6053      	str	r3, [r2, #4]
 800904c:	e7d8      	b.n	8009000 <_free_r+0x24>
 800904e:	d902      	bls.n	8009056 <_free_r+0x7a>
 8009050:	230c      	movs	r3, #12
 8009052:	602b      	str	r3, [r5, #0]
 8009054:	e7d4      	b.n	8009000 <_free_r+0x24>
 8009056:	6820      	ldr	r0, [r4, #0]
 8009058:	1821      	adds	r1, r4, r0
 800905a:	428b      	cmp	r3, r1
 800905c:	bf01      	itttt	eq
 800905e:	6819      	ldreq	r1, [r3, #0]
 8009060:	685b      	ldreq	r3, [r3, #4]
 8009062:	1809      	addeq	r1, r1, r0
 8009064:	6021      	streq	r1, [r4, #0]
 8009066:	6063      	str	r3, [r4, #4]
 8009068:	6054      	str	r4, [r2, #4]
 800906a:	e7c9      	b.n	8009000 <_free_r+0x24>
 800906c:	bd38      	pop	{r3, r4, r5, pc}
 800906e:	bf00      	nop
 8009070:	200004b8 	.word	0x200004b8

08009074 <_malloc_r>:
 8009074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009076:	1ccd      	adds	r5, r1, #3
 8009078:	f025 0503 	bic.w	r5, r5, #3
 800907c:	3508      	adds	r5, #8
 800907e:	2d0c      	cmp	r5, #12
 8009080:	bf38      	it	cc
 8009082:	250c      	movcc	r5, #12
 8009084:	2d00      	cmp	r5, #0
 8009086:	4606      	mov	r6, r0
 8009088:	db01      	blt.n	800908e <_malloc_r+0x1a>
 800908a:	42a9      	cmp	r1, r5
 800908c:	d903      	bls.n	8009096 <_malloc_r+0x22>
 800908e:	230c      	movs	r3, #12
 8009090:	6033      	str	r3, [r6, #0]
 8009092:	2000      	movs	r0, #0
 8009094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009096:	f000 f87d 	bl	8009194 <__malloc_lock>
 800909a:	4921      	ldr	r1, [pc, #132]	; (8009120 <_malloc_r+0xac>)
 800909c:	680a      	ldr	r2, [r1, #0]
 800909e:	4614      	mov	r4, r2
 80090a0:	b99c      	cbnz	r4, 80090ca <_malloc_r+0x56>
 80090a2:	4f20      	ldr	r7, [pc, #128]	; (8009124 <_malloc_r+0xb0>)
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	b923      	cbnz	r3, 80090b2 <_malloc_r+0x3e>
 80090a8:	4621      	mov	r1, r4
 80090aa:	4630      	mov	r0, r6
 80090ac:	f000 f862 	bl	8009174 <_sbrk_r>
 80090b0:	6038      	str	r0, [r7, #0]
 80090b2:	4629      	mov	r1, r5
 80090b4:	4630      	mov	r0, r6
 80090b6:	f000 f85d 	bl	8009174 <_sbrk_r>
 80090ba:	1c43      	adds	r3, r0, #1
 80090bc:	d123      	bne.n	8009106 <_malloc_r+0x92>
 80090be:	230c      	movs	r3, #12
 80090c0:	4630      	mov	r0, r6
 80090c2:	6033      	str	r3, [r6, #0]
 80090c4:	f000 f86c 	bl	80091a0 <__malloc_unlock>
 80090c8:	e7e3      	b.n	8009092 <_malloc_r+0x1e>
 80090ca:	6823      	ldr	r3, [r4, #0]
 80090cc:	1b5b      	subs	r3, r3, r5
 80090ce:	d417      	bmi.n	8009100 <_malloc_r+0x8c>
 80090d0:	2b0b      	cmp	r3, #11
 80090d2:	d903      	bls.n	80090dc <_malloc_r+0x68>
 80090d4:	6023      	str	r3, [r4, #0]
 80090d6:	441c      	add	r4, r3
 80090d8:	6025      	str	r5, [r4, #0]
 80090da:	e004      	b.n	80090e6 <_malloc_r+0x72>
 80090dc:	6863      	ldr	r3, [r4, #4]
 80090de:	42a2      	cmp	r2, r4
 80090e0:	bf0c      	ite	eq
 80090e2:	600b      	streq	r3, [r1, #0]
 80090e4:	6053      	strne	r3, [r2, #4]
 80090e6:	4630      	mov	r0, r6
 80090e8:	f000 f85a 	bl	80091a0 <__malloc_unlock>
 80090ec:	f104 000b 	add.w	r0, r4, #11
 80090f0:	1d23      	adds	r3, r4, #4
 80090f2:	f020 0007 	bic.w	r0, r0, #7
 80090f6:	1ac2      	subs	r2, r0, r3
 80090f8:	d0cc      	beq.n	8009094 <_malloc_r+0x20>
 80090fa:	1a1b      	subs	r3, r3, r0
 80090fc:	50a3      	str	r3, [r4, r2]
 80090fe:	e7c9      	b.n	8009094 <_malloc_r+0x20>
 8009100:	4622      	mov	r2, r4
 8009102:	6864      	ldr	r4, [r4, #4]
 8009104:	e7cc      	b.n	80090a0 <_malloc_r+0x2c>
 8009106:	1cc4      	adds	r4, r0, #3
 8009108:	f024 0403 	bic.w	r4, r4, #3
 800910c:	42a0      	cmp	r0, r4
 800910e:	d0e3      	beq.n	80090d8 <_malloc_r+0x64>
 8009110:	1a21      	subs	r1, r4, r0
 8009112:	4630      	mov	r0, r6
 8009114:	f000 f82e 	bl	8009174 <_sbrk_r>
 8009118:	3001      	adds	r0, #1
 800911a:	d1dd      	bne.n	80090d8 <_malloc_r+0x64>
 800911c:	e7cf      	b.n	80090be <_malloc_r+0x4a>
 800911e:	bf00      	nop
 8009120:	200004b8 	.word	0x200004b8
 8009124:	200004bc 	.word	0x200004bc

08009128 <_realloc_r>:
 8009128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800912a:	4607      	mov	r7, r0
 800912c:	4614      	mov	r4, r2
 800912e:	460e      	mov	r6, r1
 8009130:	b921      	cbnz	r1, 800913c <_realloc_r+0x14>
 8009132:	4611      	mov	r1, r2
 8009134:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009138:	f7ff bf9c 	b.w	8009074 <_malloc_r>
 800913c:	b922      	cbnz	r2, 8009148 <_realloc_r+0x20>
 800913e:	f7ff ff4d 	bl	8008fdc <_free_r>
 8009142:	4625      	mov	r5, r4
 8009144:	4628      	mov	r0, r5
 8009146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009148:	f000 f830 	bl	80091ac <_malloc_usable_size_r>
 800914c:	42a0      	cmp	r0, r4
 800914e:	d20f      	bcs.n	8009170 <_realloc_r+0x48>
 8009150:	4621      	mov	r1, r4
 8009152:	4638      	mov	r0, r7
 8009154:	f7ff ff8e 	bl	8009074 <_malloc_r>
 8009158:	4605      	mov	r5, r0
 800915a:	2800      	cmp	r0, #0
 800915c:	d0f2      	beq.n	8009144 <_realloc_r+0x1c>
 800915e:	4631      	mov	r1, r6
 8009160:	4622      	mov	r2, r4
 8009162:	f7ff ff13 	bl	8008f8c <memcpy>
 8009166:	4631      	mov	r1, r6
 8009168:	4638      	mov	r0, r7
 800916a:	f7ff ff37 	bl	8008fdc <_free_r>
 800916e:	e7e9      	b.n	8009144 <_realloc_r+0x1c>
 8009170:	4635      	mov	r5, r6
 8009172:	e7e7      	b.n	8009144 <_realloc_r+0x1c>

08009174 <_sbrk_r>:
 8009174:	b538      	push	{r3, r4, r5, lr}
 8009176:	2300      	movs	r3, #0
 8009178:	4d05      	ldr	r5, [pc, #20]	; (8009190 <_sbrk_r+0x1c>)
 800917a:	4604      	mov	r4, r0
 800917c:	4608      	mov	r0, r1
 800917e:	602b      	str	r3, [r5, #0]
 8009180:	f7f7 fb46 	bl	8000810 <_sbrk>
 8009184:	1c43      	adds	r3, r0, #1
 8009186:	d102      	bne.n	800918e <_sbrk_r+0x1a>
 8009188:	682b      	ldr	r3, [r5, #0]
 800918a:	b103      	cbz	r3, 800918e <_sbrk_r+0x1a>
 800918c:	6023      	str	r3, [r4, #0]
 800918e:	bd38      	pop	{r3, r4, r5, pc}
 8009190:	200014e4 	.word	0x200014e4

08009194 <__malloc_lock>:
 8009194:	4801      	ldr	r0, [pc, #4]	; (800919c <__malloc_lock+0x8>)
 8009196:	f000 b811 	b.w	80091bc <__retarget_lock_acquire_recursive>
 800919a:	bf00      	nop
 800919c:	200014ec 	.word	0x200014ec

080091a0 <__malloc_unlock>:
 80091a0:	4801      	ldr	r0, [pc, #4]	; (80091a8 <__malloc_unlock+0x8>)
 80091a2:	f000 b80c 	b.w	80091be <__retarget_lock_release_recursive>
 80091a6:	bf00      	nop
 80091a8:	200014ec 	.word	0x200014ec

080091ac <_malloc_usable_size_r>:
 80091ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091b0:	1f18      	subs	r0, r3, #4
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	bfbc      	itt	lt
 80091b6:	580b      	ldrlt	r3, [r1, r0]
 80091b8:	18c0      	addlt	r0, r0, r3
 80091ba:	4770      	bx	lr

080091bc <__retarget_lock_acquire_recursive>:
 80091bc:	4770      	bx	lr

080091be <__retarget_lock_release_recursive>:
 80091be:	4770      	bx	lr

080091c0 <_init>:
 80091c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091c2:	bf00      	nop
 80091c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091c6:	bc08      	pop	{r3}
 80091c8:	469e      	mov	lr, r3
 80091ca:	4770      	bx	lr

080091cc <_fini>:
 80091cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ce:	bf00      	nop
 80091d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091d2:	bc08      	pop	{r3}
 80091d4:	469e      	mov	lr, r3
 80091d6:	4770      	bx	lr
